#include "httpd.h"
//-----------------------------------------------
extern UART_HandleTypeDef huart2;
//-----------------------------------------------
extern char str1[60];
extern char tmpbuf[30];
extern uint8_t sect[515];
//-----------------------------------------------
http_sock_prop_ptr httpsockprop[2];
extern tcp_prop_ptr tcpprop;

uint32_t bytesread;
volatile uint16_t tcp_size_wnd = 2048;
//-----------------------------------------------
const char http_header[] = { "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n"};
const char jpg_header[] = {"HTTP/1.0 200 OK\r\nServer: nginx\r\nContent-Type: image/jpeg\r\nConnection: close\r\n\r\n"};
const char icon_header[] = { "HTTP/1.1 200 OK\r\nContent-Type: image/x-icon\r\n\r\n"};
const char error_header[] = {"HTTP/1.0 404 File not found\r\nServer: nginx\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n"};
const char json_header[] = {"HTTP/1.1 200 OK\r\nContent-Type: application/json;charset=utf-8\r\n\r\n"};
char *header;
//-----------------------------------------------
const char e404_htm[] = {"{\"id\": 1, \"jsonrpc\": \"2.0\",\"total\": 5, \"result\": 1  }"};
//-----------------------------------------------
void tcp_send_http_one(void)
{
  uint16_t i=0;
  uint16_t data_len=0;
  uint16_t header_len=0;
  uint16_t end_point;
  uint8_t num_sect=0;
  uint16_t len_sect;
	{
		header_len = strlen(json_header);
		data_len = sizeof(e404_htm);
		end_point = GetWritePointer(tcpprop.cur_sock);
		end_point+=header_len+data_len;
		SetWritePointer(tcpprop.cur_sock, end_point);
		end_point = GetWritePointer(tcpprop.cur_sock);
		//Заполним данными буфер для отправки пакета
		memcpy(sect+3,json_header,header_len);
		w5500_writeSockBuf(tcpprop.cur_sock, end_point, (uint8_t*)sect, header_len);
		end_point+=header_len;
		memcpy(sect+3,e404_htm,data_len);
		w5500_writeSockBuf(tcpprop.cur_sock, end_point, (uint8_t*)sect, data_len);
		end_point+=data_len;
	}
	//отправим данные
  RecvSocket(tcpprop.cur_sock);
  SendSocket(tcpprop.cur_sock);
  httpsockprop[tcpprop.cur_sock].data_stat = DATA_COMPLETED;
}
//-----------------------------------------------
void tcp_send_http_first(void)
{

}
//-----------------------------------------------
void tcp_send_http_middle(void)
{

}
//-----------------------------------------------
void tcp_send_http_last(void)
{

}
//-----------------------------------------------
void http_request(void)
{
  uint16_t point;
  uint8_t RXbyte;
  uint16_t i=0;
  char *ss1;
  int ch1='.';

  // ищем первый "/" в HTTP заголовке
  point = GetReadPointer(tcpprop.cur_sock);
  i = 0;
  while (RXbyte != (uint8_t)'/')
  {
    RXbyte = w5500_readSockBufByte(tcpprop.cur_sock,point+i);
    i++;
  }
	point+=i;
	RXbyte = w5500_readSockBufByte(tcpprop.cur_sock,point);
	if(RXbyte==(uint8_t)' ')
	{
		strcpy(httpsockprop[tcpprop.cur_sock].fname,"index.htm");
		httpsockprop[tcpprop.cur_sock].http_doc = EXISTING_HTML;
	}
	else
	{
		// ищем следующий пробел (" ") в HTTP заголовке, таким образом считывая имя документа из запроса
		i=0;
		while (1)
		{
			tmpbuf[i] = w5500_readSockBufByte(tcpprop.cur_sock, point+i);
			if(tmpbuf[i] == (uint8_t)' ') break;
			i++;
		}
		tmpbuf[i] = 0; //закончим строку
		strcpy(httpsockprop[tcpprop.cur_sock].fname,tmpbuf);
	}
	HAL_UART_Transmit(&huart2,(uint8_t*)httpsockprop[tcpprop.cur_sock].fname,strlen(httpsockprop[tcpprop.cur_sock].fname),0x1000);
	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
	//f_close(&MyFile);
	//result=f_open(&MyFile,httpsockprop[tcpprop.cur_sock].fname,FA_READ); //Попытка открыть файл
	//sprintf(str1,"f_open: %d\r\n",result);
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	//sprintf(str1,"f_size: %lu\r\n",MyFile.fsize);
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);

	//if (fname=="  ")
	/*{
		//изучим расширение файла
		ss1 = strchr(httpsockprop[tcpprop.cur_sock].fname,ch1);
		ss1++;
		if (strncmp(ss1,"jpg", 3) == 0)
		{
			httpsockprop[tcpprop.cur_sock].http_doc = EXISTING_JPG;
			//сначала включаем в размер размер заголовка
			httpsockprop[tcpprop.cur_sock].data_size = strlen(jpg_header);
		}
		if (strncmp(ss1,"ico", 3) == 0)
		{
			httpsockprop[tcpprop.cur_sock].http_doc = EXISTING_ICO;
			//сначала включаем в размер размер заголовка
			httpsockprop[tcpprop.cur_sock].data_size = strlen(icon_header);
		}
		else
		{
			httpsockprop[tcpprop.cur_sock].http_doc = EXISTING_HTML;
			//сначала включаем в размер размер заголовка
			httpsockprop[tcpprop.cur_sock].data_size = strlen(http_header);
		}
		//затем размер самого документа
		//httpsockprop[tcpprop.cur_sock].data_size += MyFile.fsize;
	}*/
	//else
	{
		httpsockprop[tcpprop.cur_sock].http_doc = E404_HTML;
		//сначала включаем в размер размер заголовка
		httpsockprop[tcpprop.cur_sock].data_size = strlen(error_header);
		//затем размер самого документа
		httpsockprop[tcpprop.cur_sock].data_size += sizeof(e404_htm);
	}
	httpsockprop[tcpprop.cur_sock].cnt_rem_data_part = httpsockprop[tcpprop.cur_sock].data_size / tcp_size_wnd + 1;
	httpsockprop[tcpprop.cur_sock].last_data_part_size = httpsockprop[tcpprop.cur_sock].data_size % tcp_size_wnd;
	//борьба с неправильным расчётом, когда общий размер делится на минимальный размер окна без остатка
	if(httpsockprop[tcpprop.cur_sock].last_data_part_size==0)
	{
		httpsockprop[tcpprop.cur_sock].last_data_part_size=tcp_size_wnd;
		httpsockprop[tcpprop.cur_sock].cnt_rem_data_part--;
	}
	httpsockprop[tcpprop.cur_sock].cnt_data_part = httpsockprop[tcpprop.cur_sock].cnt_rem_data_part;
	sprintf(str1,"data size:%lu; cnt data part:%u; last_data_part_size:%u\r\n",
	(unsigned long)httpsockprop[tcpprop.cur_sock].data_size, httpsockprop[tcpprop.cur_sock].cnt_rem_data_part, httpsockprop[tcpprop.cur_sock].last_data_part_size);
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	if (httpsockprop[tcpprop.cur_sock].cnt_rem_data_part==1)
	{
		httpsockprop[tcpprop.cur_sock].data_stat = DATA_ONE;
	}
	else if (httpsockprop[tcpprop.cur_sock].cnt_rem_data_part>1)
	{
		httpsockprop[tcpprop.cur_sock].data_stat = DATA_FIRST;
	}
	if(httpsockprop[tcpprop.cur_sock].data_stat==DATA_ONE)
	{
		 tcp_send_http_one();
		DisconnectSocket(tcpprop.cur_sock); //Разъединяемся
		SocketClosedWait(tcpprop.cur_sock);
		OpenSocket(tcpprop.cur_sock,Mode_TCP);
		//Ждём инициализации сокета (статус SOCK_INIT)
		SocketInitWait(tcpprop.cur_sock);
		//Продолжаем слушать сокет
		ListenSocket(tcpprop.cur_sock);
		SocketListenWait(tcpprop.cur_sock);
	}
	else if(httpsockprop[tcpprop.cur_sock].data_stat==DATA_FIRST)
	{
		tcp_send_http_first();
	}
}
//-----------------------------------------------
