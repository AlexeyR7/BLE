
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000215c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002414  08002414  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  0800248c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800248c  000200a0  2**0
                  ALLOC
 11 .__fm_array_section__ 00000190  02000400  02000400  00000400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000040c7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000f87  00000000  00000000  00024160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000438  00000000  00000000  000250e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003a0  00000000  00000000  00025520  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a6bc  00000000  00000000  000258c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003f32  00000000  00000000  0003ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00091a33  00000000  00000000  00043eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d58e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015fc  00000000  00000000  000d595c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002328 	.word	0x08002328

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002328 	.word	0x08002328

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 f9b7 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f819 	bl	8000568 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
int i=0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("%d",array1[i++]);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	1c5a      	adds	r2, r3, #1
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <main+0x38>)
 8000542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000546:	4619      	mov	r1, r3
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x3c>)
 800054a:	f000 ffff 	bl	800154c <iprintf>
	  array1[i++]=i;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	b291      	uxth	r1, r2
 8000558:	4a01      	ldr	r2, [pc, #4]	; (8000560 <main+0x38>)
 800055a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  {
 800055e:	e7ec      	b.n	800053a <main+0x12>
 8000560:	02000400 	.word	0x02000400
 8000564:	08002340 	.word	0x08002340

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2238      	movs	r2, #56	; 0x38
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f000 ffe0 	bl	800153c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2310      	movs	r3, #16
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000596:	2300      	movs	r3, #0
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fac2 	bl	8000b2c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80005ae:	f000 f81d 	bl	80005ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fdc4 	bl	8001158 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005d6:	f000 f809 	bl	80005ec <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <SystemClock_Config+0x80>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	42420070 	.word	0x42420070

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_MspInit+0x5c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_MspInit+0x5c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x5c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x5c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_MspInit+0x60>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_MspInit+0x60>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	40010000 	.word	0x40010000

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <HardFault_Handler+0x4>

0800066e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <MemManage_Handler+0x4>

08000674 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <BusFault_Handler+0x4>

0800067a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <UsageFault_Handler+0x4>

08000680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a8:	f000 f940 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00a      	b.n	80006d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006c2:	f3af 8000 	nop.w
 80006c6:	4601      	mov	r1, r0
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	b2ca      	uxtb	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf0      	blt.n	80006c2 <_read+0x12>
	}

return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x12>
	}
	return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_close>:

int _close(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000748:	605a      	str	r2, [r3, #4]
	return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <_isatty>:

int _isatty(int file)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
	return 1;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
	return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <_sbrk+0x50>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <_sbrk+0x16>
		heap_end = &end;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <_sbrk+0x50>)
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <_sbrk+0x54>)
 8000798:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <_sbrk+0x50>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <_sbrk+0x50>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	466a      	mov	r2, sp
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d907      	bls.n	80007be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007ae:	f000 febf 	bl	8001530 <__errno>
 80007b2:	4602      	mov	r2, r0
 80007b4:	230c      	movs	r3, #12
 80007b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	e006      	b.n	80007cc <_sbrk+0x48>
	}

	heap_end += incr;
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <_sbrk+0x50>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <_sbrk+0x50>)
 80007c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	200000a0 	.word	0x200000a0

080007dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <SystemInit+0x70>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <SystemInit+0x70>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <SystemInit+0x70>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	4916      	ldr	r1, [pc, #88]	; (800084c <SystemInit+0x70>)
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <SystemInit+0x74>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <SystemInit+0x70>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <SystemInit+0x70>)
 80007fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000806:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <SystemInit+0x70>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <SystemInit+0x70>)
 800080e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000812:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <SystemInit+0x70>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <SystemInit+0x70>)
 800081a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800081e:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <SystemInit+0x70>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a09      	ldr	r2, [pc, #36]	; (800084c <SystemInit+0x70>)
 8000826:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800082a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <SystemInit+0x70>)
 800082e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000832:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SystemInit+0x70>)
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x78>)
 800083c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000840:	609a      	str	r2, [r3, #8]
#endif 
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	f0ff0000 	.word	0xf0ff0000
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000858:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800085a:	e003      	b.n	8000864 <LoopCopyDataInit>

0800085c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800085e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000860:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000862:	3104      	adds	r1, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000868:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800086a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800086c:	d3f6      	bcc.n	800085c <CopyDataInit>
  ldr r2, =_sbss
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000870:	e002      	b.n	8000878 <LoopFillZerobss>

08000872 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000874:	f842 3b04 	str.w	r3, [r2], #4

08000878 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <LoopFillZerobss+0x20>)
  cmp r2, r3
 800087a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800087c:	d3f9      	bcc.n	8000872 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800087e:	f7ff ffad 	bl	80007dc <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fe51 	bl	8000528 <main>
  bx lr
 8000886:	4770      	bx	lr
  ldr r3, =_sidata
 8000888:	0800241c 	.word	0x0800241c
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000890:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000894:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000898:	200000a0 	.word	0x200000a0

0800089c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f907 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff fe9c 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f911 	bl	8000b12 <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f8e7 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000008 	.word	0x20000008
 800094c:	20000098 	.word	0x20000098

08000950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000098 	.word	0x20000098

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff90 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff49 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff5e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff90 	bl	8000a1c <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5f 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb0 	bl	8000a80 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e304      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8087 	beq.w	8000c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b4c:	4b92      	ldr	r3, [pc, #584]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d00c      	beq.n	8000b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b58:	4b8f      	ldr	r3, [pc, #572]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d112      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b70:	d10b      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b72:	4b89      	ldr	r3, [pc, #548]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d06c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x12c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d168      	bne.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e2de      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d106      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x76>
 8000b94:	4b80      	ldr	r3, [pc, #512]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a7f      	ldr	r2, [pc, #508]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e02e      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x98>
 8000baa:	4b7b      	ldr	r3, [pc, #492]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a7a      	ldr	r2, [pc, #488]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b78      	ldr	r3, [pc, #480]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a77      	ldr	r2, [pc, #476]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e01d      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0xbc>
 8000bce:	4b72      	ldr	r3, [pc, #456]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a71      	ldr	r2, [pc, #452]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b6f      	ldr	r3, [pc, #444]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6e      	ldr	r2, [pc, #440]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e00b      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000be8:	4b6b      	ldr	r3, [pc, #428]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a6a      	ldr	r2, [pc, #424]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b68      	ldr	r3, [pc, #416]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a67      	ldr	r2, [pc, #412]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fea2 	bl	8000950 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fe9e 	bl	8000950 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e292      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	4b5d      	ldr	r3, [pc, #372]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe4>
 8000c2e:	e014      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fe8e 	bl	8000950 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fe8a 	bl	8000950 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e27e      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x10c>
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d063      	beq.n	8000d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	4b4c      	ldr	r3, [pc, #304]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c72:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d116      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d005      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e252      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4939      	ldr	r1, [pc, #228]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	e03a      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d020      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fe43 	bl	8000950 <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cce:	f7ff fe3f 	bl	8000950 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e233      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cec:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4927      	ldr	r1, [pc, #156]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fe22 	bl	8000950 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d10:	f7ff fe1e 	bl	8000950 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e212      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d03a      	beq.n	8000db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d019      	beq.n	8000d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d48:	f7ff fe02 	bl	8000950 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fdfe 	bl	8000950 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e1f2      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 fbc0 	bl	80014f4 <RCC_Delay>
 8000d74:	e01c      	b.n	8000db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fde8 	bl	8000950 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d82:	e00f      	b.n	8000da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fde4 	bl	8000950 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d908      	bls.n	8000da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e1d8      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	42420000 	.word	0x42420000
 8000da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4b9b      	ldr	r3, [pc, #620]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e9      	bne.n	8000d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a6 	beq.w	8000f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b94      	ldr	r3, [pc, #592]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b91      	ldr	r3, [pc, #580]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a90      	ldr	r2, [pc, #576]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b8e      	ldr	r3, [pc, #568]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000de6:	2301      	movs	r3, #1
 8000de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dea:	4b8b      	ldr	r3, [pc, #556]	; (8001018 <HAL_RCC_OscConfig+0x4ec>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d118      	bne.n	8000e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000df6:	4b88      	ldr	r3, [pc, #544]	; (8001018 <HAL_RCC_OscConfig+0x4ec>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a87      	ldr	r2, [pc, #540]	; (8001018 <HAL_RCC_OscConfig+0x4ec>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fda5 	bl	8000950 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0a:	f7ff fda1 	bl	8000950 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b64      	cmp	r3, #100	; 0x64
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e195      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1c:	4b7e      	ldr	r3, [pc, #504]	; (8001018 <HAL_RCC_OscConfig+0x4ec>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x312>
 8000e30:	4b78      	ldr	r3, [pc, #480]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a77      	ldr	r2, [pc, #476]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6213      	str	r3, [r2, #32]
 8000e3c:	e02d      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x334>
 8000e46:	4b73      	ldr	r3, [pc, #460]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a72      	ldr	r2, [pc, #456]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6213      	str	r3, [r2, #32]
 8000e52:	4b70      	ldr	r3, [pc, #448]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a6f      	ldr	r2, [pc, #444]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	6213      	str	r3, [r2, #32]
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x356>
 8000e68:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a69      	ldr	r2, [pc, #420]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6213      	str	r3, [r2, #32]
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a66      	ldr	r2, [pc, #408]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6213      	str	r3, [r2, #32]
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e82:	4b64      	ldr	r3, [pc, #400]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a63      	ldr	r2, [pc, #396]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	4b61      	ldr	r3, [pc, #388]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4a60      	ldr	r2, [pc, #384]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d015      	beq.n	8000ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fd55 	bl	8000950 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fd51 	bl	8000950 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e143      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	4b54      	ldr	r3, [pc, #336]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ee      	beq.n	8000eaa <HAL_RCC_OscConfig+0x37e>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fd3f 	bl	8000950 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fd3b 	bl	8000950 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e12d      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	4b49      	ldr	r3, [pc, #292]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a44      	ldr	r2, [pc, #272]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 808c 	beq.w	800102c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000f14:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f20:	d10e      	bne.n	8000f40 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000f22:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d108      	bne.n	8000f40 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8000f2e:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3a:	d101      	bne.n	8000f40 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e103      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d14e      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d009      	beq.n	8000f68 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d001      	beq.n	8000f68 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e0ef      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <HAL_RCC_OscConfig+0x4f0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fcef 	bl	8000950 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000f76:	f7ff fceb 	bl	8000950 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b64      	cmp	r3, #100	; 0x64
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e0df      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f0      	bne.n	8000f76 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa0:	491c      	ldr	r1, [pc, #112]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4918      	ldr	r1, [pc, #96]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_RCC_OscConfig+0x4f0>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fcc7 	bl	8000950 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000fc6:	f7ff fcc3 	bl	8000950 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e0b7      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x49a>
 8000fe4:	e022      	b.n	800102c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_RCC_OscConfig+0x4f0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcaa 	bl	8000950 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8000ffe:	e00f      	b.n	8001020 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001000:	f7ff fca6 	bl	8000950 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d908      	bls.n	8001020 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e09a      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40007000 	.word	0x40007000
 800101c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e9      	bne.n	8001000 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8088 	beq.w	8001146 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001036:	4b46      	ldr	r3, [pc, #280]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b08      	cmp	r3, #8
 8001040:	d068      	beq.n	8001114 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d14d      	bne.n	80010e6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fc7e 	bl	8000950 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fc7a 	bl	8000950 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e06e      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107e:	d10f      	bne.n	80010a0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4931      	ldr	r1, [pc, #196]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 800108a:	4313      	orrs	r3, r2
 800108c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	f023 020f 	bic.w	r2, r3, #15
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	492d      	ldr	r1, [pc, #180]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 800109c:	4313      	orrs	r3, r2
 800109e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	430b      	orrs	r3, r1
 80010b2:	4927      	ldr	r1, [pc, #156]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010be:	f7ff fc47 	bl	8000950 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c6:	f7ff fc43 	bl	8000950 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e037      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x59a>
 80010e4:	e02f      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_RCC_OscConfig+0x628>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc30 	bl	8000950 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f4:	f7ff fc2c 	bl	8000950 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e020      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c8>
 8001112:	e018      	b.n	8001146 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e013      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_RCC_OscConfig+0x624>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	429a      	cmp	r2, r3
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113e:	429a      	cmp	r2, r3
 8001140:	d001      	beq.n	8001146 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	42420060 	.word	0x42420060

08001158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0d0      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4b6a      	ldr	r3, [pc, #424]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d910      	bls.n	800119c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b67      	ldr	r3, [pc, #412]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 0207 	bic.w	r2, r3, #7
 8001182:	4965      	ldr	r1, [pc, #404]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	4313      	orrs	r3, r2
 8001188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0b8      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b4:	4b59      	ldr	r3, [pc, #356]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011cc:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	4b50      	ldr	r3, [pc, #320]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	494d      	ldr	r1, [pc, #308]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d040      	beq.n	8001278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d115      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e07f      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e073      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e06b      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f023 0203 	bic.w	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4936      	ldr	r1, [pc, #216]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001248:	f7ff fb82 	bl	8000950 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	e00a      	b.n	8001266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff fb7e 	bl	8000950 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	; 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e053      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 020c 	and.w	r2, r3, #12
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d1eb      	bne.n	8001250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d210      	bcs.n	80012a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 0207 	bic.w	r2, r3, #7
 800128e:	4922      	ldr	r1, [pc, #136]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e032      	b.n	800130e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4916      	ldr	r1, [pc, #88]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	490e      	ldr	r1, [pc, #56]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e6:	f000 f821 	bl	800132c <HAL_RCC_GetSysClockFreq>
 80012ea:	4601      	mov	r1, r0
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_RCC_ClockConfig+0x1c8>)
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	fa21 f303 	lsr.w	r3, r1, r3
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_RCC_ClockConfig+0x1cc>)
 8001300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_RCC_ClockConfig+0x1d0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fae0 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000
 800131c:	40021000 	.word	0x40021000
 8001320:	08002364 	.word	0x08002364
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800132c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001330:	b091      	sub	sp, #68	; 0x44
 8001332:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001334:	4b6a      	ldr	r3, [pc, #424]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8001336:	f107 0414 	add.w	r4, r7, #20
 800133a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133c:	c407      	stmia	r4!, {r0, r1, r2}
 800133e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001342:	1d3c      	adds	r4, r7, #4
 8001344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001346:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
 8001352:	2300      	movs	r3, #0
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001366:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d002      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x50>
 8001376:	2b08      	cmp	r3, #8
 8001378:	d003      	beq.n	8001382 <HAL_RCC_GetSysClockFreq+0x56>
 800137a:	e0a7      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800137c:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001380:	e0a7      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800138e:	4413      	add	r3, r2
 8001390:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 808d 	beq.w	80014bc <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80013ae:	4413      	add	r3, r2
 80013b0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d06a      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80013c2:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	3301      	adds	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3302      	adds	r3, #2
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	f04f 0400 	mov.w	r4, #0
 80013ec:	fb03 f502 	mul.w	r5, r3, r2
 80013f0:	fb01 f004 	mul.w	r0, r1, r4
 80013f4:	4428      	add	r0, r5
 80013f6:	fba1 5603 	umull	r5, r6, r1, r3
 80013fa:	1983      	adds	r3, r0, r6
 80013fc:	461e      	mov	r6, r3
 80013fe:	4629      	mov	r1, r5
 8001400:	4632      	mov	r2, r6
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	f04f 0400 	mov.w	r4, #0
 800140a:	0154      	lsls	r4, r2, #5
 800140c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001410:	014b      	lsls	r3, r1, #5
 8001412:	4619      	mov	r1, r3
 8001414:	4622      	mov	r2, r4
 8001416:	1b49      	subs	r1, r1, r5
 8001418:	eb62 0206 	sbc.w	r2, r2, r6
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	f04f 0400 	mov.w	r4, #0
 8001424:	0194      	lsls	r4, r2, #6
 8001426:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800142a:	018b      	lsls	r3, r1, #6
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	eb64 0402 	sbc.w	r4, r4, r2
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	00e2      	lsls	r2, r4, #3
 800143c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001440:	00d9      	lsls	r1, r3, #3
 8001442:	460b      	mov	r3, r1
 8001444:	4614      	mov	r4, r2
 8001446:	195b      	adds	r3, r3, r5
 8001448:	eb44 0406 	adc.w	r4, r4, r6
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	0262      	lsls	r2, r4, #9
 8001456:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800145a:	0259      	lsls	r1, r3, #9
 800145c:	460b      	mov	r3, r1
 800145e:	4614      	mov	r4, r2
 8001460:	4698      	mov	r8, r3
 8001462:	46a1      	mov	r9, r4
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	f04f 0400 	mov.w	r4, #0
 8001472:	fb03 f502 	mul.w	r5, r3, r2
 8001476:	fb01 f004 	mul.w	r0, r1, r4
 800147a:	4428      	add	r0, r5
 800147c:	fba1 3403 	umull	r3, r4, r1, r3
 8001480:	1902      	adds	r2, r0, r4
 8001482:	4614      	mov	r4, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4623      	mov	r3, r4
 8001488:	4640      	mov	r0, r8
 800148a:	4649      	mov	r1, r9
 800148c:	f7fe feca 	bl	8000224 <__aeabi_uldivmod>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001496:	e007      	b.n	80014a8 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 800149c:	fb02 f203 	mul.w	r2, r2, r3
 80014a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80014a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014ac:	461a      	mov	r2, r3
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d108      	bne.n	80014c6 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 80014b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ba:	e004      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_RCC_GetSysClockFreq+0x1c4>)
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80014c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3744      	adds	r7, #68	; 0x44
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014de:	bf00      	nop
 80014e0:	08002344 	.word	0x08002344
 80014e4:	08002354 	.word	0x08002354
 80014e8:	40021000 	.word	0x40021000
 80014ec:	007a1200 	.word	0x007a1200
 80014f0:	003d0900 	.word	0x003d0900

080014f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <RCC_Delay+0x34>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <RCC_Delay+0x38>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a5b      	lsrs	r3, r3, #9
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001510:	bf00      	nop
  }
  while (Delay --);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	60fa      	str	r2, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f9      	bne.n	8001510 <RCC_Delay+0x1c>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000
 800152c:	10624dd3 	.word	0x10624dd3

08001530 <__errno>:
 8001530:	4b01      	ldr	r3, [pc, #4]	; (8001538 <__errno+0x8>)
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000000c 	.word	0x2000000c

0800153c <memset>:
 800153c:	4603      	mov	r3, r0
 800153e:	4402      	add	r2, r0
 8001540:	4293      	cmp	r3, r2
 8001542:	d100      	bne.n	8001546 <memset+0xa>
 8001544:	4770      	bx	lr
 8001546:	f803 1b01 	strb.w	r1, [r3], #1
 800154a:	e7f9      	b.n	8001540 <memset+0x4>

0800154c <iprintf>:
 800154c:	b40f      	push	{r0, r1, r2, r3}
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <iprintf+0x2c>)
 8001550:	b513      	push	{r0, r1, r4, lr}
 8001552:	681c      	ldr	r4, [r3, #0]
 8001554:	b124      	cbz	r4, 8001560 <iprintf+0x14>
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	b913      	cbnz	r3, 8001560 <iprintf+0x14>
 800155a:	4620      	mov	r0, r4
 800155c:	f000 f84e 	bl	80015fc <__sinit>
 8001560:	ab05      	add	r3, sp, #20
 8001562:	9a04      	ldr	r2, [sp, #16]
 8001564:	68a1      	ldr	r1, [r4, #8]
 8001566:	4620      	mov	r0, r4
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f000 f953 	bl	8001814 <_vfiprintf_r>
 800156e:	b002      	add	sp, #8
 8001570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001574:	b004      	add	sp, #16
 8001576:	4770      	bx	lr
 8001578:	2000000c 	.word	0x2000000c

0800157c <std>:
 800157c:	2300      	movs	r3, #0
 800157e:	b510      	push	{r4, lr}
 8001580:	4604      	mov	r4, r0
 8001582:	e9c0 3300 	strd	r3, r3, [r0]
 8001586:	6083      	str	r3, [r0, #8]
 8001588:	8181      	strh	r1, [r0, #12]
 800158a:	6643      	str	r3, [r0, #100]	; 0x64
 800158c:	81c2      	strh	r2, [r0, #14]
 800158e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001592:	6183      	str	r3, [r0, #24]
 8001594:	4619      	mov	r1, r3
 8001596:	2208      	movs	r2, #8
 8001598:	305c      	adds	r0, #92	; 0x5c
 800159a:	f7ff ffcf 	bl	800153c <memset>
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <std+0x38>)
 80015a0:	6224      	str	r4, [r4, #32]
 80015a2:	6263      	str	r3, [r4, #36]	; 0x24
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <std+0x3c>)
 80015a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <std+0x40>)
 80015aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <std+0x44>)
 80015ae:	6323      	str	r3, [r4, #48]	; 0x30
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	bf00      	nop
 80015b4:	08001d71 	.word	0x08001d71
 80015b8:	08001d93 	.word	0x08001d93
 80015bc:	08001dcb 	.word	0x08001dcb
 80015c0:	08001def 	.word	0x08001def

080015c4 <_cleanup_r>:
 80015c4:	4901      	ldr	r1, [pc, #4]	; (80015cc <_cleanup_r+0x8>)
 80015c6:	f000 b885 	b.w	80016d4 <_fwalk_reent>
 80015ca:	bf00      	nop
 80015cc:	080020c9 	.word	0x080020c9

080015d0 <__sfmoreglue>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2568      	movs	r5, #104	; 0x68
 80015d4:	1e4a      	subs	r2, r1, #1
 80015d6:	4355      	muls	r5, r2
 80015d8:	460e      	mov	r6, r1
 80015da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015de:	f000 f897 	bl	8001710 <_malloc_r>
 80015e2:	4604      	mov	r4, r0
 80015e4:	b140      	cbz	r0, 80015f8 <__sfmoreglue+0x28>
 80015e6:	2100      	movs	r1, #0
 80015e8:	e9c0 1600 	strd	r1, r6, [r0]
 80015ec:	300c      	adds	r0, #12
 80015ee:	60a0      	str	r0, [r4, #8]
 80015f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015f4:	f7ff ffa2 	bl	800153c <memset>
 80015f8:	4620      	mov	r0, r4
 80015fa:	bd70      	pop	{r4, r5, r6, pc}

080015fc <__sinit>:
 80015fc:	6983      	ldr	r3, [r0, #24]
 80015fe:	b510      	push	{r4, lr}
 8001600:	4604      	mov	r4, r0
 8001602:	bb33      	cbnz	r3, 8001652 <__sinit+0x56>
 8001604:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001608:	6503      	str	r3, [r0, #80]	; 0x50
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <__sinit+0x58>)
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <__sinit+0x5c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6282      	str	r2, [r0, #40]	; 0x28
 8001612:	4298      	cmp	r0, r3
 8001614:	bf04      	itt	eq
 8001616:	2301      	moveq	r3, #1
 8001618:	6183      	streq	r3, [r0, #24]
 800161a:	f000 f81f 	bl	800165c <__sfp>
 800161e:	6060      	str	r0, [r4, #4]
 8001620:	4620      	mov	r0, r4
 8001622:	f000 f81b 	bl	800165c <__sfp>
 8001626:	60a0      	str	r0, [r4, #8]
 8001628:	4620      	mov	r0, r4
 800162a:	f000 f817 	bl	800165c <__sfp>
 800162e:	2200      	movs	r2, #0
 8001630:	60e0      	str	r0, [r4, #12]
 8001632:	2104      	movs	r1, #4
 8001634:	6860      	ldr	r0, [r4, #4]
 8001636:	f7ff ffa1 	bl	800157c <std>
 800163a:	2201      	movs	r2, #1
 800163c:	2109      	movs	r1, #9
 800163e:	68a0      	ldr	r0, [r4, #8]
 8001640:	f7ff ff9c 	bl	800157c <std>
 8001644:	2202      	movs	r2, #2
 8001646:	2112      	movs	r1, #18
 8001648:	68e0      	ldr	r0, [r4, #12]
 800164a:	f7ff ff97 	bl	800157c <std>
 800164e:	2301      	movs	r3, #1
 8001650:	61a3      	str	r3, [r4, #24]
 8001652:	bd10      	pop	{r4, pc}
 8001654:	08002374 	.word	0x08002374
 8001658:	080015c5 	.word	0x080015c5

0800165c <__sfp>:
 800165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <__sfp+0x70>)
 8001660:	4607      	mov	r7, r0
 8001662:	681e      	ldr	r6, [r3, #0]
 8001664:	69b3      	ldr	r3, [r6, #24]
 8001666:	b913      	cbnz	r3, 800166e <__sfp+0x12>
 8001668:	4630      	mov	r0, r6
 800166a:	f7ff ffc7 	bl	80015fc <__sinit>
 800166e:	3648      	adds	r6, #72	; 0x48
 8001670:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001674:	3b01      	subs	r3, #1
 8001676:	d503      	bpl.n	8001680 <__sfp+0x24>
 8001678:	6833      	ldr	r3, [r6, #0]
 800167a:	b133      	cbz	r3, 800168a <__sfp+0x2e>
 800167c:	6836      	ldr	r6, [r6, #0]
 800167e:	e7f7      	b.n	8001670 <__sfp+0x14>
 8001680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001684:	b16d      	cbz	r5, 80016a2 <__sfp+0x46>
 8001686:	3468      	adds	r4, #104	; 0x68
 8001688:	e7f4      	b.n	8001674 <__sfp+0x18>
 800168a:	2104      	movs	r1, #4
 800168c:	4638      	mov	r0, r7
 800168e:	f7ff ff9f 	bl	80015d0 <__sfmoreglue>
 8001692:	6030      	str	r0, [r6, #0]
 8001694:	2800      	cmp	r0, #0
 8001696:	d1f1      	bne.n	800167c <__sfp+0x20>
 8001698:	230c      	movs	r3, #12
 800169a:	4604      	mov	r4, r0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4620      	mov	r0, r4
 80016a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <__sfp+0x74>)
 80016a4:	6665      	str	r5, [r4, #100]	; 0x64
 80016a6:	e9c4 5500 	strd	r5, r5, [r4]
 80016aa:	60a5      	str	r5, [r4, #8]
 80016ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80016b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80016b4:	2208      	movs	r2, #8
 80016b6:	4629      	mov	r1, r5
 80016b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80016bc:	f7ff ff3e 	bl	800153c <memset>
 80016c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80016c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80016c8:	e7e9      	b.n	800169e <__sfp+0x42>
 80016ca:	bf00      	nop
 80016cc:	08002374 	.word	0x08002374
 80016d0:	ffff0001 	.word	0xffff0001

080016d4 <_fwalk_reent>:
 80016d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016d8:	4680      	mov	r8, r0
 80016da:	4689      	mov	r9, r1
 80016dc:	2600      	movs	r6, #0
 80016de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016e2:	b914      	cbnz	r4, 80016ea <_fwalk_reent+0x16>
 80016e4:	4630      	mov	r0, r6
 80016e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80016ee:	3f01      	subs	r7, #1
 80016f0:	d501      	bpl.n	80016f6 <_fwalk_reent+0x22>
 80016f2:	6824      	ldr	r4, [r4, #0]
 80016f4:	e7f5      	b.n	80016e2 <_fwalk_reent+0xe>
 80016f6:	89ab      	ldrh	r3, [r5, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d907      	bls.n	800170c <_fwalk_reent+0x38>
 80016fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001700:	3301      	adds	r3, #1
 8001702:	d003      	beq.n	800170c <_fwalk_reent+0x38>
 8001704:	4629      	mov	r1, r5
 8001706:	4640      	mov	r0, r8
 8001708:	47c8      	blx	r9
 800170a:	4306      	orrs	r6, r0
 800170c:	3568      	adds	r5, #104	; 0x68
 800170e:	e7ee      	b.n	80016ee <_fwalk_reent+0x1a>

08001710 <_malloc_r>:
 8001710:	b570      	push	{r4, r5, r6, lr}
 8001712:	1ccd      	adds	r5, r1, #3
 8001714:	f025 0503 	bic.w	r5, r5, #3
 8001718:	3508      	adds	r5, #8
 800171a:	2d0c      	cmp	r5, #12
 800171c:	bf38      	it	cc
 800171e:	250c      	movcc	r5, #12
 8001720:	2d00      	cmp	r5, #0
 8001722:	4606      	mov	r6, r0
 8001724:	db01      	blt.n	800172a <_malloc_r+0x1a>
 8001726:	42a9      	cmp	r1, r5
 8001728:	d903      	bls.n	8001732 <_malloc_r+0x22>
 800172a:	230c      	movs	r3, #12
 800172c:	6033      	str	r3, [r6, #0]
 800172e:	2000      	movs	r0, #0
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	f000 fd77 	bl	8002224 <__malloc_lock>
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <_malloc_r+0xac>)
 8001738:	6814      	ldr	r4, [r2, #0]
 800173a:	4621      	mov	r1, r4
 800173c:	b991      	cbnz	r1, 8001764 <_malloc_r+0x54>
 800173e:	4c20      	ldr	r4, [pc, #128]	; (80017c0 <_malloc_r+0xb0>)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	b91b      	cbnz	r3, 800174c <_malloc_r+0x3c>
 8001744:	4630      	mov	r0, r6
 8001746:	f000 fb03 	bl	8001d50 <_sbrk_r>
 800174a:	6020      	str	r0, [r4, #0]
 800174c:	4629      	mov	r1, r5
 800174e:	4630      	mov	r0, r6
 8001750:	f000 fafe 	bl	8001d50 <_sbrk_r>
 8001754:	1c43      	adds	r3, r0, #1
 8001756:	d124      	bne.n	80017a2 <_malloc_r+0x92>
 8001758:	230c      	movs	r3, #12
 800175a:	4630      	mov	r0, r6
 800175c:	6033      	str	r3, [r6, #0]
 800175e:	f000 fd62 	bl	8002226 <__malloc_unlock>
 8001762:	e7e4      	b.n	800172e <_malloc_r+0x1e>
 8001764:	680b      	ldr	r3, [r1, #0]
 8001766:	1b5b      	subs	r3, r3, r5
 8001768:	d418      	bmi.n	800179c <_malloc_r+0x8c>
 800176a:	2b0b      	cmp	r3, #11
 800176c:	d90f      	bls.n	800178e <_malloc_r+0x7e>
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	18cc      	adds	r4, r1, r3
 8001772:	50cd      	str	r5, [r1, r3]
 8001774:	4630      	mov	r0, r6
 8001776:	f000 fd56 	bl	8002226 <__malloc_unlock>
 800177a:	f104 000b 	add.w	r0, r4, #11
 800177e:	1d23      	adds	r3, r4, #4
 8001780:	f020 0007 	bic.w	r0, r0, #7
 8001784:	1ac3      	subs	r3, r0, r3
 8001786:	d0d3      	beq.n	8001730 <_malloc_r+0x20>
 8001788:	425a      	negs	r2, r3
 800178a:	50e2      	str	r2, [r4, r3]
 800178c:	e7d0      	b.n	8001730 <_malloc_r+0x20>
 800178e:	684b      	ldr	r3, [r1, #4]
 8001790:	428c      	cmp	r4, r1
 8001792:	bf16      	itet	ne
 8001794:	6063      	strne	r3, [r4, #4]
 8001796:	6013      	streq	r3, [r2, #0]
 8001798:	460c      	movne	r4, r1
 800179a:	e7eb      	b.n	8001774 <_malloc_r+0x64>
 800179c:	460c      	mov	r4, r1
 800179e:	6849      	ldr	r1, [r1, #4]
 80017a0:	e7cc      	b.n	800173c <_malloc_r+0x2c>
 80017a2:	1cc4      	adds	r4, r0, #3
 80017a4:	f024 0403 	bic.w	r4, r4, #3
 80017a8:	42a0      	cmp	r0, r4
 80017aa:	d005      	beq.n	80017b8 <_malloc_r+0xa8>
 80017ac:	1a21      	subs	r1, r4, r0
 80017ae:	4630      	mov	r0, r6
 80017b0:	f000 face 	bl	8001d50 <_sbrk_r>
 80017b4:	3001      	adds	r0, #1
 80017b6:	d0cf      	beq.n	8001758 <_malloc_r+0x48>
 80017b8:	6025      	str	r5, [r4, #0]
 80017ba:	e7db      	b.n	8001774 <_malloc_r+0x64>
 80017bc:	20000090 	.word	0x20000090
 80017c0:	20000094 	.word	0x20000094

080017c4 <__sfputc_r>:
 80017c4:	6893      	ldr	r3, [r2, #8]
 80017c6:	b410      	push	{r4}
 80017c8:	3b01      	subs	r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	6093      	str	r3, [r2, #8]
 80017ce:	da07      	bge.n	80017e0 <__sfputc_r+0x1c>
 80017d0:	6994      	ldr	r4, [r2, #24]
 80017d2:	42a3      	cmp	r3, r4
 80017d4:	db01      	blt.n	80017da <__sfputc_r+0x16>
 80017d6:	290a      	cmp	r1, #10
 80017d8:	d102      	bne.n	80017e0 <__sfputc_r+0x1c>
 80017da:	bc10      	pop	{r4}
 80017dc:	f000 bb0c 	b.w	8001df8 <__swbuf_r>
 80017e0:	6813      	ldr	r3, [r2, #0]
 80017e2:	1c58      	adds	r0, r3, #1
 80017e4:	6010      	str	r0, [r2, #0]
 80017e6:	7019      	strb	r1, [r3, #0]
 80017e8:	4608      	mov	r0, r1
 80017ea:	bc10      	pop	{r4}
 80017ec:	4770      	bx	lr

080017ee <__sfputs_r>:
 80017ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f0:	4606      	mov	r6, r0
 80017f2:	460f      	mov	r7, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	18d5      	adds	r5, r2, r3
 80017f8:	42ac      	cmp	r4, r5
 80017fa:	d101      	bne.n	8001800 <__sfputs_r+0x12>
 80017fc:	2000      	movs	r0, #0
 80017fe:	e007      	b.n	8001810 <__sfputs_r+0x22>
 8001800:	463a      	mov	r2, r7
 8001802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001806:	4630      	mov	r0, r6
 8001808:	f7ff ffdc 	bl	80017c4 <__sfputc_r>
 800180c:	1c43      	adds	r3, r0, #1
 800180e:	d1f3      	bne.n	80017f8 <__sfputs_r+0xa>
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001814 <_vfiprintf_r>:
 8001814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001818:	460c      	mov	r4, r1
 800181a:	b09d      	sub	sp, #116	; 0x74
 800181c:	4617      	mov	r7, r2
 800181e:	461d      	mov	r5, r3
 8001820:	4606      	mov	r6, r0
 8001822:	b118      	cbz	r0, 800182c <_vfiprintf_r+0x18>
 8001824:	6983      	ldr	r3, [r0, #24]
 8001826:	b90b      	cbnz	r3, 800182c <_vfiprintf_r+0x18>
 8001828:	f7ff fee8 	bl	80015fc <__sinit>
 800182c:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <_vfiprintf_r+0x20c>)
 800182e:	429c      	cmp	r4, r3
 8001830:	d158      	bne.n	80018e4 <_vfiprintf_r+0xd0>
 8001832:	6874      	ldr	r4, [r6, #4]
 8001834:	89a3      	ldrh	r3, [r4, #12]
 8001836:	0718      	lsls	r0, r3, #28
 8001838:	d55e      	bpl.n	80018f8 <_vfiprintf_r+0xe4>
 800183a:	6923      	ldr	r3, [r4, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d05b      	beq.n	80018f8 <_vfiprintf_r+0xe4>
 8001840:	2300      	movs	r3, #0
 8001842:	9309      	str	r3, [sp, #36]	; 0x24
 8001844:	2320      	movs	r3, #32
 8001846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800184a:	2330      	movs	r3, #48	; 0x30
 800184c:	f04f 0b01 	mov.w	fp, #1
 8001850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001854:	9503      	str	r5, [sp, #12]
 8001856:	46b8      	mov	r8, r7
 8001858:	4645      	mov	r5, r8
 800185a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800185e:	b10b      	cbz	r3, 8001864 <_vfiprintf_r+0x50>
 8001860:	2b25      	cmp	r3, #37	; 0x25
 8001862:	d154      	bne.n	800190e <_vfiprintf_r+0xfa>
 8001864:	ebb8 0a07 	subs.w	sl, r8, r7
 8001868:	d00b      	beq.n	8001882 <_vfiprintf_r+0x6e>
 800186a:	4653      	mov	r3, sl
 800186c:	463a      	mov	r2, r7
 800186e:	4621      	mov	r1, r4
 8001870:	4630      	mov	r0, r6
 8001872:	f7ff ffbc 	bl	80017ee <__sfputs_r>
 8001876:	3001      	adds	r0, #1
 8001878:	f000 80c2 	beq.w	8001a00 <_vfiprintf_r+0x1ec>
 800187c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800187e:	4453      	add	r3, sl
 8001880:	9309      	str	r3, [sp, #36]	; 0x24
 8001882:	f898 3000 	ldrb.w	r3, [r8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80ba 	beq.w	8001a00 <_vfiprintf_r+0x1ec>
 800188c:	2300      	movs	r3, #0
 800188e:	f04f 32ff 	mov.w	r2, #4294967295
 8001892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001896:	9304      	str	r3, [sp, #16]
 8001898:	9307      	str	r3, [sp, #28]
 800189a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800189e:	931a      	str	r3, [sp, #104]	; 0x68
 80018a0:	46a8      	mov	r8, r5
 80018a2:	2205      	movs	r2, #5
 80018a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80018a8:	485e      	ldr	r0, [pc, #376]	; (8001a24 <_vfiprintf_r+0x210>)
 80018aa:	f000 fcad 	bl	8002208 <memchr>
 80018ae:	9b04      	ldr	r3, [sp, #16]
 80018b0:	bb78      	cbnz	r0, 8001912 <_vfiprintf_r+0xfe>
 80018b2:	06d9      	lsls	r1, r3, #27
 80018b4:	bf44      	itt	mi
 80018b6:	2220      	movmi	r2, #32
 80018b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018bc:	071a      	lsls	r2, r3, #28
 80018be:	bf44      	itt	mi
 80018c0:	222b      	movmi	r2, #43	; 0x2b
 80018c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018c6:	782a      	ldrb	r2, [r5, #0]
 80018c8:	2a2a      	cmp	r2, #42	; 0x2a
 80018ca:	d02a      	beq.n	8001922 <_vfiprintf_r+0x10e>
 80018cc:	46a8      	mov	r8, r5
 80018ce:	2000      	movs	r0, #0
 80018d0:	250a      	movs	r5, #10
 80018d2:	9a07      	ldr	r2, [sp, #28]
 80018d4:	4641      	mov	r1, r8
 80018d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018da:	3b30      	subs	r3, #48	; 0x30
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d969      	bls.n	80019b4 <_vfiprintf_r+0x1a0>
 80018e0:	b360      	cbz	r0, 800193c <_vfiprintf_r+0x128>
 80018e2:	e024      	b.n	800192e <_vfiprintf_r+0x11a>
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <_vfiprintf_r+0x214>)
 80018e6:	429c      	cmp	r4, r3
 80018e8:	d101      	bne.n	80018ee <_vfiprintf_r+0xda>
 80018ea:	68b4      	ldr	r4, [r6, #8]
 80018ec:	e7a2      	b.n	8001834 <_vfiprintf_r+0x20>
 80018ee:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <_vfiprintf_r+0x218>)
 80018f0:	429c      	cmp	r4, r3
 80018f2:	bf08      	it	eq
 80018f4:	68f4      	ldreq	r4, [r6, #12]
 80018f6:	e79d      	b.n	8001834 <_vfiprintf_r+0x20>
 80018f8:	4621      	mov	r1, r4
 80018fa:	4630      	mov	r0, r6
 80018fc:	f000 fae0 	bl	8001ec0 <__swsetup_r>
 8001900:	2800      	cmp	r0, #0
 8001902:	d09d      	beq.n	8001840 <_vfiprintf_r+0x2c>
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	b01d      	add	sp, #116	; 0x74
 800190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800190e:	46a8      	mov	r8, r5
 8001910:	e7a2      	b.n	8001858 <_vfiprintf_r+0x44>
 8001912:	4a44      	ldr	r2, [pc, #272]	; (8001a24 <_vfiprintf_r+0x210>)
 8001914:	4645      	mov	r5, r8
 8001916:	1a80      	subs	r0, r0, r2
 8001918:	fa0b f000 	lsl.w	r0, fp, r0
 800191c:	4318      	orrs	r0, r3
 800191e:	9004      	str	r0, [sp, #16]
 8001920:	e7be      	b.n	80018a0 <_vfiprintf_r+0x8c>
 8001922:	9a03      	ldr	r2, [sp, #12]
 8001924:	1d11      	adds	r1, r2, #4
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	9103      	str	r1, [sp, #12]
 800192a:	2a00      	cmp	r2, #0
 800192c:	db01      	blt.n	8001932 <_vfiprintf_r+0x11e>
 800192e:	9207      	str	r2, [sp, #28]
 8001930:	e004      	b.n	800193c <_vfiprintf_r+0x128>
 8001932:	4252      	negs	r2, r2
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	9207      	str	r2, [sp, #28]
 800193a:	9304      	str	r3, [sp, #16]
 800193c:	f898 3000 	ldrb.w	r3, [r8]
 8001940:	2b2e      	cmp	r3, #46	; 0x2e
 8001942:	d10e      	bne.n	8001962 <_vfiprintf_r+0x14e>
 8001944:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001948:	2b2a      	cmp	r3, #42	; 0x2a
 800194a:	d138      	bne.n	80019be <_vfiprintf_r+0x1aa>
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	f108 0802 	add.w	r8, r8, #2
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	9203      	str	r2, [sp, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	bfb8      	it	lt
 800195c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001960:	9305      	str	r3, [sp, #20]
 8001962:	4d33      	ldr	r5, [pc, #204]	; (8001a30 <_vfiprintf_r+0x21c>)
 8001964:	2203      	movs	r2, #3
 8001966:	f898 1000 	ldrb.w	r1, [r8]
 800196a:	4628      	mov	r0, r5
 800196c:	f000 fc4c 	bl	8002208 <memchr>
 8001970:	b140      	cbz	r0, 8001984 <_vfiprintf_r+0x170>
 8001972:	2340      	movs	r3, #64	; 0x40
 8001974:	1b40      	subs	r0, r0, r5
 8001976:	fa03 f000 	lsl.w	r0, r3, r0
 800197a:	9b04      	ldr	r3, [sp, #16]
 800197c:	f108 0801 	add.w	r8, r8, #1
 8001980:	4303      	orrs	r3, r0
 8001982:	9304      	str	r3, [sp, #16]
 8001984:	f898 1000 	ldrb.w	r1, [r8]
 8001988:	2206      	movs	r2, #6
 800198a:	482a      	ldr	r0, [pc, #168]	; (8001a34 <_vfiprintf_r+0x220>)
 800198c:	f108 0701 	add.w	r7, r8, #1
 8001990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001994:	f000 fc38 	bl	8002208 <memchr>
 8001998:	2800      	cmp	r0, #0
 800199a:	d037      	beq.n	8001a0c <_vfiprintf_r+0x1f8>
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <_vfiprintf_r+0x224>)
 800199e:	bb1b      	cbnz	r3, 80019e8 <_vfiprintf_r+0x1d4>
 80019a0:	9b03      	ldr	r3, [sp, #12]
 80019a2:	3307      	adds	r3, #7
 80019a4:	f023 0307 	bic.w	r3, r3, #7
 80019a8:	3308      	adds	r3, #8
 80019aa:	9303      	str	r3, [sp, #12]
 80019ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ae:	444b      	add	r3, r9
 80019b0:	9309      	str	r3, [sp, #36]	; 0x24
 80019b2:	e750      	b.n	8001856 <_vfiprintf_r+0x42>
 80019b4:	fb05 3202 	mla	r2, r5, r2, r3
 80019b8:	2001      	movs	r0, #1
 80019ba:	4688      	mov	r8, r1
 80019bc:	e78a      	b.n	80018d4 <_vfiprintf_r+0xc0>
 80019be:	2300      	movs	r3, #0
 80019c0:	250a      	movs	r5, #10
 80019c2:	4619      	mov	r1, r3
 80019c4:	f108 0801 	add.w	r8, r8, #1
 80019c8:	9305      	str	r3, [sp, #20]
 80019ca:	4640      	mov	r0, r8
 80019cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019d0:	3a30      	subs	r2, #48	; 0x30
 80019d2:	2a09      	cmp	r2, #9
 80019d4:	d903      	bls.n	80019de <_vfiprintf_r+0x1ca>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0c3      	beq.n	8001962 <_vfiprintf_r+0x14e>
 80019da:	9105      	str	r1, [sp, #20]
 80019dc:	e7c1      	b.n	8001962 <_vfiprintf_r+0x14e>
 80019de:	fb05 2101 	mla	r1, r5, r1, r2
 80019e2:	2301      	movs	r3, #1
 80019e4:	4680      	mov	r8, r0
 80019e6:	e7f0      	b.n	80019ca <_vfiprintf_r+0x1b6>
 80019e8:	ab03      	add	r3, sp, #12
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4622      	mov	r2, r4
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_vfiprintf_r+0x228>)
 80019f0:	a904      	add	r1, sp, #16
 80019f2:	4630      	mov	r0, r6
 80019f4:	f3af 8000 	nop.w
 80019f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019fc:	4681      	mov	r9, r0
 80019fe:	d1d5      	bne.n	80019ac <_vfiprintf_r+0x198>
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	065b      	lsls	r3, r3, #25
 8001a04:	f53f af7e 	bmi.w	8001904 <_vfiprintf_r+0xf0>
 8001a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a0a:	e77d      	b.n	8001908 <_vfiprintf_r+0xf4>
 8001a0c:	ab03      	add	r3, sp, #12
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4622      	mov	r2, r4
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <_vfiprintf_r+0x228>)
 8001a14:	a904      	add	r1, sp, #16
 8001a16:	4630      	mov	r0, r6
 8001a18:	f000 f888 	bl	8001b2c <_printf_i>
 8001a1c:	e7ec      	b.n	80019f8 <_vfiprintf_r+0x1e4>
 8001a1e:	bf00      	nop
 8001a20:	08002398 	.word	0x08002398
 8001a24:	080023d8 	.word	0x080023d8
 8001a28:	080023b8 	.word	0x080023b8
 8001a2c:	08002378 	.word	0x08002378
 8001a30:	080023de 	.word	0x080023de
 8001a34:	080023e2 	.word	0x080023e2
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	080017ef 	.word	0x080017ef

08001a40 <_printf_common>:
 8001a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a44:	4691      	mov	r9, r2
 8001a46:	461f      	mov	r7, r3
 8001a48:	688a      	ldr	r2, [r1, #8]
 8001a4a:	690b      	ldr	r3, [r1, #16]
 8001a4c:	4606      	mov	r6, r0
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	bfb8      	it	lt
 8001a52:	4613      	movlt	r3, r2
 8001a54:	f8c9 3000 	str.w	r3, [r9]
 8001a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a62:	b112      	cbz	r2, 8001a6a <_printf_common+0x2a>
 8001a64:	3301      	adds	r3, #1
 8001a66:	f8c9 3000 	str.w	r3, [r9]
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	0699      	lsls	r1, r3, #26
 8001a6e:	bf42      	ittt	mi
 8001a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a74:	3302      	addmi	r3, #2
 8001a76:	f8c9 3000 	strmi.w	r3, [r9]
 8001a7a:	6825      	ldr	r5, [r4, #0]
 8001a7c:	f015 0506 	ands.w	r5, r5, #6
 8001a80:	d107      	bne.n	8001a92 <_printf_common+0x52>
 8001a82:	f104 0a19 	add.w	sl, r4, #25
 8001a86:	68e3      	ldr	r3, [r4, #12]
 8001a88:	f8d9 2000 	ldr.w	r2, [r9]
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	42ab      	cmp	r3, r5
 8001a90:	dc29      	bgt.n	8001ae6 <_printf_common+0xa6>
 8001a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	3300      	adds	r3, #0
 8001a9a:	bf18      	it	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	0692      	lsls	r2, r2, #26
 8001aa0:	d42e      	bmi.n	8001b00 <_printf_common+0xc0>
 8001aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001aa6:	4639      	mov	r1, r7
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	47c0      	blx	r8
 8001aac:	3001      	adds	r0, #1
 8001aae:	d021      	beq.n	8001af4 <_printf_common+0xb4>
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	68e5      	ldr	r5, [r4, #12]
 8001ab4:	f003 0306 	and.w	r3, r3, #6
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	bf18      	it	ne
 8001abc:	2500      	movne	r5, #0
 8001abe:	f8d9 2000 	ldr.w	r2, [r9]
 8001ac2:	f04f 0900 	mov.w	r9, #0
 8001ac6:	bf08      	it	eq
 8001ac8:	1aad      	subeq	r5, r5, r2
 8001aca:	68a3      	ldr	r3, [r4, #8]
 8001acc:	6922      	ldr	r2, [r4, #16]
 8001ace:	bf08      	it	eq
 8001ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	bfc4      	itt	gt
 8001ad8:	1a9b      	subgt	r3, r3, r2
 8001ada:	18ed      	addgt	r5, r5, r3
 8001adc:	341a      	adds	r4, #26
 8001ade:	454d      	cmp	r5, r9
 8001ae0:	d11a      	bne.n	8001b18 <_printf_common+0xd8>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e008      	b.n	8001af8 <_printf_common+0xb8>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4652      	mov	r2, sl
 8001aea:	4639      	mov	r1, r7
 8001aec:	4630      	mov	r0, r6
 8001aee:	47c0      	blx	r8
 8001af0:	3001      	adds	r0, #1
 8001af2:	d103      	bne.n	8001afc <_printf_common+0xbc>
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001afc:	3501      	adds	r5, #1
 8001afe:	e7c2      	b.n	8001a86 <_printf_common+0x46>
 8001b00:	2030      	movs	r0, #48	; 0x30
 8001b02:	18e1      	adds	r1, r4, r3
 8001b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b0e:	4422      	add	r2, r4
 8001b10:	3302      	adds	r3, #2
 8001b12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b16:	e7c4      	b.n	8001aa2 <_printf_common+0x62>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	4639      	mov	r1, r7
 8001b1e:	4630      	mov	r0, r6
 8001b20:	47c0      	blx	r8
 8001b22:	3001      	adds	r0, #1
 8001b24:	d0e6      	beq.n	8001af4 <_printf_common+0xb4>
 8001b26:	f109 0901 	add.w	r9, r9, #1
 8001b2a:	e7d8      	b.n	8001ade <_printf_common+0x9e>

08001b2c <_printf_i>:
 8001b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001b34:	460c      	mov	r4, r1
 8001b36:	7e09      	ldrb	r1, [r1, #24]
 8001b38:	b085      	sub	sp, #20
 8001b3a:	296e      	cmp	r1, #110	; 0x6e
 8001b3c:	4617      	mov	r7, r2
 8001b3e:	4606      	mov	r6, r0
 8001b40:	4698      	mov	r8, r3
 8001b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b44:	f000 80b3 	beq.w	8001cae <_printf_i+0x182>
 8001b48:	d822      	bhi.n	8001b90 <_printf_i+0x64>
 8001b4a:	2963      	cmp	r1, #99	; 0x63
 8001b4c:	d036      	beq.n	8001bbc <_printf_i+0x90>
 8001b4e:	d80a      	bhi.n	8001b66 <_printf_i+0x3a>
 8001b50:	2900      	cmp	r1, #0
 8001b52:	f000 80b9 	beq.w	8001cc8 <_printf_i+0x19c>
 8001b56:	2958      	cmp	r1, #88	; 0x58
 8001b58:	f000 8083 	beq.w	8001c62 <_printf_i+0x136>
 8001b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b64:	e032      	b.n	8001bcc <_printf_i+0xa0>
 8001b66:	2964      	cmp	r1, #100	; 0x64
 8001b68:	d001      	beq.n	8001b6e <_printf_i+0x42>
 8001b6a:	2969      	cmp	r1, #105	; 0x69
 8001b6c:	d1f6      	bne.n	8001b5c <_printf_i+0x30>
 8001b6e:	6820      	ldr	r0, [r4, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	0605      	lsls	r5, r0, #24
 8001b74:	f103 0104 	add.w	r1, r3, #4
 8001b78:	d52a      	bpl.n	8001bd0 <_printf_i+0xa4>
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6011      	str	r1, [r2, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da03      	bge.n	8001b8a <_printf_i+0x5e>
 8001b82:	222d      	movs	r2, #45	; 0x2d
 8001b84:	425b      	negs	r3, r3
 8001b86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b8a:	486f      	ldr	r0, [pc, #444]	; (8001d48 <_printf_i+0x21c>)
 8001b8c:	220a      	movs	r2, #10
 8001b8e:	e039      	b.n	8001c04 <_printf_i+0xd8>
 8001b90:	2973      	cmp	r1, #115	; 0x73
 8001b92:	f000 809d 	beq.w	8001cd0 <_printf_i+0x1a4>
 8001b96:	d808      	bhi.n	8001baa <_printf_i+0x7e>
 8001b98:	296f      	cmp	r1, #111	; 0x6f
 8001b9a:	d020      	beq.n	8001bde <_printf_i+0xb2>
 8001b9c:	2970      	cmp	r1, #112	; 0x70
 8001b9e:	d1dd      	bne.n	8001b5c <_printf_i+0x30>
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	f043 0320 	orr.w	r3, r3, #32
 8001ba6:	6023      	str	r3, [r4, #0]
 8001ba8:	e003      	b.n	8001bb2 <_printf_i+0x86>
 8001baa:	2975      	cmp	r1, #117	; 0x75
 8001bac:	d017      	beq.n	8001bde <_printf_i+0xb2>
 8001bae:	2978      	cmp	r1, #120	; 0x78
 8001bb0:	d1d4      	bne.n	8001b5c <_printf_i+0x30>
 8001bb2:	2378      	movs	r3, #120	; 0x78
 8001bb4:	4865      	ldr	r0, [pc, #404]	; (8001d4c <_printf_i+0x220>)
 8001bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bba:	e055      	b.n	8001c68 <_printf_i+0x13c>
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bc2:	1d19      	adds	r1, r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6011      	str	r1, [r2, #0]
 8001bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e08c      	b.n	8001cea <_printf_i+0x1be>
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001bd6:	6011      	str	r1, [r2, #0]
 8001bd8:	bf18      	it	ne
 8001bda:	b21b      	sxthne	r3, r3
 8001bdc:	e7cf      	b.n	8001b7e <_printf_i+0x52>
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	6825      	ldr	r5, [r4, #0]
 8001be2:	1d18      	adds	r0, r3, #4
 8001be4:	6010      	str	r0, [r2, #0]
 8001be6:	0628      	lsls	r0, r5, #24
 8001be8:	d501      	bpl.n	8001bee <_printf_i+0xc2>
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e002      	b.n	8001bf4 <_printf_i+0xc8>
 8001bee:	0668      	lsls	r0, r5, #25
 8001bf0:	d5fb      	bpl.n	8001bea <_printf_i+0xbe>
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	296f      	cmp	r1, #111	; 0x6f
 8001bf6:	bf14      	ite	ne
 8001bf8:	220a      	movne	r2, #10
 8001bfa:	2208      	moveq	r2, #8
 8001bfc:	4852      	ldr	r0, [pc, #328]	; (8001d48 <_printf_i+0x21c>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c04:	6865      	ldr	r5, [r4, #4]
 8001c06:	2d00      	cmp	r5, #0
 8001c08:	60a5      	str	r5, [r4, #8]
 8001c0a:	f2c0 8095 	blt.w	8001d38 <_printf_i+0x20c>
 8001c0e:	6821      	ldr	r1, [r4, #0]
 8001c10:	f021 0104 	bic.w	r1, r1, #4
 8001c14:	6021      	str	r1, [r4, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d13d      	bne.n	8001c96 <_printf_i+0x16a>
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	f040 808e 	bne.w	8001d3c <_printf_i+0x210>
 8001c20:	4665      	mov	r5, ip
 8001c22:	2a08      	cmp	r2, #8
 8001c24:	d10b      	bne.n	8001c3e <_printf_i+0x112>
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	07db      	lsls	r3, r3, #31
 8001c2a:	d508      	bpl.n	8001c3e <_printf_i+0x112>
 8001c2c:	6923      	ldr	r3, [r4, #16]
 8001c2e:	6862      	ldr	r2, [r4, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	bfde      	ittt	le
 8001c34:	2330      	movle	r3, #48	; 0x30
 8001c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c3e:	ebac 0305 	sub.w	r3, ip, r5
 8001c42:	6123      	str	r3, [r4, #16]
 8001c44:	f8cd 8000 	str.w	r8, [sp]
 8001c48:	463b      	mov	r3, r7
 8001c4a:	aa03      	add	r2, sp, #12
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fef6 	bl	8001a40 <_printf_common>
 8001c54:	3001      	adds	r0, #1
 8001c56:	d14d      	bne.n	8001cf4 <_printf_i+0x1c8>
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	b005      	add	sp, #20
 8001c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c62:	4839      	ldr	r0, [pc, #228]	; (8001d48 <_printf_i+0x21c>)
 8001c64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001c68:	6813      	ldr	r3, [r2, #0]
 8001c6a:	6821      	ldr	r1, [r4, #0]
 8001c6c:	1d1d      	adds	r5, r3, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6015      	str	r5, [r2, #0]
 8001c72:	060a      	lsls	r2, r1, #24
 8001c74:	d50b      	bpl.n	8001c8e <_printf_i+0x162>
 8001c76:	07ca      	lsls	r2, r1, #31
 8001c78:	bf44      	itt	mi
 8001c7a:	f041 0120 	orrmi.w	r1, r1, #32
 8001c7e:	6021      	strmi	r1, [r4, #0]
 8001c80:	b91b      	cbnz	r3, 8001c8a <_printf_i+0x15e>
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	f022 0220 	bic.w	r2, r2, #32
 8001c88:	6022      	str	r2, [r4, #0]
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	e7b7      	b.n	8001bfe <_printf_i+0xd2>
 8001c8e:	064d      	lsls	r5, r1, #25
 8001c90:	bf48      	it	mi
 8001c92:	b29b      	uxthmi	r3, r3
 8001c94:	e7ef      	b.n	8001c76 <_printf_i+0x14a>
 8001c96:	4665      	mov	r5, ip
 8001c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c9c:	fb02 3311 	mls	r3, r2, r1, r3
 8001ca0:	5cc3      	ldrb	r3, [r0, r3]
 8001ca2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	d1f5      	bne.n	8001c98 <_printf_i+0x16c>
 8001cac:	e7b9      	b.n	8001c22 <_printf_i+0xf6>
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	6825      	ldr	r5, [r4, #0]
 8001cb2:	1d18      	adds	r0, r3, #4
 8001cb4:	6961      	ldr	r1, [r4, #20]
 8001cb6:	6010      	str	r0, [r2, #0]
 8001cb8:	0628      	lsls	r0, r5, #24
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	d501      	bpl.n	8001cc2 <_printf_i+0x196>
 8001cbe:	6019      	str	r1, [r3, #0]
 8001cc0:	e002      	b.n	8001cc8 <_printf_i+0x19c>
 8001cc2:	066a      	lsls	r2, r5, #25
 8001cc4:	d5fb      	bpl.n	8001cbe <_printf_i+0x192>
 8001cc6:	8019      	strh	r1, [r3, #0]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	4665      	mov	r5, ip
 8001ccc:	6123      	str	r3, [r4, #16]
 8001cce:	e7b9      	b.n	8001c44 <_printf_i+0x118>
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	1d19      	adds	r1, r3, #4
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	681d      	ldr	r5, [r3, #0]
 8001cd8:	6862      	ldr	r2, [r4, #4]
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f000 fa93 	bl	8002208 <memchr>
 8001ce2:	b108      	cbz	r0, 8001ce8 <_printf_i+0x1bc>
 8001ce4:	1b40      	subs	r0, r0, r5
 8001ce6:	6060      	str	r0, [r4, #4]
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	6123      	str	r3, [r4, #16]
 8001cec:	2300      	movs	r3, #0
 8001cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cf2:	e7a7      	b.n	8001c44 <_printf_i+0x118>
 8001cf4:	6923      	ldr	r3, [r4, #16]
 8001cf6:	462a      	mov	r2, r5
 8001cf8:	4639      	mov	r1, r7
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	47c0      	blx	r8
 8001cfe:	3001      	adds	r0, #1
 8001d00:	d0aa      	beq.n	8001c58 <_printf_i+0x12c>
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	079b      	lsls	r3, r3, #30
 8001d06:	d413      	bmi.n	8001d30 <_printf_i+0x204>
 8001d08:	68e0      	ldr	r0, [r4, #12]
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	4298      	cmp	r0, r3
 8001d0e:	bfb8      	it	lt
 8001d10:	4618      	movlt	r0, r3
 8001d12:	e7a3      	b.n	8001c5c <_printf_i+0x130>
 8001d14:	2301      	movs	r3, #1
 8001d16:	464a      	mov	r2, r9
 8001d18:	4639      	mov	r1, r7
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	47c0      	blx	r8
 8001d1e:	3001      	adds	r0, #1
 8001d20:	d09a      	beq.n	8001c58 <_printf_i+0x12c>
 8001d22:	3501      	adds	r5, #1
 8001d24:	68e3      	ldr	r3, [r4, #12]
 8001d26:	9a03      	ldr	r2, [sp, #12]
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	42ab      	cmp	r3, r5
 8001d2c:	dcf2      	bgt.n	8001d14 <_printf_i+0x1e8>
 8001d2e:	e7eb      	b.n	8001d08 <_printf_i+0x1dc>
 8001d30:	2500      	movs	r5, #0
 8001d32:	f104 0919 	add.w	r9, r4, #25
 8001d36:	e7f5      	b.n	8001d24 <_printf_i+0x1f8>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ac      	bne.n	8001c96 <_printf_i+0x16a>
 8001d3c:	7803      	ldrb	r3, [r0, #0]
 8001d3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d46:	e76c      	b.n	8001c22 <_printf_i+0xf6>
 8001d48:	080023e9 	.word	0x080023e9
 8001d4c:	080023fa 	.word	0x080023fa

08001d50 <_sbrk_r>:
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	2300      	movs	r3, #0
 8001d54:	4c05      	ldr	r4, [pc, #20]	; (8001d6c <_sbrk_r+0x1c>)
 8001d56:	4605      	mov	r5, r0
 8001d58:	4608      	mov	r0, r1
 8001d5a:	6023      	str	r3, [r4, #0]
 8001d5c:	f7fe fd12 	bl	8000784 <_sbrk>
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	d102      	bne.n	8001d6a <_sbrk_r+0x1a>
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	b103      	cbz	r3, 8001d6a <_sbrk_r+0x1a>
 8001d68:	602b      	str	r3, [r5, #0]
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}
 8001d6c:	2000009c 	.word	0x2000009c

08001d70 <__sread>:
 8001d70:	b510      	push	{r4, lr}
 8001d72:	460c      	mov	r4, r1
 8001d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d78:	f000 faa2 	bl	80022c0 <_read_r>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	bfab      	itete	ge
 8001d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d82:	89a3      	ldrhlt	r3, [r4, #12]
 8001d84:	181b      	addge	r3, r3, r0
 8001d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d8a:	bfac      	ite	ge
 8001d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d8e:	81a3      	strhlt	r3, [r4, #12]
 8001d90:	bd10      	pop	{r4, pc}

08001d92 <__swrite>:
 8001d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d96:	461f      	mov	r7, r3
 8001d98:	898b      	ldrh	r3, [r1, #12]
 8001d9a:	4605      	mov	r5, r0
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	460c      	mov	r4, r1
 8001da0:	4616      	mov	r6, r2
 8001da2:	d505      	bpl.n	8001db0 <__swrite+0x1e>
 8001da4:	2302      	movs	r3, #2
 8001da6:	2200      	movs	r2, #0
 8001da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dac:	f000 f9b6 	bl	800211c <_lseek_r>
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	4632      	mov	r2, r6
 8001db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001db8:	81a3      	strh	r3, [r4, #12]
 8001dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc6:	f000 b869 	b.w	8001e9c <_write_r>

08001dca <__sseek>:
 8001dca:	b510      	push	{r4, lr}
 8001dcc:	460c      	mov	r4, r1
 8001dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd2:	f000 f9a3 	bl	800211c <_lseek_r>
 8001dd6:	1c43      	adds	r3, r0, #1
 8001dd8:	89a3      	ldrh	r3, [r4, #12]
 8001dda:	bf15      	itete	ne
 8001ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001de6:	81a3      	strheq	r3, [r4, #12]
 8001de8:	bf18      	it	ne
 8001dea:	81a3      	strhne	r3, [r4, #12]
 8001dec:	bd10      	pop	{r4, pc}

08001dee <__sclose>:
 8001dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df2:	f000 b8d3 	b.w	8001f9c <_close_r>
	...

08001df8 <__swbuf_r>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	460e      	mov	r6, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	4605      	mov	r5, r0
 8001e00:	b118      	cbz	r0, 8001e0a <__swbuf_r+0x12>
 8001e02:	6983      	ldr	r3, [r0, #24]
 8001e04:	b90b      	cbnz	r3, 8001e0a <__swbuf_r+0x12>
 8001e06:	f7ff fbf9 	bl	80015fc <__sinit>
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <__swbuf_r+0x98>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d12a      	bne.n	8001e66 <__swbuf_r+0x6e>
 8001e10:	686c      	ldr	r4, [r5, #4]
 8001e12:	69a3      	ldr	r3, [r4, #24]
 8001e14:	60a3      	str	r3, [r4, #8]
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	071a      	lsls	r2, r3, #28
 8001e1a:	d52e      	bpl.n	8001e7a <__swbuf_r+0x82>
 8001e1c:	6923      	ldr	r3, [r4, #16]
 8001e1e:	b363      	cbz	r3, 8001e7a <__swbuf_r+0x82>
 8001e20:	6923      	ldr	r3, [r4, #16]
 8001e22:	6820      	ldr	r0, [r4, #0]
 8001e24:	b2f6      	uxtb	r6, r6
 8001e26:	1ac0      	subs	r0, r0, r3
 8001e28:	6963      	ldr	r3, [r4, #20]
 8001e2a:	4637      	mov	r7, r6
 8001e2c:	4283      	cmp	r3, r0
 8001e2e:	dc04      	bgt.n	8001e3a <__swbuf_r+0x42>
 8001e30:	4621      	mov	r1, r4
 8001e32:	4628      	mov	r0, r5
 8001e34:	f000 f948 	bl	80020c8 <_fflush_r>
 8001e38:	bb28      	cbnz	r0, 8001e86 <__swbuf_r+0x8e>
 8001e3a:	68a3      	ldr	r3, [r4, #8]
 8001e3c:	3001      	adds	r0, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	60a3      	str	r3, [r4, #8]
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	6022      	str	r2, [r4, #0]
 8001e48:	701e      	strb	r6, [r3, #0]
 8001e4a:	6963      	ldr	r3, [r4, #20]
 8001e4c:	4283      	cmp	r3, r0
 8001e4e:	d004      	beq.n	8001e5a <__swbuf_r+0x62>
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	07db      	lsls	r3, r3, #31
 8001e54:	d519      	bpl.n	8001e8a <__swbuf_r+0x92>
 8001e56:	2e0a      	cmp	r6, #10
 8001e58:	d117      	bne.n	8001e8a <__swbuf_r+0x92>
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f000 f933 	bl	80020c8 <_fflush_r>
 8001e62:	b190      	cbz	r0, 8001e8a <__swbuf_r+0x92>
 8001e64:	e00f      	b.n	8001e86 <__swbuf_r+0x8e>
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <__swbuf_r+0x9c>)
 8001e68:	429c      	cmp	r4, r3
 8001e6a:	d101      	bne.n	8001e70 <__swbuf_r+0x78>
 8001e6c:	68ac      	ldr	r4, [r5, #8]
 8001e6e:	e7d0      	b.n	8001e12 <__swbuf_r+0x1a>
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <__swbuf_r+0xa0>)
 8001e72:	429c      	cmp	r4, r3
 8001e74:	bf08      	it	eq
 8001e76:	68ec      	ldreq	r4, [r5, #12]
 8001e78:	e7cb      	b.n	8001e12 <__swbuf_r+0x1a>
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f000 f81f 	bl	8001ec0 <__swsetup_r>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d0cc      	beq.n	8001e20 <__swbuf_r+0x28>
 8001e86:	f04f 37ff 	mov.w	r7, #4294967295
 8001e8a:	4638      	mov	r0, r7
 8001e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	08002398 	.word	0x08002398
 8001e94:	080023b8 	.word	0x080023b8
 8001e98:	08002378 	.word	0x08002378

08001e9c <_write_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4c05      	ldr	r4, [pc, #20]	; (8001ebc <_write_r+0x20>)
 8001ea8:	6022      	str	r2, [r4, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f7fe fc1d 	bl	80006ea <_write>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	d102      	bne.n	8001eba <_write_r+0x1e>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	b103      	cbz	r3, 8001eba <_write_r+0x1e>
 8001eb8:	602b      	str	r3, [r5, #0]
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	2000009c 	.word	0x2000009c

08001ec0 <__swsetup_r>:
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <__swsetup_r+0xcc>)
 8001ec2:	b570      	push	{r4, r5, r6, lr}
 8001ec4:	681d      	ldr	r5, [r3, #0]
 8001ec6:	4606      	mov	r6, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	b125      	cbz	r5, 8001ed6 <__swsetup_r+0x16>
 8001ecc:	69ab      	ldr	r3, [r5, #24]
 8001ece:	b913      	cbnz	r3, 8001ed6 <__swsetup_r+0x16>
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	f7ff fb93 	bl	80015fc <__sinit>
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <__swsetup_r+0xd0>)
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	d10f      	bne.n	8001efc <__swsetup_r+0x3c>
 8001edc:	686c      	ldr	r4, [r5, #4]
 8001ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	0715      	lsls	r5, r2, #28
 8001ee6:	d42c      	bmi.n	8001f42 <__swsetup_r+0x82>
 8001ee8:	06d0      	lsls	r0, r2, #27
 8001eea:	d411      	bmi.n	8001f10 <__swsetup_r+0x50>
 8001eec:	2209      	movs	r2, #9
 8001eee:	6032      	str	r2, [r6, #0]
 8001ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef4:	81a3      	strh	r3, [r4, #12]
 8001ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8001efa:	e03e      	b.n	8001f7a <__swsetup_r+0xba>
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <__swsetup_r+0xd4>)
 8001efe:	429c      	cmp	r4, r3
 8001f00:	d101      	bne.n	8001f06 <__swsetup_r+0x46>
 8001f02:	68ac      	ldr	r4, [r5, #8]
 8001f04:	e7eb      	b.n	8001ede <__swsetup_r+0x1e>
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <__swsetup_r+0xd8>)
 8001f08:	429c      	cmp	r4, r3
 8001f0a:	bf08      	it	eq
 8001f0c:	68ec      	ldreq	r4, [r5, #12]
 8001f0e:	e7e6      	b.n	8001ede <__swsetup_r+0x1e>
 8001f10:	0751      	lsls	r1, r2, #29
 8001f12:	d512      	bpl.n	8001f3a <__swsetup_r+0x7a>
 8001f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f16:	b141      	cbz	r1, 8001f2a <__swsetup_r+0x6a>
 8001f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f1c:	4299      	cmp	r1, r3
 8001f1e:	d002      	beq.n	8001f26 <__swsetup_r+0x66>
 8001f20:	4630      	mov	r0, r6
 8001f22:	f000 f981 	bl	8002228 <_free_r>
 8001f26:	2300      	movs	r3, #0
 8001f28:	6363      	str	r3, [r4, #52]	; 0x34
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f30:	81a3      	strh	r3, [r4, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	6063      	str	r3, [r4, #4]
 8001f36:	6923      	ldr	r3, [r4, #16]
 8001f38:	6023      	str	r3, [r4, #0]
 8001f3a:	89a3      	ldrh	r3, [r4, #12]
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	81a3      	strh	r3, [r4, #12]
 8001f42:	6923      	ldr	r3, [r4, #16]
 8001f44:	b94b      	cbnz	r3, 8001f5a <__swsetup_r+0x9a>
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f50:	d003      	beq.n	8001f5a <__swsetup_r+0x9a>
 8001f52:	4621      	mov	r1, r4
 8001f54:	4630      	mov	r0, r6
 8001f56:	f000 f917 	bl	8002188 <__smakebuf_r>
 8001f5a:	89a2      	ldrh	r2, [r4, #12]
 8001f5c:	f012 0301 	ands.w	r3, r2, #1
 8001f60:	d00c      	beq.n	8001f7c <__swsetup_r+0xbc>
 8001f62:	2300      	movs	r3, #0
 8001f64:	60a3      	str	r3, [r4, #8]
 8001f66:	6963      	ldr	r3, [r4, #20]
 8001f68:	425b      	negs	r3, r3
 8001f6a:	61a3      	str	r3, [r4, #24]
 8001f6c:	6923      	ldr	r3, [r4, #16]
 8001f6e:	b953      	cbnz	r3, 8001f86 <__swsetup_r+0xc6>
 8001f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001f78:	d1ba      	bne.n	8001ef0 <__swsetup_r+0x30>
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	0792      	lsls	r2, r2, #30
 8001f7e:	bf58      	it	pl
 8001f80:	6963      	ldrpl	r3, [r4, #20]
 8001f82:	60a3      	str	r3, [r4, #8]
 8001f84:	e7f2      	b.n	8001f6c <__swsetup_r+0xac>
 8001f86:	2000      	movs	r0, #0
 8001f88:	e7f7      	b.n	8001f7a <__swsetup_r+0xba>
 8001f8a:	bf00      	nop
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	08002398 	.word	0x08002398
 8001f94:	080023b8 	.word	0x080023b8
 8001f98:	08002378 	.word	0x08002378

08001f9c <_close_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	4c05      	ldr	r4, [pc, #20]	; (8001fb8 <_close_r+0x1c>)
 8001fa2:	4605      	mov	r5, r0
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	6023      	str	r3, [r4, #0]
 8001fa8:	f7fe fbbb 	bl	8000722 <_close>
 8001fac:	1c43      	adds	r3, r0, #1
 8001fae:	d102      	bne.n	8001fb6 <_close_r+0x1a>
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	b103      	cbz	r3, 8001fb6 <_close_r+0x1a>
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
 8001fb8:	2000009c 	.word	0x2000009c

08001fbc <__sflush_r>:
 8001fbc:	898a      	ldrh	r2, [r1, #12]
 8001fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc2:	4605      	mov	r5, r0
 8001fc4:	0710      	lsls	r0, r2, #28
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	d458      	bmi.n	800207c <__sflush_r+0xc0>
 8001fca:	684b      	ldr	r3, [r1, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dc05      	bgt.n	8001fdc <__sflush_r+0x20>
 8001fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	dc02      	bgt.n	8001fdc <__sflush_r+0x20>
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fde:	2e00      	cmp	r6, #0
 8001fe0:	d0f9      	beq.n	8001fd6 <__sflush_r+0x1a>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fe8:	682f      	ldr	r7, [r5, #0]
 8001fea:	6a21      	ldr	r1, [r4, #32]
 8001fec:	602b      	str	r3, [r5, #0]
 8001fee:	d032      	beq.n	8002056 <__sflush_r+0x9a>
 8001ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ff2:	89a3      	ldrh	r3, [r4, #12]
 8001ff4:	075a      	lsls	r2, r3, #29
 8001ff6:	d505      	bpl.n	8002004 <__sflush_r+0x48>
 8001ff8:	6863      	ldr	r3, [r4, #4]
 8001ffa:	1ac0      	subs	r0, r0, r3
 8001ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ffe:	b10b      	cbz	r3, 8002004 <__sflush_r+0x48>
 8002000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002002:	1ac0      	subs	r0, r0, r3
 8002004:	2300      	movs	r3, #0
 8002006:	4602      	mov	r2, r0
 8002008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800200a:	6a21      	ldr	r1, [r4, #32]
 800200c:	4628      	mov	r0, r5
 800200e:	47b0      	blx	r6
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	89a3      	ldrh	r3, [r4, #12]
 8002014:	d106      	bne.n	8002024 <__sflush_r+0x68>
 8002016:	6829      	ldr	r1, [r5, #0]
 8002018:	291d      	cmp	r1, #29
 800201a:	d848      	bhi.n	80020ae <__sflush_r+0xf2>
 800201c:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <__sflush_r+0x108>)
 800201e:	40ca      	lsrs	r2, r1
 8002020:	07d6      	lsls	r6, r2, #31
 8002022:	d544      	bpl.n	80020ae <__sflush_r+0xf2>
 8002024:	2200      	movs	r2, #0
 8002026:	6062      	str	r2, [r4, #4]
 8002028:	6922      	ldr	r2, [r4, #16]
 800202a:	04d9      	lsls	r1, r3, #19
 800202c:	6022      	str	r2, [r4, #0]
 800202e:	d504      	bpl.n	800203a <__sflush_r+0x7e>
 8002030:	1c42      	adds	r2, r0, #1
 8002032:	d101      	bne.n	8002038 <__sflush_r+0x7c>
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	b903      	cbnz	r3, 800203a <__sflush_r+0x7e>
 8002038:	6560      	str	r0, [r4, #84]	; 0x54
 800203a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800203c:	602f      	str	r7, [r5, #0]
 800203e:	2900      	cmp	r1, #0
 8002040:	d0c9      	beq.n	8001fd6 <__sflush_r+0x1a>
 8002042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002046:	4299      	cmp	r1, r3
 8002048:	d002      	beq.n	8002050 <__sflush_r+0x94>
 800204a:	4628      	mov	r0, r5
 800204c:	f000 f8ec 	bl	8002228 <_free_r>
 8002050:	2000      	movs	r0, #0
 8002052:	6360      	str	r0, [r4, #52]	; 0x34
 8002054:	e7c0      	b.n	8001fd8 <__sflush_r+0x1c>
 8002056:	2301      	movs	r3, #1
 8002058:	4628      	mov	r0, r5
 800205a:	47b0      	blx	r6
 800205c:	1c41      	adds	r1, r0, #1
 800205e:	d1c8      	bne.n	8001ff2 <__sflush_r+0x36>
 8002060:	682b      	ldr	r3, [r5, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0c5      	beq.n	8001ff2 <__sflush_r+0x36>
 8002066:	2b1d      	cmp	r3, #29
 8002068:	d001      	beq.n	800206e <__sflush_r+0xb2>
 800206a:	2b16      	cmp	r3, #22
 800206c:	d101      	bne.n	8002072 <__sflush_r+0xb6>
 800206e:	602f      	str	r7, [r5, #0]
 8002070:	e7b1      	b.n	8001fd6 <__sflush_r+0x1a>
 8002072:	89a3      	ldrh	r3, [r4, #12]
 8002074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002078:	81a3      	strh	r3, [r4, #12]
 800207a:	e7ad      	b.n	8001fd8 <__sflush_r+0x1c>
 800207c:	690f      	ldr	r7, [r1, #16]
 800207e:	2f00      	cmp	r7, #0
 8002080:	d0a9      	beq.n	8001fd6 <__sflush_r+0x1a>
 8002082:	0793      	lsls	r3, r2, #30
 8002084:	bf18      	it	ne
 8002086:	2300      	movne	r3, #0
 8002088:	680e      	ldr	r6, [r1, #0]
 800208a:	bf08      	it	eq
 800208c:	694b      	ldreq	r3, [r1, #20]
 800208e:	eba6 0807 	sub.w	r8, r6, r7
 8002092:	600f      	str	r7, [r1, #0]
 8002094:	608b      	str	r3, [r1, #8]
 8002096:	f1b8 0f00 	cmp.w	r8, #0
 800209a:	dd9c      	ble.n	8001fd6 <__sflush_r+0x1a>
 800209c:	4643      	mov	r3, r8
 800209e:	463a      	mov	r2, r7
 80020a0:	6a21      	ldr	r1, [r4, #32]
 80020a2:	4628      	mov	r0, r5
 80020a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020a6:	47b0      	blx	r6
 80020a8:	2800      	cmp	r0, #0
 80020aa:	dc06      	bgt.n	80020ba <__sflush_r+0xfe>
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	e78e      	b.n	8001fd8 <__sflush_r+0x1c>
 80020ba:	4407      	add	r7, r0
 80020bc:	eba8 0800 	sub.w	r8, r8, r0
 80020c0:	e7e9      	b.n	8002096 <__sflush_r+0xda>
 80020c2:	bf00      	nop
 80020c4:	20400001 	.word	0x20400001

080020c8 <_fflush_r>:
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	690b      	ldr	r3, [r1, #16]
 80020cc:	4605      	mov	r5, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	b1db      	cbz	r3, 800210a <_fflush_r+0x42>
 80020d2:	b118      	cbz	r0, 80020dc <_fflush_r+0x14>
 80020d4:	6983      	ldr	r3, [r0, #24]
 80020d6:	b90b      	cbnz	r3, 80020dc <_fflush_r+0x14>
 80020d8:	f7ff fa90 	bl	80015fc <__sinit>
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <_fflush_r+0x48>)
 80020de:	429c      	cmp	r4, r3
 80020e0:	d109      	bne.n	80020f6 <_fflush_r+0x2e>
 80020e2:	686c      	ldr	r4, [r5, #4]
 80020e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020e8:	b17b      	cbz	r3, 800210a <_fflush_r+0x42>
 80020ea:	4621      	mov	r1, r4
 80020ec:	4628      	mov	r0, r5
 80020ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020f2:	f7ff bf63 	b.w	8001fbc <__sflush_r>
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <_fflush_r+0x4c>)
 80020f8:	429c      	cmp	r4, r3
 80020fa:	d101      	bne.n	8002100 <_fflush_r+0x38>
 80020fc:	68ac      	ldr	r4, [r5, #8]
 80020fe:	e7f1      	b.n	80020e4 <_fflush_r+0x1c>
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <_fflush_r+0x50>)
 8002102:	429c      	cmp	r4, r3
 8002104:	bf08      	it	eq
 8002106:	68ec      	ldreq	r4, [r5, #12]
 8002108:	e7ec      	b.n	80020e4 <_fflush_r+0x1c>
 800210a:	2000      	movs	r0, #0
 800210c:	bd38      	pop	{r3, r4, r5, pc}
 800210e:	bf00      	nop
 8002110:	08002398 	.word	0x08002398
 8002114:	080023b8 	.word	0x080023b8
 8002118:	08002378 	.word	0x08002378

0800211c <_lseek_r>:
 800211c:	b538      	push	{r3, r4, r5, lr}
 800211e:	4605      	mov	r5, r0
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	2200      	movs	r2, #0
 8002126:	4c05      	ldr	r4, [pc, #20]	; (800213c <_lseek_r+0x20>)
 8002128:	6022      	str	r2, [r4, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	f7fe fb1d 	bl	800076a <_lseek>
 8002130:	1c43      	adds	r3, r0, #1
 8002132:	d102      	bne.n	800213a <_lseek_r+0x1e>
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	b103      	cbz	r3, 800213a <_lseek_r+0x1e>
 8002138:	602b      	str	r3, [r5, #0]
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	2000009c 	.word	0x2000009c

08002140 <__swhatbuf_r>:
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	460e      	mov	r6, r1
 8002144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002148:	b096      	sub	sp, #88	; 0x58
 800214a:	2900      	cmp	r1, #0
 800214c:	4614      	mov	r4, r2
 800214e:	461d      	mov	r5, r3
 8002150:	da07      	bge.n	8002162 <__swhatbuf_r+0x22>
 8002152:	2300      	movs	r3, #0
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	89b3      	ldrh	r3, [r6, #12]
 8002158:	061a      	lsls	r2, r3, #24
 800215a:	d410      	bmi.n	800217e <__swhatbuf_r+0x3e>
 800215c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002160:	e00e      	b.n	8002180 <__swhatbuf_r+0x40>
 8002162:	466a      	mov	r2, sp
 8002164:	f000 f8be 	bl	80022e4 <_fstat_r>
 8002168:	2800      	cmp	r0, #0
 800216a:	dbf2      	blt.n	8002152 <__swhatbuf_r+0x12>
 800216c:	9a01      	ldr	r2, [sp, #4]
 800216e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002172:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002176:	425a      	negs	r2, r3
 8002178:	415a      	adcs	r2, r3
 800217a:	602a      	str	r2, [r5, #0]
 800217c:	e7ee      	b.n	800215c <__swhatbuf_r+0x1c>
 800217e:	2340      	movs	r3, #64	; 0x40
 8002180:	2000      	movs	r0, #0
 8002182:	6023      	str	r3, [r4, #0]
 8002184:	b016      	add	sp, #88	; 0x58
 8002186:	bd70      	pop	{r4, r5, r6, pc}

08002188 <__smakebuf_r>:
 8002188:	898b      	ldrh	r3, [r1, #12]
 800218a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800218c:	079d      	lsls	r5, r3, #30
 800218e:	4606      	mov	r6, r0
 8002190:	460c      	mov	r4, r1
 8002192:	d507      	bpl.n	80021a4 <__smakebuf_r+0x1c>
 8002194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	6123      	str	r3, [r4, #16]
 800219c:	2301      	movs	r3, #1
 800219e:	6163      	str	r3, [r4, #20]
 80021a0:	b002      	add	sp, #8
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	ab01      	add	r3, sp, #4
 80021a6:	466a      	mov	r2, sp
 80021a8:	f7ff ffca 	bl	8002140 <__swhatbuf_r>
 80021ac:	9900      	ldr	r1, [sp, #0]
 80021ae:	4605      	mov	r5, r0
 80021b0:	4630      	mov	r0, r6
 80021b2:	f7ff faad 	bl	8001710 <_malloc_r>
 80021b6:	b948      	cbnz	r0, 80021cc <__smakebuf_r+0x44>
 80021b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021bc:	059a      	lsls	r2, r3, #22
 80021be:	d4ef      	bmi.n	80021a0 <__smakebuf_r+0x18>
 80021c0:	f023 0303 	bic.w	r3, r3, #3
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	81a3      	strh	r3, [r4, #12]
 80021ca:	e7e3      	b.n	8002194 <__smakebuf_r+0xc>
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <__smakebuf_r+0x7c>)
 80021ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	6020      	str	r0, [r4, #0]
 80021d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d8:	81a3      	strh	r3, [r4, #12]
 80021da:	9b00      	ldr	r3, [sp, #0]
 80021dc:	6120      	str	r0, [r4, #16]
 80021de:	6163      	str	r3, [r4, #20]
 80021e0:	9b01      	ldr	r3, [sp, #4]
 80021e2:	b15b      	cbz	r3, 80021fc <__smakebuf_r+0x74>
 80021e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021e8:	4630      	mov	r0, r6
 80021ea:	f000 f88d 	bl	8002308 <_isatty_r>
 80021ee:	b128      	cbz	r0, 80021fc <__smakebuf_r+0x74>
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	81a3      	strh	r3, [r4, #12]
 80021fc:	89a3      	ldrh	r3, [r4, #12]
 80021fe:	431d      	orrs	r5, r3
 8002200:	81a5      	strh	r5, [r4, #12]
 8002202:	e7cd      	b.n	80021a0 <__smakebuf_r+0x18>
 8002204:	080015c5 	.word	0x080015c5

08002208 <memchr>:
 8002208:	b510      	push	{r4, lr}
 800220a:	b2c9      	uxtb	r1, r1
 800220c:	4402      	add	r2, r0
 800220e:	4290      	cmp	r0, r2
 8002210:	4603      	mov	r3, r0
 8002212:	d101      	bne.n	8002218 <memchr+0x10>
 8002214:	2300      	movs	r3, #0
 8002216:	e003      	b.n	8002220 <memchr+0x18>
 8002218:	781c      	ldrb	r4, [r3, #0]
 800221a:	3001      	adds	r0, #1
 800221c:	428c      	cmp	r4, r1
 800221e:	d1f6      	bne.n	800220e <memchr+0x6>
 8002220:	4618      	mov	r0, r3
 8002222:	bd10      	pop	{r4, pc}

08002224 <__malloc_lock>:
 8002224:	4770      	bx	lr

08002226 <__malloc_unlock>:
 8002226:	4770      	bx	lr

08002228 <_free_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4605      	mov	r5, r0
 800222c:	2900      	cmp	r1, #0
 800222e:	d043      	beq.n	80022b8 <_free_r+0x90>
 8002230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002234:	1f0c      	subs	r4, r1, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	bfb8      	it	lt
 800223a:	18e4      	addlt	r4, r4, r3
 800223c:	f7ff fff2 	bl	8002224 <__malloc_lock>
 8002240:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <_free_r+0x94>)
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	4610      	mov	r0, r2
 8002246:	b933      	cbnz	r3, 8002256 <_free_r+0x2e>
 8002248:	6063      	str	r3, [r4, #4]
 800224a:	6014      	str	r4, [r2, #0]
 800224c:	4628      	mov	r0, r5
 800224e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002252:	f7ff bfe8 	b.w	8002226 <__malloc_unlock>
 8002256:	42a3      	cmp	r3, r4
 8002258:	d90b      	bls.n	8002272 <_free_r+0x4a>
 800225a:	6821      	ldr	r1, [r4, #0]
 800225c:	1862      	adds	r2, r4, r1
 800225e:	4293      	cmp	r3, r2
 8002260:	bf01      	itttt	eq
 8002262:	681a      	ldreq	r2, [r3, #0]
 8002264:	685b      	ldreq	r3, [r3, #4]
 8002266:	1852      	addeq	r2, r2, r1
 8002268:	6022      	streq	r2, [r4, #0]
 800226a:	6063      	str	r3, [r4, #4]
 800226c:	6004      	str	r4, [r0, #0]
 800226e:	e7ed      	b.n	800224c <_free_r+0x24>
 8002270:	4613      	mov	r3, r2
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	b10a      	cbz	r2, 800227a <_free_r+0x52>
 8002276:	42a2      	cmp	r2, r4
 8002278:	d9fa      	bls.n	8002270 <_free_r+0x48>
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	1858      	adds	r0, r3, r1
 800227e:	42a0      	cmp	r0, r4
 8002280:	d10b      	bne.n	800229a <_free_r+0x72>
 8002282:	6820      	ldr	r0, [r4, #0]
 8002284:	4401      	add	r1, r0
 8002286:	1858      	adds	r0, r3, r1
 8002288:	4282      	cmp	r2, r0
 800228a:	6019      	str	r1, [r3, #0]
 800228c:	d1de      	bne.n	800224c <_free_r+0x24>
 800228e:	6810      	ldr	r0, [r2, #0]
 8002290:	6852      	ldr	r2, [r2, #4]
 8002292:	4401      	add	r1, r0
 8002294:	6019      	str	r1, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	e7d8      	b.n	800224c <_free_r+0x24>
 800229a:	d902      	bls.n	80022a2 <_free_r+0x7a>
 800229c:	230c      	movs	r3, #12
 800229e:	602b      	str	r3, [r5, #0]
 80022a0:	e7d4      	b.n	800224c <_free_r+0x24>
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	1821      	adds	r1, r4, r0
 80022a6:	428a      	cmp	r2, r1
 80022a8:	bf01      	itttt	eq
 80022aa:	6811      	ldreq	r1, [r2, #0]
 80022ac:	6852      	ldreq	r2, [r2, #4]
 80022ae:	1809      	addeq	r1, r1, r0
 80022b0:	6021      	streq	r1, [r4, #0]
 80022b2:	6062      	str	r2, [r4, #4]
 80022b4:	605c      	str	r4, [r3, #4]
 80022b6:	e7c9      	b.n	800224c <_free_r+0x24>
 80022b8:	bd38      	pop	{r3, r4, r5, pc}
 80022ba:	bf00      	nop
 80022bc:	20000090 	.word	0x20000090

080022c0 <_read_r>:
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	4605      	mov	r5, r0
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	2200      	movs	r2, #0
 80022ca:	4c05      	ldr	r4, [pc, #20]	; (80022e0 <_read_r+0x20>)
 80022cc:	6022      	str	r2, [r4, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f7fe f9ee 	bl	80006b0 <_read>
 80022d4:	1c43      	adds	r3, r0, #1
 80022d6:	d102      	bne.n	80022de <_read_r+0x1e>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	b103      	cbz	r3, 80022de <_read_r+0x1e>
 80022dc:	602b      	str	r3, [r5, #0]
 80022de:	bd38      	pop	{r3, r4, r5, pc}
 80022e0:	2000009c 	.word	0x2000009c

080022e4 <_fstat_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	2300      	movs	r3, #0
 80022e8:	4c06      	ldr	r4, [pc, #24]	; (8002304 <_fstat_r+0x20>)
 80022ea:	4605      	mov	r5, r0
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	f7fe fa21 	bl	8000738 <_fstat>
 80022f6:	1c43      	adds	r3, r0, #1
 80022f8:	d102      	bne.n	8002300 <_fstat_r+0x1c>
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	b103      	cbz	r3, 8002300 <_fstat_r+0x1c>
 80022fe:	602b      	str	r3, [r5, #0]
 8002300:	bd38      	pop	{r3, r4, r5, pc}
 8002302:	bf00      	nop
 8002304:	2000009c 	.word	0x2000009c

08002308 <_isatty_r>:
 8002308:	b538      	push	{r3, r4, r5, lr}
 800230a:	2300      	movs	r3, #0
 800230c:	4c05      	ldr	r4, [pc, #20]	; (8002324 <_isatty_r+0x1c>)
 800230e:	4605      	mov	r5, r0
 8002310:	4608      	mov	r0, r1
 8002312:	6023      	str	r3, [r4, #0]
 8002314:	f7fe fa1f 	bl	8000756 <_isatty>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_isatty_r+0x1a>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	b103      	cbz	r3, 8002322 <_isatty_r+0x1a>
 8002320:	602b      	str	r3, [r5, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	2000009c 	.word	0x2000009c

08002328 <_init>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr

08002334 <_fini>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr
