
BLE_SCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006404  08006404  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006404  08006404  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800640c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002df0  20000090  0800649c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e80  0800649c  00022e80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cbc  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d5c  00000000  00000000  00033d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00036ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00037b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d59  00000000  00000000  00038a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d9fc  00000000  00000000  0004f7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075016  00000000  00000000  0005d1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d21fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004764  00000000  00000000  000d2278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080060e0 	.word	0x080060e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080060e0 	.word	0x080060e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <BLE_init>:
extern char str1[];




HAL_StatusTypeDef BLE_init(UART_HandleTypeDef *huart){
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	BLE_UART = huart;
 8000164:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <BLE_init+0x48>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
	Beacons.count=0;
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <BLE_init+0x4c>)
 800016c:	2200      	movs	r2, #0
 800016e:	701a      	strb	r2, [r3, #0]

	sprintf(str1,"BLE_initT()\r\n");
 8000170:	4a0e      	ldr	r2, [pc, #56]	; (80001ac <BLE_init+0x50>)
 8000172:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <BLE_init+0x54>)
 8000174:	4614      	mov	r4, r2
 8000176:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000178:	6020      	str	r0, [r4, #0]
 800017a:	6061      	str	r1, [r4, #4]
 800017c:	60a2      	str	r2, [r4, #8]
 800017e:	881b      	ldrh	r3, [r3, #0]
 8000180:	81a3      	strh	r3, [r4, #12]
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <BLE_init+0x50>)
 8000184:	f7ff ffe2 	bl	800014c <strlen>
 8000188:	4603      	mov	r3, r0
 800018a:	b29a      	uxth	r2, r3
 800018c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000190:	4906      	ldr	r1, [pc, #24]	; (80001ac <BLE_init+0x50>)
 8000192:	4808      	ldr	r0, [pc, #32]	; (80001b4 <BLE_init+0x58>)
 8000194:	f004 fdf9 	bl	8004d8a <HAL_UART_Transmit>
	return HAL_OK;
 8000198:	2300      	movs	r3, #0

}
 800019a:	4618      	mov	r0, r3
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd90      	pop	{r4, r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000dec 	.word	0x20000dec
 80001a8:	20000544 	.word	0x20000544
 80001ac:	200000ac 	.word	0x200000ac
 80001b0:	080060f8 	.word	0x080060f8
 80001b4:	20001184 	.word	0x20001184

080001b8 <copyStructBLE_Beacon>:
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	return HAL_ERROR;*/
}

void copyStructBLE_Beacon(BLE_Beacon *s1, BLE_Beacon *s2)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	6039      	str	r1, [r7, #0]
	int i=0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
	for(i=0;i<8;i++)s1->P0_FactoryID[i]=s2->P0_FactoryID[i];
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	e00b      	b.n	80001e4 <copyStructBLE_Beacon+0x2c>
 80001cc:	683a      	ldr	r2, [r7, #0]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	4413      	add	r3, r2
 80001d2:	7819      	ldrb	r1, [r3, #0]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	4413      	add	r3, r2
 80001da:	460a      	mov	r2, r1
 80001dc:	701a      	strb	r2, [r3, #0]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	3301      	adds	r3, #1
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2b07      	cmp	r3, #7
 80001e8:	ddf0      	ble.n	80001cc <copyStructBLE_Beacon+0x14>
	for(i=0;i<32;i++)s1->P1_iBeacon_UUID[i]=s2->P1_iBeacon_UUID[i];
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	e00d      	b.n	800020c <copyStructBLE_Beacon+0x54>
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	4413      	add	r3, r2
 80001f6:	3308      	adds	r3, #8
 80001f8:	7819      	ldrb	r1, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	4413      	add	r3, r2
 8000200:	3308      	adds	r3, #8
 8000202:	460a      	mov	r2, r1
 8000204:	701a      	strb	r2, [r3, #0]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	2b1f      	cmp	r3, #31
 8000210:	ddee      	ble.n	80001f0 <copyStructBLE_Beacon+0x38>
	for(i=0;i<4;i++)s1->P2_1MajorValue[i]=s2->P2_1MajorValue[i];
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	e00d      	b.n	8000234 <copyStructBLE_Beacon+0x7c>
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4413      	add	r3, r2
 800021e:	3328      	adds	r3, #40	; 0x28
 8000220:	7819      	ldrb	r1, [r3, #0]
 8000222:	687a      	ldr	r2, [r7, #4]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	4413      	add	r3, r2
 8000228:	3328      	adds	r3, #40	; 0x28
 800022a:	460a      	mov	r2, r1
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3301      	adds	r3, #1
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2b03      	cmp	r3, #3
 8000238:	ddee      	ble.n	8000218 <copyStructBLE_Beacon+0x60>
	for(i=0;i<4;i++)s1->P2_2MinorValue[i]=s2->P2_2MinorValue[i];
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	e00d      	b.n	800025c <copyStructBLE_Beacon+0xa4>
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	4413      	add	r3, r2
 8000246:	332c      	adds	r3, #44	; 0x2c
 8000248:	7819      	ldrb	r1, [r3, #0]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4413      	add	r3, r2
 8000250:	332c      	adds	r3, #44	; 0x2c
 8000252:	460a      	mov	r2, r1
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	3301      	adds	r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2b03      	cmp	r3, #3
 8000260:	ddee      	ble.n	8000240 <copyStructBLE_Beacon+0x88>
	for(i=0;i<2;i++)s1->P2_3MeasuredPower[i]=s2->P2_3MeasuredPower[i];
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	e00d      	b.n	8000284 <copyStructBLE_Beacon+0xcc>
 8000268:	683a      	ldr	r2, [r7, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	4413      	add	r3, r2
 800026e:	3330      	adds	r3, #48	; 0x30
 8000270:	7819      	ldrb	r1, [r3, #0]
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	4413      	add	r3, r2
 8000278:	3330      	adds	r3, #48	; 0x30
 800027a:	460a      	mov	r2, r1
 800027c:	701a      	strb	r2, [r3, #0]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	3301      	adds	r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	2b01      	cmp	r3, #1
 8000288:	ddee      	ble.n	8000268 <copyStructBLE_Beacon+0xb0>
	for(i=0;i<12;i++)s1->P3_MAC[i]=s2->P3_MAC[i];
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00d      	b.n	80002ac <copyStructBLE_Beacon+0xf4>
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4413      	add	r3, r2
 8000296:	3332      	adds	r3, #50	; 0x32
 8000298:	7819      	ldrb	r1, [r3, #0]
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4413      	add	r3, r2
 80002a0:	3332      	adds	r3, #50	; 0x32
 80002a2:	460a      	mov	r2, r1
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	2b0b      	cmp	r3, #11
 80002b0:	ddee      	ble.n	8000290 <copyStructBLE_Beacon+0xd8>
	for(i=0;i<4;i++)s1->P4_RSSI[i]=s2->P4_RSSI[i];
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e00d      	b.n	80002d4 <copyStructBLE_Beacon+0x11c>
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	4413      	add	r3, r2
 80002be:	333e      	adds	r3, #62	; 0x3e
 80002c0:	7819      	ldrb	r1, [r3, #0]
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	333e      	adds	r3, #62	; 0x3e
 80002ca:	460a      	mov	r2, r1
 80002cc:	701a      	strb	r2, [r3, #0]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	3301      	adds	r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	ddee      	ble.n	80002b8 <copyStructBLE_Beacon+0x100>
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <Dcmp>:

uint8_t Dcmp(uint8_t *s1, uint8_t *s2, uint8_t N)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b087      	sub	sp, #28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	4613      	mov	r3, r2
 80002f0:	71fb      	strb	r3, [r7, #7]

	for(int i=0;i< N; i++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	e00e      	b.n	8000316 <Dcmp+0x32>
		if(s1[i]!=s2[i])return 0;
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	4413      	add	r3, r2
 80002fe:	781a      	ldrb	r2, [r3, #0]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	68b9      	ldr	r1, [r7, #8]
 8000304:	440b      	add	r3, r1
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	429a      	cmp	r2, r3
 800030a:	d001      	beq.n	8000310 <Dcmp+0x2c>
 800030c:	2300      	movs	r3, #0
 800030e:	e007      	b.n	8000320 <Dcmp+0x3c>
	for(int i=0;i< N; i++)
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	429a      	cmp	r2, r3
 800031c:	dbec      	blt.n	80002f8 <Dcmp+0x14>
	return 1;
 800031e:	2301      	movs	r3, #1
}
 8000320:	4618      	mov	r0, r3
 8000322:	371c      	adds	r7, #28
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
	...

0800032c <BLE_Search_Start>:




void BLE_Search_Start(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	if(RCV_Status == BLE_RCV_STOP){
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <BLE_Search_Start+0x1c>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d104      	bne.n	8000342 <BLE_Search_Start+0x16>
	RCV_Status = BLE_RCV_READY;
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <BLE_Search_Start+0x1c>)
 800033a:	2202      	movs	r2, #2
 800033c:	701a      	strb	r2, [r3, #0]
	BLE_CMD_DISI();
 800033e:	f000 f85b 	bl	80003f8 <BLE_CMD_DISI>
	}

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000540 	.word	0x20000540

0800034c <BLE_Search_up>:
	if(RCV_Status != BLE_RCV_STOP){
		RCV_Status = BLE_RCV_STOP;
	}
}
void  BLE_Search_up(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
	if(NadoPodnyat){
 8000352:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <BLE_Search_up+0x8c>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d03a      	beq.n	80003d0 <BLE_Search_up+0x84>
		HAL_UART_Abort_IT(BLE_UART);
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <BLE_Search_up+0x90>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f004 fe00 	bl	8004f64 <HAL_UART_Abort_IT>
		sprintf(str1,"BLE_Search_up()-----%s----\r\n",Data_RCV);
 8000364:	4a1e      	ldr	r2, [pc, #120]	; (80003e0 <BLE_Search_up+0x94>)
 8000366:	491f      	ldr	r1, [pc, #124]	; (80003e4 <BLE_Search_up+0x98>)
 8000368:	481f      	ldr	r0, [pc, #124]	; (80003e8 <BLE_Search_up+0x9c>)
 800036a:	f005 fa89 	bl	8005880 <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800036e:	481e      	ldr	r0, [pc, #120]	; (80003e8 <BLE_Search_up+0x9c>)
 8000370:	f7ff feec 	bl	800014c <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	b29a      	uxth	r2, r3
 8000378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037c:	491a      	ldr	r1, [pc, #104]	; (80003e8 <BLE_Search_up+0x9c>)
 800037e:	481b      	ldr	r0, [pc, #108]	; (80003ec <BLE_Search_up+0xa0>)
 8000380:	f004 fd03 	bl	8004d8a <HAL_UART_Transmit>
		RCV_Status = BLE_RCV_STOP;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <BLE_Search_up+0xa4>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(5500);///очень очень плохо
		for(int i=0; i<200;i++){//100
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	e014      	b.n	80003ba <BLE_Search_up+0x6e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000396:	4817      	ldr	r0, [pc, #92]	; (80003f4 <BLE_Search_up+0xa8>)
 8000398:	f002 ff94 	bl	80032c4 <HAL_GPIO_WritePin>
				    HAL_Delay(25);
 800039c:	2019      	movs	r0, #25
 800039e:	f002 fc91 	bl	8002cc4 <HAL_Delay>
				    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a8:	4812      	ldr	r0, [pc, #72]	; (80003f4 <BLE_Search_up+0xa8>)
 80003aa:	f002 ff8b 	bl	80032c4 <HAL_GPIO_WritePin>
				    HAL_Delay(25);
 80003ae:	2019      	movs	r0, #25
 80003b0:	f002 fc88 	bl	8002cc4 <HAL_Delay>
		for(int i=0; i<200;i++){//100
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3301      	adds	r3, #1
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2bc7      	cmp	r3, #199	; 0xc7
 80003be:	dde7      	ble.n	8000390 <BLE_Search_up+0x44>
		}
		RCV_Status = BLE_RCV_READY;
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <BLE_Search_up+0xa4>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	701a      	strb	r2, [r3, #0]
		NadoPodnyat=0;
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <BLE_Search_up+0x8c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
		BLE_CMD_DISI();
 80003cc:	f000 f814 	bl	80003f8 <BLE_CMD_DISI>
	}
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000541 	.word	0x20000541
 80003dc:	20000dec 	.word	0x20000dec
 80003e0:	20000d88 	.word	0x20000d88
 80003e4:	08006108 	.word	0x08006108
 80003e8:	200000ac 	.word	0x200000ac
 80003ec:	20001184 	.word	0x20001184
 80003f0:	20000540 	.word	0x20000540
 80003f4:	40011000 	.word	0x40011000

080003f8 <BLE_CMD_DISI>:

int kk;
void BLE_CMD_DISI(void){
 80003f8:	b5b0      	push	{r4, r5, r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
	if(RCV_Status == BLE_RCV_STOP) return;
 80003fe:	4ba1      	ldr	r3, [pc, #644]	; (8000684 <BLE_CMD_DISI+0x28c>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	f000 81d6 	beq.w	80007b4 <BLE_CMD_DISI+0x3bc>
	if(RCV_Status == BLE_Recive_CALLBACKERROR) return;
 8000408:	4b9e      	ldr	r3, [pc, #632]	; (8000684 <BLE_CMD_DISI+0x28c>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b0f      	cmp	r3, #15
 800040e:	f000 81d3 	beq.w	80007b8 <BLE_CMD_DISI+0x3c0>
	//OK+DISC:[P0:P1:P2:P3:P4]
	//...
	//OK+DISCE

	BLE_Beacon iBeacon;
	int i=0;
 8000412:	2300      	movs	r3, #0
 8000414:	64fb      	str	r3, [r7, #76]	; 0x4c
	int j=0;
 8000416:	2300      	movs	r3, #0
 8000418:	64bb      	str	r3, [r7, #72]	; 0x48
	switch (RCV_Status)
 800041a:	4b9a      	ldr	r3, [pc, #616]	; (8000684 <BLE_CMD_DISI+0x28c>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	3b02      	subs	r3, #2
 8000420:	2b03      	cmp	r3, #3
 8000422:	f200 819d 	bhi.w	8000760 <BLE_CMD_DISI+0x368>
 8000426:	a201      	add	r2, pc, #4	; (adr r2, 800042c <BLE_CMD_DISI+0x34>)
 8000428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042c:	0800043d 	.word	0x0800043d
 8000430:	0800049d 	.word	0x0800049d
 8000434:	080004d7 	.word	0x080004d7
 8000438:	08000571 	.word	0x08000571
	{

	case BLE_RCV_READY:
		Beacons.count=0;
 800043c:	4b92      	ldr	r3, [pc, #584]	; (8000688 <BLE_CMD_DISI+0x290>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(BLE_UART,"AT+DISI?",strlen("AT+DISI?"),100);
 8000442:	4b92      	ldr	r3, [pc, #584]	; (800068c <BLE_CMD_DISI+0x294>)
 8000444:	6818      	ldr	r0, [r3, #0]
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	2208      	movs	r2, #8
 800044a:	4991      	ldr	r1, [pc, #580]	; (8000690 <BLE_CMD_DISI+0x298>)
 800044c:	f004 fc9d 	bl	8004d8a <HAL_UART_Transmit>
	    if(HAL_UART_Receive_IT(BLE_UART, (uint8_t*)Data_RCV_buf_uart, 8)!=HAL_OK){
 8000450:	4b8e      	ldr	r3, [pc, #568]	; (800068c <BLE_CMD_DISI+0x294>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2208      	movs	r2, #8
 8000456:	498f      	ldr	r1, [pc, #572]	; (8000694 <BLE_CMD_DISI+0x29c>)
 8000458:	4618      	mov	r0, r3
 800045a:	f004 fd2f 	bl	8004ebc <HAL_UART_Receive_IT>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d017      	beq.n	8000494 <BLE_CMD_DISI+0x9c>
	    	sprintf(str1,"HAL_UART_Receive_IT ERROR\r\n");
 8000464:	4a8c      	ldr	r2, [pc, #560]	; (8000698 <BLE_CMD_DISI+0x2a0>)
 8000466:	4b8d      	ldr	r3, [pc, #564]	; (800069c <BLE_CMD_DISI+0x2a4>)
 8000468:	4615      	mov	r5, r2
 800046a:	461c      	mov	r4, r3
 800046c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800046e:	6028      	str	r0, [r5, #0]
 8000470:	6069      	str	r1, [r5, #4]
 8000472:	60aa      	str	r2, [r5, #8]
 8000474:	60eb      	str	r3, [r5, #12]
 8000476:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000478:	6128      	str	r0, [r5, #16]
 800047a:	6169      	str	r1, [r5, #20]
 800047c:	61aa      	str	r2, [r5, #24]
	    					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800047e:	4886      	ldr	r0, [pc, #536]	; (8000698 <BLE_CMD_DISI+0x2a0>)
 8000480:	f7ff fe64 	bl	800014c <strlen>
 8000484:	4603      	mov	r3, r0
 8000486:	b29a      	uxth	r2, r3
 8000488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800048c:	4982      	ldr	r1, [pc, #520]	; (8000698 <BLE_CMD_DISI+0x2a0>)
 800048e:	4884      	ldr	r0, [pc, #528]	; (80006a0 <BLE_CMD_DISI+0x2a8>)
 8000490:	f004 fc7b 	bl	8004d8a <HAL_UART_Transmit>
	    }
	    RCV_Status = BLE_Recive_DISI;
 8000494:	4b7b      	ldr	r3, [pc, #492]	; (8000684 <BLE_CMD_DISI+0x28c>)
 8000496:	2203      	movs	r2, #3
 8000498:	701a      	strb	r2, [r3, #0]
		break;
 800049a:	e162      	b.n	8000762 <BLE_CMD_DISI+0x36a>
	case BLE_Recive_DISI:
		kk=0;
 800049c:	4b81      	ldr	r3, [pc, #516]	; (80006a4 <BLE_CMD_DISI+0x2ac>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
		Beacons.count=0;
 80004a2:	4b79      	ldr	r3, [pc, #484]	; (8000688 <BLE_CMD_DISI+0x290>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
		if(!Dcmp(Data_RCV,(uint8_t*)"OK+DISIS",8)) {RCV_Status = BLE_Recive_ERROR; break;}
 80004a8:	2208      	movs	r2, #8
 80004aa:	497f      	ldr	r1, [pc, #508]	; (80006a8 <BLE_CMD_DISI+0x2b0>)
 80004ac:	487f      	ldr	r0, [pc, #508]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 80004ae:	f7ff ff19 	bl	80002e4 <Dcmp>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d103      	bne.n	80004c0 <BLE_CMD_DISI+0xc8>
 80004b8:	4b72      	ldr	r3, [pc, #456]	; (8000684 <BLE_CMD_DISI+0x28c>)
 80004ba:	22ff      	movs	r2, #255	; 0xff
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	e150      	b.n	8000762 <BLE_CMD_DISI+0x36a>
	    HAL_UART_Receive_IT(BLE_UART, (uint8_t*)Data_RCV_buf_uart, 8);
 80004c0:	4b72      	ldr	r3, [pc, #456]	; (800068c <BLE_CMD_DISI+0x294>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2208      	movs	r2, #8
 80004c6:	4973      	ldr	r1, [pc, #460]	; (8000694 <BLE_CMD_DISI+0x29c>)
 80004c8:	4618      	mov	r0, r3
 80004ca:	f004 fcf7 	bl	8004ebc <HAL_UART_Receive_IT>
	    RCV_Status = BLE_Recive_DISC;
 80004ce:	4b6d      	ldr	r3, [pc, #436]	; (8000684 <BLE_CMD_DISI+0x28c>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	701a      	strb	r2, [r3, #0]

		break;
 80004d4:	e145      	b.n	8000762 <BLE_CMD_DISI+0x36a>
	case BLE_Recive_DISC: //данные о метке
		if(!Dcmp(&Data_RCV[0],(uint8_t*)"OK+DISC",7)) {RCV_Status = BLE_Recive_ERROR; break;}
 80004d6:	2207      	movs	r2, #7
 80004d8:	4975      	ldr	r1, [pc, #468]	; (80006b0 <BLE_CMD_DISI+0x2b8>)
 80004da:	4874      	ldr	r0, [pc, #464]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 80004dc:	f7ff ff02 	bl	80002e4 <Dcmp>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d103      	bne.n	80004ee <BLE_CMD_DISI+0xf6>
 80004e6:	4b67      	ldr	r3, [pc, #412]	; (8000684 <BLE_CMD_DISI+0x28c>)
 80004e8:	22ff      	movs	r2, #255	; 0xff
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	e139      	b.n	8000762 <BLE_CMD_DISI+0x36a>
		if(Data_RCV[7]=='E') {///поиск завершен
 80004ee:	4b6f      	ldr	r3, [pc, #444]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 80004f0:	79db      	ldrb	r3, [r3, #7]
 80004f2:	2b45      	cmp	r3, #69	; 0x45
 80004f4:	d113      	bne.n	800051e <BLE_CMD_DISI+0x126>
			//calcDistanse();
			ParserBeacons();
 80004f6:	f001 fc55 	bl	8001da4 <ParserBeacons>
			HAL_UART_Transmit(BLE_UART,"AT+DISI?",strlen("AT+DISI?"),100);
 80004fa:	4b64      	ldr	r3, [pc, #400]	; (800068c <BLE_CMD_DISI+0x294>)
 80004fc:	6818      	ldr	r0, [r3, #0]
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	2208      	movs	r2, #8
 8000502:	4963      	ldr	r1, [pc, #396]	; (8000690 <BLE_CMD_DISI+0x298>)
 8000504:	f004 fc41 	bl	8004d8a <HAL_UART_Transmit>

			HAL_UART_Receive_IT(BLE_UART, (uint8_t*)Data_RCV_buf_uart, 8);
 8000508:	4b60      	ldr	r3, [pc, #384]	; (800068c <BLE_CMD_DISI+0x294>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2208      	movs	r2, #8
 800050e:	4961      	ldr	r1, [pc, #388]	; (8000694 <BLE_CMD_DISI+0x29c>)
 8000510:	4618      	mov	r0, r3
 8000512:	f004 fcd3 	bl	8004ebc <HAL_UART_Receive_IT>
			RCV_Status = BLE_Recive_DISI;
 8000516:	4b5b      	ldr	r3, [pc, #364]	; (8000684 <BLE_CMD_DISI+0x28c>)
 8000518:	2203      	movs	r2, #3
 800051a:	701a      	strb	r2, [r3, #0]
		else{
			sprintf(str1,"Data_RCV[7] ERROR\r\n");
				    					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
			RCV_Status = BLE_Recive_ERROR; break;}

		break;
 800051c:	e121      	b.n	8000762 <BLE_CMD_DISI+0x36a>
		else if(Data_RCV[7]==':') {
 800051e:	4b63      	ldr	r3, [pc, #396]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 8000520:	79db      	ldrb	r3, [r3, #7]
 8000522:	2b3a      	cmp	r3, #58	; 0x3a
 8000524:	d10a      	bne.n	800053c <BLE_CMD_DISI+0x144>
			RCV_Status = BLE_Recive_DISC_beacon;
 8000526:	4b57      	ldr	r3, [pc, #348]	; (8000684 <BLE_CMD_DISI+0x28c>)
 8000528:	2205      	movs	r2, #5
 800052a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(BLE_UART, (uint8_t*)Data_RCV_buf_uart, 70);
 800052c:	4b57      	ldr	r3, [pc, #348]	; (800068c <BLE_CMD_DISI+0x294>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2246      	movs	r2, #70	; 0x46
 8000532:	4958      	ldr	r1, [pc, #352]	; (8000694 <BLE_CMD_DISI+0x29c>)
 8000534:	4618      	mov	r0, r3
 8000536:	f004 fcc1 	bl	8004ebc <HAL_UART_Receive_IT>
		break;
 800053a:	e112      	b.n	8000762 <BLE_CMD_DISI+0x36a>
			sprintf(str1,"Data_RCV[7] ERROR\r\n");
 800053c:	4a56      	ldr	r2, [pc, #344]	; (8000698 <BLE_CMD_DISI+0x2a0>)
 800053e:	4b5d      	ldr	r3, [pc, #372]	; (80006b4 <BLE_CMD_DISI+0x2bc>)
 8000540:	4615      	mov	r5, r2
 8000542:	461c      	mov	r4, r3
 8000544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000546:	6028      	str	r0, [r5, #0]
 8000548:	6069      	str	r1, [r5, #4]
 800054a:	60aa      	str	r2, [r5, #8]
 800054c:	60eb      	str	r3, [r5, #12]
 800054e:	6820      	ldr	r0, [r4, #0]
 8000550:	6128      	str	r0, [r5, #16]
				    					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000552:	4851      	ldr	r0, [pc, #324]	; (8000698 <BLE_CMD_DISI+0x2a0>)
 8000554:	f7ff fdfa 	bl	800014c <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	494d      	ldr	r1, [pc, #308]	; (8000698 <BLE_CMD_DISI+0x2a0>)
 8000562:	484f      	ldr	r0, [pc, #316]	; (80006a0 <BLE_CMD_DISI+0x2a8>)
 8000564:	f004 fc11 	bl	8004d8a <HAL_UART_Transmit>
			RCV_Status = BLE_Recive_ERROR; break;}
 8000568:	4b46      	ldr	r3, [pc, #280]	; (8000684 <BLE_CMD_DISI+0x28c>)
 800056a:	22ff      	movs	r2, #255	; 0xff
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	e0f8      	b.n	8000762 <BLE_CMD_DISI+0x36a>
	case BLE_Recive_DISC_beacon:
		j=0;
 8000570:	2300      	movs	r3, #0
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0;i<8;i++) iBeacon.P0_FactoryID[i]= Data_RCV[j++];
 8000574:	2300      	movs	r3, #0
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000578:	e00c      	b.n	8000594 <BLE_CMD_DISI+0x19c>
 800057a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	64ba      	str	r2, [r7, #72]	; 0x48
 8000580:	4a4a      	ldr	r2, [pc, #296]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 8000582:	5cd1      	ldrb	r1, [r2, r3]
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000588:	4413      	add	r3, r2
 800058a:	460a      	mov	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000590:	3301      	adds	r3, #1
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000596:	2b07      	cmp	r3, #7
 8000598:	ddef      	ble.n	800057a <BLE_CMD_DISI+0x182>

		if(Data_RCV[j++]!=':') {RCV_Status = BLE_Recive_ERROR; break;}
 800059a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	64ba      	str	r2, [r7, #72]	; 0x48
 80005a0:	4a42      	ldr	r2, [pc, #264]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	2b3a      	cmp	r3, #58	; 0x3a
 80005a6:	d003      	beq.n	80005b0 <BLE_CMD_DISI+0x1b8>
 80005a8:	4b36      	ldr	r3, [pc, #216]	; (8000684 <BLE_CMD_DISI+0x28c>)
 80005aa:	22ff      	movs	r2, #255	; 0xff
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e0d8      	b.n	8000762 <BLE_CMD_DISI+0x36a>
		for(i=0;i<32;i++) iBeacon.P1_iBeacon_UUID[i]= Data_RCV[j++];
 80005b0:	2300      	movs	r3, #0
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005b4:	e00d      	b.n	80005d2 <BLE_CMD_DISI+0x1da>
 80005b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80005bc:	4a3b      	ldr	r2, [pc, #236]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 80005be:	5cd1      	ldrb	r1, [r2, r3]
 80005c0:	f107 020c 	add.w	r2, r7, #12
 80005c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005c6:	4413      	add	r3, r2
 80005c8:	460a      	mov	r2, r1
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ce:	3301      	adds	r3, #1
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005d4:	2b1f      	cmp	r3, #31
 80005d6:	ddee      	ble.n	80005b6 <BLE_CMD_DISI+0x1be>

		if(Data_RCV[j++]!=':') {RCV_Status = BLE_Recive_ERROR; break;}
 80005d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80005de:	4a33      	ldr	r2, [pc, #204]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	2b3a      	cmp	r3, #58	; 0x3a
 80005e4:	d003      	beq.n	80005ee <BLE_CMD_DISI+0x1f6>
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <BLE_CMD_DISI+0x28c>)
 80005e8:	22ff      	movs	r2, #255	; 0xff
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	e0b9      	b.n	8000762 <BLE_CMD_DISI+0x36a>
		for(i=0;i<4;i++) iBeacon.P2_1MajorValue[i]= Data_RCV[j++];
 80005ee:	2300      	movs	r3, #0
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005f2:	e00d      	b.n	8000610 <BLE_CMD_DISI+0x218>
 80005f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80005fa:	4a2c      	ldr	r2, [pc, #176]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 80005fc:	5cd1      	ldrb	r1, [r2, r3]
 80005fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000604:	4413      	add	r3, r2
 8000606:	460a      	mov	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800060c:	3301      	adds	r3, #1
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000612:	2b03      	cmp	r3, #3
 8000614:	ddee      	ble.n	80005f4 <BLE_CMD_DISI+0x1fc>
		for(i=0;i<4;i++) iBeacon.P2_2MinorValue[i]= Data_RCV[j++];
 8000616:	2300      	movs	r3, #0
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800061a:	e00d      	b.n	8000638 <BLE_CMD_DISI+0x240>
 800061c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	64ba      	str	r2, [r7, #72]	; 0x48
 8000622:	4a22      	ldr	r2, [pc, #136]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 8000624:	5cd1      	ldrb	r1, [r2, r3]
 8000626:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800062a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800062c:	4413      	add	r3, r2
 800062e:	460a      	mov	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000634:	3301      	adds	r3, #1
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800063a:	2b03      	cmp	r3, #3
 800063c:	ddee      	ble.n	800061c <BLE_CMD_DISI+0x224>
		for(i=0;i<2;i++) iBeacon.P2_3MeasuredPower[i]= Data_RCV[j++];
 800063e:	2300      	movs	r3, #0
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000642:	e00d      	b.n	8000660 <BLE_CMD_DISI+0x268>
 8000644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	64ba      	str	r2, [r7, #72]	; 0x48
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000654:	4413      	add	r3, r2
 8000656:	460a      	mov	r2, r1
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065c:	3301      	adds	r3, #1
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000662:	2b01      	cmp	r3, #1
 8000664:	ddee      	ble.n	8000644 <BLE_CMD_DISI+0x24c>

		if(Data_RCV[j++]!=':') {RCV_Status = BLE_Recive_ERROR; break;}
 8000666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	64ba      	str	r2, [r7, #72]	; 0x48
 800066c:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <BLE_CMD_DISI+0x2b4>)
 800066e:	5cd3      	ldrb	r3, [r2, r3]
 8000670:	2b3a      	cmp	r3, #58	; 0x3a
 8000672:	d003      	beq.n	800067c <BLE_CMD_DISI+0x284>
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <BLE_CMD_DISI+0x28c>)
 8000676:	22ff      	movs	r2, #255	; 0xff
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e072      	b.n	8000762 <BLE_CMD_DISI+0x36a>
		for(i=0;i<12;i++) iBeacon.P3_MAC[i]= Data_RCV[j++];
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000680:	e028      	b.n	80006d4 <BLE_CMD_DISI+0x2dc>
 8000682:	bf00      	nop
 8000684:	20000540 	.word	0x20000540
 8000688:	20000544 	.word	0x20000544
 800068c:	20000dec 	.word	0x20000dec
 8000690:	08006128 	.word	0x08006128
 8000694:	200004dc 	.word	0x200004dc
 8000698:	200000ac 	.word	0x200000ac
 800069c:	08006134 	.word	0x08006134
 80006a0:	20001184 	.word	0x20001184
 80006a4:	20000df4 	.word	0x20000df4
 80006a8:	08006150 	.word	0x08006150
 80006ac:	20000d88 	.word	0x20000d88
 80006b0:	0800615c 	.word	0x0800615c
 80006b4:	08006164 	.word	0x08006164
 80006b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80006be:	4a40      	ldr	r2, [pc, #256]	; (80007c0 <BLE_CMD_DISI+0x3c8>)
 80006c0:	5cd1      	ldrb	r1, [r2, r3]
 80006c2:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80006c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006c8:	4413      	add	r3, r2
 80006ca:	460a      	mov	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006d0:	3301      	adds	r3, #1
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006d6:	2b0b      	cmp	r3, #11
 80006d8:	ddee      	ble.n	80006b8 <BLE_CMD_DISI+0x2c0>

		if(Data_RCV[j++]!=':') {RCV_Status = BLE_Recive_ERROR; break;}
 80006da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	64ba      	str	r2, [r7, #72]	; 0x48
 80006e0:	4a37      	ldr	r2, [pc, #220]	; (80007c0 <BLE_CMD_DISI+0x3c8>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	2b3a      	cmp	r3, #58	; 0x3a
 80006e6:	d003      	beq.n	80006f0 <BLE_CMD_DISI+0x2f8>
 80006e8:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <BLE_CMD_DISI+0x3cc>)
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e038      	b.n	8000762 <BLE_CMD_DISI+0x36a>
		for(i=0;i<4;i++) iBeacon.P4_RSSI[i]= Data_RCV[j++];
 80006f0:	2300      	movs	r3, #0
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006f4:	e00d      	b.n	8000712 <BLE_CMD_DISI+0x31a>
 80006f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <BLE_CMD_DISI+0x3c8>)
 80006fe:	5cd1      	ldrb	r1, [r2, r3]
 8000700:	f107 0242 	add.w	r2, r7, #66	; 0x42
 8000704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000706:	4413      	add	r3, r2
 8000708:	460a      	mov	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800070e:	3301      	adds	r3, #1
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000714:	2b03      	cmp	r3, #3
 8000716:	ddee      	ble.n	80006f6 <BLE_CMD_DISI+0x2fe>
		Beacons.count++;
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <BLE_CMD_DISI+0x3d0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <BLE_CMD_DISI+0x3d0>)
 8000722:	701a      	strb	r2, [r3, #0]
		RCV_Status = BLE_Recive_DISC;
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <BLE_CMD_DISI+0x3cc>)
 8000726:	2204      	movs	r2, #4
 8000728:	701a      	strb	r2, [r3, #0]

		copyStructBLE_Beacon(&Beacons.BLE_Beacons[kk], &iBeacon);
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <BLE_CMD_DISI+0x3d4>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4613      	mov	r3, r2
 8000730:	015b      	lsls	r3, r3, #5
 8000732:	4413      	add	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <BLE_CMD_DISI+0x3d0>)
 8000738:	4413      	add	r3, r2
 800073a:	3301      	adds	r3, #1
 800073c:	1d3a      	adds	r2, r7, #4
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd39 	bl	80001b8 <copyStructBLE_Beacon>
		kk++;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <BLE_CMD_DISI+0x3d4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	4a1f      	ldr	r2, [pc, #124]	; (80007cc <BLE_CMD_DISI+0x3d4>)
 800074e:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(BLE_UART, (uint8_t*)Data_RCV_buf_uart, 8);
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BLE_CMD_DISI+0x3d8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2208      	movs	r2, #8
 8000756:	491f      	ldr	r1, [pc, #124]	; (80007d4 <BLE_CMD_DISI+0x3dc>)
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fbaf 	bl	8004ebc <HAL_UART_Receive_IT>



		break;
 800075e:	e000      	b.n	8000762 <BLE_CMD_DISI+0x36a>
	default:
	break;
 8000760:	bf00      	nop

	}

	if(RCV_Status == BLE_Recive_ERROR)
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <BLE_CMD_DISI+0x3cc>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2bff      	cmp	r3, #255	; 0xff
 8000768:	d120      	bne.n	80007ac <BLE_CMD_DISI+0x3b4>
	{
		sprintf(str1,"ERROR j=%d\r\n",j);
 800076a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800076c:	491a      	ldr	r1, [pc, #104]	; (80007d8 <BLE_CMD_DISI+0x3e0>)
 800076e:	481b      	ldr	r0, [pc, #108]	; (80007dc <BLE_CMD_DISI+0x3e4>)
 8000770:	f005 f886 	bl	8005880 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000774:	4819      	ldr	r0, [pc, #100]	; (80007dc <BLE_CMD_DISI+0x3e4>)
 8000776:	f7ff fce9 	bl	800014c <strlen>
 800077a:	4603      	mov	r3, r0
 800077c:	b29a      	uxth	r2, r3
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	4916      	ldr	r1, [pc, #88]	; (80007dc <BLE_CMD_DISI+0x3e4>)
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <BLE_CMD_DISI+0x3e8>)
 8000786:	f004 fb00 	bl	8004d8a <HAL_UART_Transmit>

		RCV_Status = BLE_RCV_READY;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <BLE_CMD_DISI+0x3cc>)
 800078c:	2202      	movs	r2, #2
 800078e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(BLE_UART,"AT",strlen("AT"),100);
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <BLE_CMD_DISI+0x3d8>)
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	2202      	movs	r2, #2
 8000798:	4912      	ldr	r1, [pc, #72]	; (80007e4 <BLE_CMD_DISI+0x3ec>)
 800079a:	f004 faf6 	bl	8004d8a <HAL_UART_Transmit>
		    HAL_UART_Receive_IT(BLE_UART, (uint8_t*)Data_RCV_buf_uart, 2);
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <BLE_CMD_DISI+0x3d8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2202      	movs	r2, #2
 80007a4:	490b      	ldr	r1, [pc, #44]	; (80007d4 <BLE_CMD_DISI+0x3dc>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fb88 	bl	8004ebc <HAL_UART_Receive_IT>

	}

	HAL_IWDG_Refresh(&hiwdg);
 80007ac:	480e      	ldr	r0, [pc, #56]	; (80007e8 <BLE_CMD_DISI+0x3f0>)
 80007ae:	f002 fdda 	bl	8003366 <HAL_IWDG_Refresh>
 80007b2:	e002      	b.n	80007ba <BLE_CMD_DISI+0x3c2>
	if(RCV_Status == BLE_RCV_STOP) return;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <BLE_CMD_DISI+0x3c2>
	if(RCV_Status == BLE_Recive_CALLBACKERROR) return;
 80007b8:	bf00      	nop
}
 80007ba:	3750      	adds	r7, #80	; 0x50
 80007bc:	46bd      	mov	sp, r7
 80007be:	bdb0      	pop	{r4, r5, r7, pc}
 80007c0:	20000d88 	.word	0x20000d88
 80007c4:	20000540 	.word	0x20000540
 80007c8:	20000544 	.word	0x20000544
 80007cc:	20000df4 	.word	0x20000df4
 80007d0:	20000dec 	.word	0x20000dec
 80007d4:	200004dc 	.word	0x200004dc
 80007d8:	08006178 	.word	0x08006178
 80007dc:	200000ac 	.word	0x200000ac
 80007e0:	20001184 	.word	0x20001184
 80007e4:	08006188 	.word	0x08006188
 80007e8:	200010a0 	.word	0x200010a0

080007ec <BLE_Callback>:




void BLE_Callback()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	//проверить какая команда выполнялась до

  memcpy(Data_RCV,Data_RCV_buf_uart,Data_RCV_size);//сохранить данные. буффер мб не нужен
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <BLE_Callback+0x1c>)
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <BLE_Callback+0x20>)
 80007f4:	4610      	mov	r0, r2
 80007f6:	4619      	mov	r1, r3
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	461a      	mov	r2, r3
 80007fc:	f005 f82c 	bl	8005858 <memcpy>
  BLE_CMD_DISI();
 8000800:	f7ff fdfa 	bl	80003f8 <BLE_CMD_DISI>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000d88 	.word	0x20000d88
 800080c:	200004dc 	.word	0x200004dc

08000810 <tcp_send_http_one>:
extern uint8_t JSON_DATA_SEND[];
//uint8_t DATA_htm[]={"WORDHELLO WORDHELLO WORDHELLO WORDHELLO WORDHELLO"};
//-----------------------------------------------

void tcp_send_http_one(uint8_t sn)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]

  uint16_t i=0;
 800081a:	2300      	movs	r3, #0
 800081c:	82fb      	strh	r3, [r7, #22]
  uint16_t data_len=0;
 800081e:	2300      	movs	r3, #0
 8000820:	82bb      	strh	r3, [r7, #20]
  uint16_t header_len=0;
 8000822:	2300      	movs	r3, #0
 8000824:	81fb      	strh	r3, [r7, #14]
  uint16_t end_point;
  uint8_t num_sect=0;
 8000826:	2300      	movs	r3, #0
 8000828:	737b      	strb	r3, [r7, #13]
  uint16_t len_sect=0;
 800082a:	2300      	movs	r3, #0
 800082c:	823b      	strh	r3, [r7, #16]

				header_send = (void*)http_header;
 800082e:	4b40      	ldr	r3, [pc, #256]	; (8000930 <tcp_send_http_one+0x120>)
 8000830:	4a40      	ldr	r2, [pc, #256]	; (8000934 <tcp_send_http_one+0x124>)
 8000832:	601a      	str	r2, [r3, #0]

		header_len = strlen(header_send);
 8000834:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <tcp_send_http_one+0x120>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fc87 	bl	800014c <strlen>
 800083e:	4603      	mov	r3, r0
 8000840:	81fb      	strh	r3, [r7, #14]
		data_len = strlen(data_send);
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <tcp_send_http_one+0x128>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fc80 	bl	800014c <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	82bb      	strh	r3, [r7, #20]
		end_point = GetWritePointer(sn);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f001 ffd8 	bl	8002808 <GetWritePointer>
 8000858:	4603      	mov	r3, r0
 800085a:	827b      	strh	r3, [r7, #18]
		end_point+=header_len+data_len;
 800085c:	89fa      	ldrh	r2, [r7, #14]
 800085e:	8abb      	ldrh	r3, [r7, #20]
 8000860:	4413      	add	r3, r2
 8000862:	b29a      	uxth	r2, r3
 8000864:	8a7b      	ldrh	r3, [r7, #18]
 8000866:	4413      	add	r3, r2
 8000868:	827b      	strh	r3, [r7, #18]
		//Заполним данными буфер для отправки пакета
		SetWritePointer(sn, end_point);
 800086a:	8a7a      	ldrh	r2, [r7, #18]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f001 ffec 	bl	800284e <SetWritePointer>
		end_point = GetWritePointer(sn);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f001 ffc5 	bl	8002808 <GetWritePointer>
 800087e:	4603      	mov	r3, r0
 8000880:	827b      	strh	r3, [r7, #18]
		memcpy(sect+3,header_send,header_len);
 8000882:	482e      	ldr	r0, [pc, #184]	; (800093c <tcp_send_http_one+0x12c>)
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <tcp_send_http_one+0x120>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	89fa      	ldrh	r2, [r7, #14]
 800088a:	4619      	mov	r1, r3
 800088c:	f004 ffe4 	bl	8005858 <memcpy>
		w5500_writeSockBuf(sn, end_point, (uint8_t*)sect, header_len);
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	8a79      	ldrh	r1, [r7, #18]
 8000894:	79f8      	ldrb	r0, [r7, #7]
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <tcp_send_http_one+0x130>)
 8000898:	f001 fd8c 	bl	80023b4 <w5500_writeSockBuf>
		end_point+=header_len;
 800089c:	8a7a      	ldrh	r2, [r7, #18]
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	4413      	add	r3, r2
 80008a2:	827b      	strh	r3, [r7, #18]
				num_sect = data_len / 512;
 80008a4:	8abb      	ldrh	r3, [r7, #20]
 80008a6:	0a5b      	lsrs	r3, r3, #9
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	737b      	strb	r3, [r7, #13]
				for(i=0;i<=num_sect;i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	82fb      	strh	r3, [r7, #22]
 80008b0:	e025      	b.n	80008fe <tcp_send_http_one+0xee>
				{
					//sprintf(str1,"i=%d\tnum_sect=%d\r\n",i,num_sect);
					//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
					//не последний сектор
					if(i<num_sect) len_sect=512;
 80008b2:	7b7b      	ldrb	r3, [r7, #13]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	8afa      	ldrh	r2, [r7, #22]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d203      	bcs.n	80008c4 <tcp_send_http_one+0xb4>
 80008bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c0:	823b      	strh	r3, [r7, #16]
 80008c2:	e001      	b.n	80008c8 <tcp_send_http_one+0xb8>
					else len_sect=data_len;
 80008c4:	8abb      	ldrh	r3, [r7, #20]
 80008c6:	823b      	strh	r3, [r7, #16]

					//sprintf(str1,"data_len=%dlen_sect=%d\t\r\n",data_len,len_sect);
					//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
					memcpy(sect+3,data_send+i*512,len_sect);
 80008c8:	481c      	ldr	r0, [pc, #112]	; (800093c <tcp_send_http_one+0x12c>)
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <tcp_send_http_one+0x128>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	8afa      	ldrh	r2, [r7, #22]
 80008d0:	0252      	lsls	r2, r2, #9
 80008d2:	4413      	add	r3, r2
 80008d4:	8a3a      	ldrh	r2, [r7, #16]
 80008d6:	4619      	mov	r1, r3
 80008d8:	f004 ffbe 	bl	8005858 <memcpy>
					w5500_writeSockBuf(sn, end_point, (uint8_t*)sect, len_sect);
 80008dc:	8a3b      	ldrh	r3, [r7, #16]
 80008de:	8a79      	ldrh	r1, [r7, #18]
 80008e0:	79f8      	ldrb	r0, [r7, #7]
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <tcp_send_http_one+0x130>)
 80008e4:	f001 fd66 	bl	80023b4 <w5500_writeSockBuf>
					end_point+=len_sect;
 80008e8:	8a7a      	ldrh	r2, [r7, #18]
 80008ea:	8a3b      	ldrh	r3, [r7, #16]
 80008ec:	4413      	add	r3, r2
 80008ee:	827b      	strh	r3, [r7, #18]
					data_len -= len_sect;
 80008f0:	8aba      	ldrh	r2, [r7, #20]
 80008f2:	8a3b      	ldrh	r3, [r7, #16]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	82bb      	strh	r3, [r7, #20]
				for(i=0;i<=num_sect;i++)
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	3301      	adds	r3, #1
 80008fc:	82fb      	strh	r3, [r7, #22]
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	b29b      	uxth	r3, r3
 8000902:	8afa      	ldrh	r2, [r7, #22]
 8000904:	429a      	cmp	r2, r3
 8000906:	d9d4      	bls.n	80008b2 <tcp_send_http_one+0xa2>
			end_point+=512;
			*/


	//отправим данные
  RecvSocket(sn);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4618      	mov	r0, r3
 800090c:	f001 ff08 	bl	8002720 <RecvSocket>
  SendSocket(sn);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4618      	mov	r0, r3
 8000914:	f001 ff1a 	bl	800274c <SendSocket>
  httpsockprop[sn].data_stat = DATA_COMPLETED;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <tcp_send_http_one+0x134>)
 800091c:	212c      	movs	r1, #44	; 0x2c
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
  //sprintf(str1,"tcp_send_http_one()end\r\n");
  //			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000dfc 	.word	0x20000dfc
 8000934:	08006388 	.word	0x08006388
 8000938:	20000f60 	.word	0x20000f60
 800093c:	20002c77 	.word	0x20002c77
 8000940:	20002c74 	.word	0x20002c74
 8000944:	20000e00 	.word	0x20000e00

08000948 <tcp_send_http_first>:
//-----------------------------------------------
void tcp_send_http_first(uint8_t sn)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  uint8_t prt;
  uint16_t i=0;
 8000952:	2300      	movs	r3, #0
 8000954:	83fb      	strh	r3, [r7, #30]
  uint16_t data_len=0;
 8000956:	2300      	movs	r3, #0
 8000958:	83bb      	strh	r3, [r7, #28]
  uint16_t header_len=0;
 800095a:	2300      	movs	r3, #0
 800095c:	82fb      	strh	r3, [r7, #22]
  uint16_t end_point;
  uint8_t num_sect=0;
 800095e:	2300      	movs	r3, #0
 8000960:	757b      	strb	r3, [r7, #21]
  uint16_t len_sect;
  uint16_t last_part, last_part_size;
	//На EXISTING проверять не будем, так как будем считать, что error404_htm у нас всегда будет умещаться в один буфер
  header_send = (void*)http_header;
 8000962:	4b76      	ldr	r3, [pc, #472]	; (8000b3c <tcp_send_http_first+0x1f4>)
 8000964:	4a76      	ldr	r2, [pc, #472]	; (8000b40 <tcp_send_http_first+0x1f8>)
 8000966:	601a      	str	r2, [r3, #0]
	header_len = strlen(header_send);
 8000968:	4b74      	ldr	r3, [pc, #464]	; (8000b3c <tcp_send_http_first+0x1f4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fbed 	bl	800014c <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	82fb      	strh	r3, [r7, #22]
	data_len = tcp_size_wnd-header_len;
 8000976:	4b73      	ldr	r3, [pc, #460]	; (8000b44 <tcp_send_http_first+0x1fc>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b29a      	uxth	r2, r3
 800097c:	8afb      	ldrh	r3, [r7, #22]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	83bb      	strh	r3, [r7, #28]
	end_point = GetWritePointer(sn);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4618      	mov	r0, r3
 8000986:	f001 ff3f 	bl	8002808 <GetWritePointer>
 800098a:	4603      	mov	r3, r0
 800098c:	837b      	strh	r3, [r7, #26]
	end_point+=header_len+data_len;
 800098e:	8afa      	ldrh	r2, [r7, #22]
 8000990:	8bbb      	ldrh	r3, [r7, #28]
 8000992:	4413      	add	r3, r2
 8000994:	b29a      	uxth	r2, r3
 8000996:	8b7b      	ldrh	r3, [r7, #26]
 8000998:	4413      	add	r3, r2
 800099a:	837b      	strh	r3, [r7, #26]
	SetWritePointer(sn, end_point);
 800099c:	8b7a      	ldrh	r2, [r7, #26]
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 ff53 	bl	800284e <SetWritePointer>
	end_point = GetWritePointer(sn);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 ff2c 	bl	8002808 <GetWritePointer>
 80009b0:	4603      	mov	r3, r0
 80009b2:	837b      	strh	r3, [r7, #26]
	//сохраним некоторые параметры, а то почему-то они теряются
	last_part = httpsockprop[sn].cnt_rem_data_part;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4a64      	ldr	r2, [pc, #400]	; (8000b48 <tcp_send_http_first+0x200>)
 80009b8:	212c      	movs	r1, #44	; 0x2c
 80009ba:	fb01 f303 	mul.w	r3, r1, r3
 80009be:	4413      	add	r3, r2
 80009c0:	330c      	adds	r3, #12
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	827b      	strh	r3, [r7, #18]
	last_part_size = httpsockprop[sn].last_data_part_size;
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a5f      	ldr	r2, [pc, #380]	; (8000b48 <tcp_send_http_first+0x200>)
 80009ca:	212c      	movs	r1, #44	; 0x2c
 80009cc:	fb01 f303 	mul.w	r3, r1, r3
 80009d0:	4413      	add	r3, r2
 80009d2:	3308      	adds	r3, #8
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	823b      	strh	r3, [r7, #16]
	prt = httpsockprop[sn].prt_tp;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4a5b      	ldr	r2, [pc, #364]	; (8000b48 <tcp_send_http_first+0x200>)
 80009dc:	212c      	movs	r1, #44	; 0x2c
 80009de:	fb01 f303 	mul.w	r3, r1, r3
 80009e2:	4413      	add	r3, r2
 80009e4:	3315      	adds	r3, #21
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	73fb      	strb	r3, [r7, #15]
	//Заполним данными буфер для отправки пакета
	memcpy(sect+3,header_send,header_len);
 80009ea:	4858      	ldr	r0, [pc, #352]	; (8000b4c <tcp_send_http_first+0x204>)
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <tcp_send_http_first+0x1f4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	8afa      	ldrh	r2, [r7, #22]
 80009f2:	4619      	mov	r1, r3
 80009f4:	f004 ff30 	bl	8005858 <memcpy>
	w5500_writeSockBuf(sn, end_point, (uint8_t*)sect, header_len);
 80009f8:	8afb      	ldrh	r3, [r7, #22]
 80009fa:	8b79      	ldrh	r1, [r7, #26]
 80009fc:	79f8      	ldrb	r0, [r7, #7]
 80009fe:	4a54      	ldr	r2, [pc, #336]	; (8000b50 <tcp_send_http_first+0x208>)
 8000a00:	f001 fcd8 	bl	80023b4 <w5500_writeSockBuf>
	end_point+=header_len;
 8000a04:	8b7a      	ldrh	r2, [r7, #26]
 8000a06:	8afb      	ldrh	r3, [r7, #22]
 8000a08:	4413      	add	r3, r2
 8000a0a:	837b      	strh	r3, [r7, #26]
	num_sect = data_len / 512;
 8000a0c:	8bbb      	ldrh	r3, [r7, #28]
 8000a0e:	0a5b      	lsrs	r3, r3, #9
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	757b      	strb	r3, [r7, #21]
	for(i=0;i<=num_sect;i++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	83fb      	strh	r3, [r7, #30]
 8000a18:	e025      	b.n	8000a66 <tcp_send_http_first+0x11e>
		{
			//sprintf(str1,"i=%d\tnum_sect=%d\r\n",i,num_sect);
			//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
			//не последний сектор
			if(i<num_sect) len_sect=512;
 8000a1a:	7d7b      	ldrb	r3, [r7, #21]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	8bfa      	ldrh	r2, [r7, #30]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d203      	bcs.n	8000a2c <tcp_send_http_first+0xe4>
 8000a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a28:	833b      	strh	r3, [r7, #24]
 8000a2a:	e001      	b.n	8000a30 <tcp_send_http_first+0xe8>
			else len_sect=data_len;
 8000a2c:	8bbb      	ldrh	r3, [r7, #28]
 8000a2e:	833b      	strh	r3, [r7, #24]

			//sprintf(str1,"data_len=%dlen_sect=%d\t\r\n",data_len,len_sect);
			//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
			memcpy(sect+3,data_send+i*512,len_sect);
 8000a30:	4846      	ldr	r0, [pc, #280]	; (8000b4c <tcp_send_http_first+0x204>)
 8000a32:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <tcp_send_http_first+0x20c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	8bfa      	ldrh	r2, [r7, #30]
 8000a38:	0252      	lsls	r2, r2, #9
 8000a3a:	4413      	add	r3, r2
 8000a3c:	8b3a      	ldrh	r2, [r7, #24]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f004 ff0a 	bl	8005858 <memcpy>
			w5500_writeSockBuf(sn, end_point, (uint8_t*)sect, len_sect);
 8000a44:	8b3b      	ldrh	r3, [r7, #24]
 8000a46:	8b79      	ldrh	r1, [r7, #26]
 8000a48:	79f8      	ldrb	r0, [r7, #7]
 8000a4a:	4a41      	ldr	r2, [pc, #260]	; (8000b50 <tcp_send_http_first+0x208>)
 8000a4c:	f001 fcb2 	bl	80023b4 <w5500_writeSockBuf>
			end_point+=len_sect;
 8000a50:	8b7a      	ldrh	r2, [r7, #26]
 8000a52:	8b3b      	ldrh	r3, [r7, #24]
 8000a54:	4413      	add	r3, r2
 8000a56:	837b      	strh	r3, [r7, #26]
			data_len -= len_sect;
 8000a58:	8bba      	ldrh	r2, [r7, #28]
 8000a5a:	8b3b      	ldrh	r3, [r7, #24]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	83bb      	strh	r3, [r7, #28]
	for(i=0;i<=num_sect;i++)
 8000a60:	8bfb      	ldrh	r3, [r7, #30]
 8000a62:	3301      	adds	r3, #1
 8000a64:	83fb      	strh	r3, [r7, #30]
 8000a66:	7d7b      	ldrb	r3, [r7, #21]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	8bfa      	ldrh	r2, [r7, #30]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d9d4      	bls.n	8000a1a <tcp_send_http_first+0xd2>



		}
	//вернем параметры
	httpsockprop[sn].cnt_rem_data_part = last_part;
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4a35      	ldr	r2, [pc, #212]	; (8000b48 <tcp_send_http_first+0x200>)
 8000a74:	212c      	movs	r1, #44	; 0x2c
 8000a76:	fb01 f303 	mul.w	r3, r1, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	330c      	adds	r3, #12
 8000a7e:	8a7a      	ldrh	r2, [r7, #18]
 8000a80:	801a      	strh	r2, [r3, #0]
	httpsockprop[sn].last_data_part_size = last_part_size;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a30      	ldr	r2, [pc, #192]	; (8000b48 <tcp_send_http_first+0x200>)
 8000a86:	212c      	movs	r1, #44	; 0x2c
 8000a88:	fb01 f303 	mul.w	r3, r1, r3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	3308      	adds	r3, #8
 8000a90:	8a3a      	ldrh	r2, [r7, #16]
 8000a92:	801a      	strh	r2, [r3, #0]
	httpsockprop[sn].prt_tp = prt;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4a2c      	ldr	r2, [pc, #176]	; (8000b48 <tcp_send_http_first+0x200>)
 8000a98:	212c      	movs	r1, #44	; 0x2c
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	3315      	adds	r3, #21
 8000aa2:	7bfa      	ldrb	r2, [r7, #15]
 8000aa4:	701a      	strb	r2, [r3, #0]
	//отправим данные
	RecvSocket(sn);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fe39 	bl	8002720 <RecvSocket>
	SendSocket(sn);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fe4b 	bl	800274c <SendSocket>
	//будем считать, что одну часть отправили, поэтому количество оставшихся частей декрементируем
	httpsockprop[sn].cnt_rem_data_part--;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4923      	ldr	r1, [pc, #140]	; (8000b48 <tcp_send_http_first+0x200>)
 8000aba:	222c      	movs	r2, #44	; 0x2c
 8000abc:	fb02 f203 	mul.w	r2, r2, r3
 8000ac0:	440a      	add	r2, r1
 8000ac2:	320c      	adds	r2, #12
 8000ac4:	8812      	ldrh	r2, [r2, #0]
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	b290      	uxth	r0, r2
 8000acc:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <tcp_send_http_first+0x200>)
 8000ace:	212c      	movs	r1, #44	; 0x2c
 8000ad0:	fb01 f303 	mul.w	r3, r1, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	330c      	adds	r3, #12
 8000ad8:	4602      	mov	r2, r0
 8000ada:	801a      	strh	r2, [r3, #0]
	if(httpsockprop[sn].cnt_rem_data_part>1)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <tcp_send_http_first+0x200>)
 8000ae0:	212c      	movs	r1, #44	; 0x2c
 8000ae2:	fb01 f303 	mul.w	r3, r1, r3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	330c      	adds	r3, #12
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d908      	bls.n	8000b04 <tcp_send_http_first+0x1bc>
	{
		httpsockprop[sn].data_stat=DATA_MIDDLE;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <tcp_send_http_first+0x200>)
 8000af6:	212c      	movs	r1, #44	; 0x2c
 8000af8:	fb01 f303 	mul.w	r3, r1, r3
 8000afc:	4413      	add	r3, r2
 8000afe:	2203      	movs	r2, #3
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e007      	b.n	8000b14 <tcp_send_http_first+0x1cc>
	}
	else
	{
		httpsockprop[sn].data_stat=DATA_LAST;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <tcp_send_http_first+0x200>)
 8000b08:	212c      	movs	r1, #44	; 0x2c
 8000b0a:	fb01 f303 	mul.w	r3, r1, r3
 8000b0e:	4413      	add	r3, r2
 8000b10:	2204      	movs	r2, #4
 8000b12:	701a      	strb	r2, [r3, #0]
	}
	//Количество переданных байтов
  httpsockprop[sn].total_count_bytes = tcp_size_wnd - header_len;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <tcp_send_http_first+0x1fc>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	8afb      	ldrh	r3, [r7, #22]
 8000b1e:	1ad2      	subs	r2, r2, r3
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4610      	mov	r0, r2
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <tcp_send_http_first+0x200>)
 8000b26:	212c      	movs	r1, #44	; 0x2c
 8000b28:	fb01 f303 	mul.w	r3, r1, r3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3310      	adds	r3, #16
 8000b30:	6018      	str	r0, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000dfc 	.word	0x20000dfc
 8000b40:	08006388 	.word	0x08006388
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000e00 	.word	0x20000e00
 8000b4c:	20002c77 	.word	0x20002c77
 8000b50:	20002c74 	.word	0x20002c74
 8000b54:	20000f60 	.word	0x20000f60

08000b58 <tcp_send_http_middle>:
//-----------------------------------------------
void tcp_send_http_middle(uint8_t sn)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  uint16_t i=0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	83fb      	strh	r3, [r7, #30]
  uint16_t data_len=0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	83bb      	strh	r3, [r7, #28]
  uint16_t end_point;
  uint8_t num_sect=0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	767b      	strb	r3, [r7, #25]
  uint8_t prt;
  uint16_t len_sect;
  uint16_t last_part, last_part_size;
  uint32_t count_bytes;
	data_len = tcp_size_wnd;
 8000b6e:	4b77      	ldr	r3, [pc, #476]	; (8000d4c <tcp_send_http_middle+0x1f4>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	83bb      	strh	r3, [r7, #28]
	end_point = GetWritePointer(sn);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fe46 	bl	8002808 <GetWritePointer>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	837b      	strh	r3, [r7, #26]
	end_point+=data_len;
 8000b80:	8b7a      	ldrh	r2, [r7, #26]
 8000b82:	8bbb      	ldrh	r3, [r7, #28]
 8000b84:	4413      	add	r3, r2
 8000b86:	837b      	strh	r3, [r7, #26]
	SetWritePointer(sn, end_point);
 8000b88:	8b7a      	ldrh	r2, [r7, #26]
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fe5d 	bl	800284e <SetWritePointer>
	end_point = GetWritePointer(sn);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fe36 	bl	8002808 <GetWritePointer>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	837b      	strh	r3, [r7, #26]
	//сохраним некоторые параметры, а то почему-то они теряются
	last_part = httpsockprop[sn].cnt_rem_data_part;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4a6b      	ldr	r2, [pc, #428]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000ba4:	212c      	movs	r1, #44	; 0x2c
 8000ba6:	fb01 f303 	mul.w	r3, r1, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	330c      	adds	r3, #12
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	82bb      	strh	r3, [r7, #20]
	last_part_size = httpsockprop[sn].last_data_part_size;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4a66      	ldr	r2, [pc, #408]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000bb6:	212c      	movs	r1, #44	; 0x2c
 8000bb8:	fb01 f303 	mul.w	r3, r1, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3308      	adds	r3, #8
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	827b      	strh	r3, [r7, #18]
	count_bytes = httpsockprop[sn].total_count_bytes;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4a62      	ldr	r2, [pc, #392]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000bc8:	212c      	movs	r1, #44	; 0x2c
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	3310      	adds	r3, #16
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
	prt = httpsockprop[sn].prt_tp;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4a5d      	ldr	r2, [pc, #372]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000bda:	212c      	movs	r1, #44	; 0x2c
 8000bdc:	fb01 f303 	mul.w	r3, r1, r3
 8000be0:	4413      	add	r3, r2
 8000be2:	3315      	adds	r3, #21
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	72fb      	strb	r3, [r7, #11]
	//Заполним данными буфер для отправки пакета
	num_sect = data_len / 512;
 8000be8:	8bbb      	ldrh	r3, [r7, #28]
 8000bea:	0a5b      	lsrs	r3, r3, #9
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	767b      	strb	r3, [r7, #25]
	//борьба с неправильным расчётом, когда размер данных делится на размер сектора без остатка
	if(data_len%512==0) num_sect--;
 8000bf0:	8bbb      	ldrh	r3, [r7, #28]
 8000bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <tcp_send_http_middle+0xaa>
 8000bfc:	7e7b      	ldrb	r3, [r7, #25]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	767b      	strb	r3, [r7, #25]
	for(i=0;i<=num_sect;i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	83fb      	strh	r3, [r7, #30]
 8000c06:	e028      	b.n	8000c5a <tcp_send_http_middle+0x102>
			{
				//sprintf(str1,"i=%d\tnum_sect=%d\r\n",i,num_sect);
				//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
				//не последний сектор
				if(i<num_sect) len_sect=512;
 8000c08:	7e7b      	ldrb	r3, [r7, #25]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	8bfa      	ldrh	r2, [r7, #30]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d203      	bcs.n	8000c1a <tcp_send_http_middle+0xc2>
 8000c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c16:	82fb      	strh	r3, [r7, #22]
 8000c18:	e001      	b.n	8000c1e <tcp_send_http_middle+0xc6>
				else len_sect=data_len;
 8000c1a:	8bbb      	ldrh	r3, [r7, #28]
 8000c1c:	82fb      	strh	r3, [r7, #22]

				//sprintf(str1,"data_len=%dlen_sect=%d\t\r\n",data_len,len_sect);
				//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
				memcpy(sect+3,data_send+i*512+count_bytes,len_sect);
 8000c1e:	484d      	ldr	r0, [pc, #308]	; (8000d54 <tcp_send_http_middle+0x1fc>)
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <tcp_send_http_middle+0x200>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	8bfb      	ldrh	r3, [r7, #30]
 8000c26:	025b      	lsls	r3, r3, #9
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	4413      	add	r3, r2
 8000c30:	8afa      	ldrh	r2, [r7, #22]
 8000c32:	4619      	mov	r1, r3
 8000c34:	f004 fe10 	bl	8005858 <memcpy>
				w5500_writeSockBuf(sn, end_point, (uint8_t*)sect, len_sect);
 8000c38:	8afb      	ldrh	r3, [r7, #22]
 8000c3a:	8b79      	ldrh	r1, [r7, #26]
 8000c3c:	79f8      	ldrb	r0, [r7, #7]
 8000c3e:	4a47      	ldr	r2, [pc, #284]	; (8000d5c <tcp_send_http_middle+0x204>)
 8000c40:	f001 fbb8 	bl	80023b4 <w5500_writeSockBuf>
				end_point+=len_sect;
 8000c44:	8b7a      	ldrh	r2, [r7, #26]
 8000c46:	8afb      	ldrh	r3, [r7, #22]
 8000c48:	4413      	add	r3, r2
 8000c4a:	837b      	strh	r3, [r7, #26]
				data_len -= len_sect;
 8000c4c:	8bba      	ldrh	r2, [r7, #28]
 8000c4e:	8afb      	ldrh	r3, [r7, #22]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	83bb      	strh	r3, [r7, #28]
	for(i=0;i<=num_sect;i++)
 8000c54:	8bfb      	ldrh	r3, [r7, #30]
 8000c56:	3301      	adds	r3, #1
 8000c58:	83fb      	strh	r3, [r7, #30]
 8000c5a:	7e7b      	ldrb	r3, [r7, #25]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	8bfa      	ldrh	r2, [r7, #30]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d9d1      	bls.n	8000c08 <tcp_send_http_middle+0xb0>



			}
	//вернем параметры
	httpsockprop[sn].cnt_rem_data_part = last_part;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000c68:	212c      	movs	r1, #44	; 0x2c
 8000c6a:	fb01 f303 	mul.w	r3, r1, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	330c      	adds	r3, #12
 8000c72:	8aba      	ldrh	r2, [r7, #20]
 8000c74:	801a      	strh	r2, [r3, #0]
	httpsockprop[sn].last_data_part_size = last_part_size;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000c7a:	212c      	movs	r1, #44	; 0x2c
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	3308      	adds	r3, #8
 8000c84:	8a7a      	ldrh	r2, [r7, #18]
 8000c86:	801a      	strh	r2, [r3, #0]
	httpsockprop[sn].total_count_bytes = count_bytes;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000c8c:	212c      	movs	r1, #44	; 0x2c
 8000c8e:	fb01 f303 	mul.w	r3, r1, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	3310      	adds	r3, #16
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]
	httpsockprop[sn].prt_tp = prt;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a2c      	ldr	r2, [pc, #176]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000c9e:	212c      	movs	r1, #44	; 0x2c
 8000ca0:	fb01 f303 	mul.w	r3, r1, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3315      	adds	r3, #21
 8000ca8:	7afa      	ldrb	r2, [r7, #11]
 8000caa:	701a      	strb	r2, [r3, #0]
	RecvSocket(sn);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fd36 	bl	8002720 <RecvSocket>
	SendSocket(sn);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fd48 	bl	800274c <SendSocket>
	//будем считать, что одну часть отправили, поэтому количество оставшихся частей декрементируем
	httpsockprop[sn].cnt_rem_data_part--;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4924      	ldr	r1, [pc, #144]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000cc0:	222c      	movs	r2, #44	; 0x2c
 8000cc2:	fb02 f203 	mul.w	r2, r2, r3
 8000cc6:	440a      	add	r2, r1
 8000cc8:	320c      	adds	r2, #12
 8000cca:	8812      	ldrh	r2, [r2, #0]
 8000ccc:	b292      	uxth	r2, r2
 8000cce:	3a01      	subs	r2, #1
 8000cd0:	b290      	uxth	r0, r2
 8000cd2:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000cd4:	212c      	movs	r1, #44	; 0x2c
 8000cd6:	fb01 f303 	mul.w	r3, r1, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	330c      	adds	r3, #12
 8000cde:	4602      	mov	r2, r0
 8000ce0:	801a      	strh	r2, [r3, #0]
	if(httpsockprop[sn].cnt_rem_data_part>1)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000ce6:	212c      	movs	r1, #44	; 0x2c
 8000ce8:	fb01 f303 	mul.w	r3, r1, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	330c      	adds	r3, #12
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d908      	bls.n	8000d0a <tcp_send_http_middle+0x1b2>
	{
		httpsockprop[sn].data_stat=DATA_MIDDLE;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000cfc:	212c      	movs	r1, #44	; 0x2c
 8000cfe:	fb01 f303 	mul.w	r3, r1, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	2203      	movs	r2, #3
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e007      	b.n	8000d1a <tcp_send_http_middle+0x1c2>
	}
	else
	{
		httpsockprop[sn].data_stat=DATA_LAST;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000d0e:	212c      	movs	r1, #44	; 0x2c
 8000d10:	fb01 f303 	mul.w	r3, r1, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	2204      	movs	r2, #4
 8000d18:	701a      	strb	r2, [r3, #0]
	}
	//Количество переданных байтов
	httpsockprop[sn].total_count_bytes += (uint32_t) tcp_size_wnd;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <tcp_send_http_middle+0x1f4>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000d26:	212c      	movs	r1, #44	; 0x2c
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3310      	adds	r3, #16
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4402      	add	r2, r0
 8000d36:	4906      	ldr	r1, [pc, #24]	; (8000d50 <tcp_send_http_middle+0x1f8>)
 8000d38:	202c      	movs	r0, #44	; 0x2c
 8000d3a:	fb00 f303 	mul.w	r3, r0, r3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3310      	adds	r3, #16
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000e00 	.word	0x20000e00
 8000d54:	20002c77 	.word	0x20002c77
 8000d58:	20000f60 	.word	0x20000f60
 8000d5c:	20002c74 	.word	0x20002c74

08000d60 <tcp_send_http_last>:
//-----------------------------------------------
void tcp_send_http_last(uint8_t sn)
{
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  uint16_t i=0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	82fb      	strh	r3, [r7, #22]
  uint16_t data_len=0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	82bb      	strh	r3, [r7, #20]
  uint16_t end_point;
  uint8_t num_sect=0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	747b      	strb	r3, [r7, #17]
  uint16_t len_sect;
	data_len = httpsockprop[sn].last_data_part_size;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a3b      	ldr	r2, [pc, #236]	; (8000e68 <tcp_send_http_last+0x108>)
 8000d7a:	212c      	movs	r1, #44	; 0x2c
 8000d7c:	fb01 f303 	mul.w	r3, r1, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	3308      	adds	r3, #8
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	82bb      	strh	r3, [r7, #20]
	end_point = GetWritePointer(sn);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fd3c 	bl	8002808 <GetWritePointer>
 8000d90:	4603      	mov	r3, r0
 8000d92:	827b      	strh	r3, [r7, #18]
	end_point+=data_len;
 8000d94:	8a7a      	ldrh	r2, [r7, #18]
 8000d96:	8abb      	ldrh	r3, [r7, #20]
 8000d98:	4413      	add	r3, r2
 8000d9a:	827b      	strh	r3, [r7, #18]
	SetWritePointer(sn, end_point);
 8000d9c:	8a7a      	ldrh	r2, [r7, #18]
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fd53 	bl	800284e <SetWritePointer>
	end_point = GetWritePointer(sn);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fd2c 	bl	8002808 <GetWritePointer>
 8000db0:	4603      	mov	r3, r0
 8000db2:	827b      	strh	r3, [r7, #18]
	//Заполним данными буфер для отправки пакета
	num_sect = data_len / 512;
 8000db4:	8abb      	ldrh	r3, [r7, #20]
 8000db6:	0a5b      	lsrs	r3, r3, #9
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	747b      	strb	r3, [r7, #17]
	//борьба с неправильным расчётом, когда размер данных делится на размер сектора без остатка
	if(data_len%512==0) num_sect--;
 8000dbc:	8abb      	ldrh	r3, [r7, #20]
 8000dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <tcp_send_http_last+0x6e>
 8000dc8:	7c7b      	ldrb	r3, [r7, #17]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	747b      	strb	r3, [r7, #17]
	for(i=0;i<=num_sect;i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	82fb      	strh	r3, [r7, #22]
 8000dd2:	e030      	b.n	8000e36 <tcp_send_http_last+0xd6>
				{
					//sprintf(str1,"i=%d\tnum_sect=%d\r\n",i,num_sect);
					//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
					//не последний сектор
					if(i<num_sect) len_sect=512;
 8000dd4:	7c7b      	ldrb	r3, [r7, #17]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	8afa      	ldrh	r2, [r7, #22]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d203      	bcs.n	8000de6 <tcp_send_http_last+0x86>
 8000dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de2:	81fb      	strh	r3, [r7, #14]
 8000de4:	e001      	b.n	8000dea <tcp_send_http_last+0x8a>
					else len_sect=data_len;
 8000de6:	8abb      	ldrh	r3, [r7, #20]
 8000de8:	81fb      	strh	r3, [r7, #14]

					//sprintf(str1,"data_len=%dlen_sect=%d\t\r\n",data_len,len_sect);
					//												HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
					memcpy(sect+3,data_send+i*512+httpsockprop[sn].total_count_bytes,len_sect);
 8000dea:	4d20      	ldr	r5, [pc, #128]	; (8000e6c <tcp_send_http_last+0x10c>)
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <tcp_send_http_last+0x110>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	8afb      	ldrh	r3, [r7, #22]
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	461c      	mov	r4, r3
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	491b      	ldr	r1, [pc, #108]	; (8000e68 <tcp_send_http_last+0x108>)
 8000dfa:	202c      	movs	r0, #44	; 0x2c
 8000dfc:	fb00 f303 	mul.w	r3, r0, r3
 8000e00:	440b      	add	r3, r1
 8000e02:	3310      	adds	r3, #16
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4423      	add	r3, r4
 8000e08:	4413      	add	r3, r2
 8000e0a:	89fa      	ldrh	r2, [r7, #14]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f004 fd22 	bl	8005858 <memcpy>
					w5500_writeSockBuf(sn, end_point, (uint8_t*)sect, len_sect);
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	8a79      	ldrh	r1, [r7, #18]
 8000e18:	79f8      	ldrb	r0, [r7, #7]
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <tcp_send_http_last+0x114>)
 8000e1c:	f001 faca 	bl	80023b4 <w5500_writeSockBuf>
					end_point+=len_sect;
 8000e20:	8a7a      	ldrh	r2, [r7, #18]
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	4413      	add	r3, r2
 8000e26:	827b      	strh	r3, [r7, #18]
					data_len -= len_sect;
 8000e28:	8aba      	ldrh	r2, [r7, #20]
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	82bb      	strh	r3, [r7, #20]
	for(i=0;i<=num_sect;i++)
 8000e30:	8afb      	ldrh	r3, [r7, #22]
 8000e32:	3301      	adds	r3, #1
 8000e34:	82fb      	strh	r3, [r7, #22]
 8000e36:	7c7b      	ldrb	r3, [r7, #17]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	8afa      	ldrh	r2, [r7, #22]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d9c9      	bls.n	8000dd4 <tcp_send_http_last+0x74>



				}
	//отправим данные
	RecvSocket(sn);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fc6c 	bl	8002720 <RecvSocket>
	SendSocket(sn);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fc7e 	bl	800274c <SendSocket>
	httpsockprop[sn].data_stat = DATA_COMPLETED;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <tcp_send_http_last+0x108>)
 8000e54:	212c      	movs	r1, #44	; 0x2c
 8000e56:	fb01 f303 	mul.w	r3, r1, r3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bdb0      	pop	{r4, r5, r7, pc}
 8000e68:	20000e00 	.word	0x20000e00
 8000e6c:	20002c77 	.word	0x20002c77
 8000e70:	20000f60 	.word	0x20000f60
 8000e74:	20002c74 	.word	0x20002c74

08000e78 <http_request>:
//-----------------------------------------------
void http_request(uint8_t sn)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
	reboot_min=0;
 8000e82:	4bb4      	ldr	r3, [pc, #720]	; (8001154 <http_request+0x2dc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
  uint16_t point;
  uint8_t RXbyte;
  uint16_t i=0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	82bb      	strh	r3, [r7, #20]
  char *ss1;
  int ch1='.';
 8000e8c:	232e      	movs	r3, #46	; 0x2e
 8000e8e:	613b      	str	r3, [r7, #16]

  // ищем первый "/" в HTTP заголовке
  point = GetReadPointer(sn);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fc95 	bl	80027c2 <GetReadPointer>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	81fb      	strh	r3, [r7, #14]
  i = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	82bb      	strh	r3, [r7, #20]
  while (RXbyte != (uint8_t)'/')
 8000ea0:	e00d      	b.n	8000ebe <http_request+0x46>
  {
    RXbyte = w5500_readSockBufByte(sn,point+i);
 8000ea2:	89fa      	ldrh	r2, [r7, #14]
 8000ea4:	8abb      	ldrh	r3, [r7, #20]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fb0c 	bl	80024cc <w5500_readSockBufByte>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	75fb      	strb	r3, [r7, #23]
    i++;
 8000eb8:	8abb      	ldrh	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	82bb      	strh	r3, [r7, #20]
  while (RXbyte != (uint8_t)'/')
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ec2:	d1ee      	bne.n	8000ea2 <http_request+0x2a>
  }
	point+=i;
 8000ec4:	89fa      	ldrh	r2, [r7, #14]
 8000ec6:	8abb      	ldrh	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	81fb      	strh	r3, [r7, #14]
	RXbyte = w5500_readSockBufByte(sn,point);
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fafa 	bl	80024cc <w5500_readSockBufByte>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	75fb      	strb	r3, [r7, #23]
	if(RXbyte==(uint8_t)' ')
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	2b20      	cmp	r3, #32
 8000ee0:	d119      	bne.n	8000f16 <http_request+0x9e>
	{
		strcpy(httpsockprop[sn].fname,"index.htm");
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	222c      	movs	r2, #44	; 0x2c
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	3310      	adds	r3, #16
 8000eec:	4a9a      	ldr	r2, [pc, #616]	; (8001158 <http_request+0x2e0>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	3306      	adds	r3, #6
 8000ef2:	499a      	ldr	r1, [pc, #616]	; (800115c <http_request+0x2e4>)
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	cb03      	ldmia	r3!, {r0, r1}
 8000efa:	6010      	str	r0, [r2, #0]
 8000efc:	6051      	str	r1, [r2, #4]
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	8113      	strh	r3, [r2, #8]
		httpsockprop[sn].http_doc = EXISTING_HTML;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4a94      	ldr	r2, [pc, #592]	; (8001158 <http_request+0x2e0>)
 8000f06:	212c      	movs	r1, #44	; 0x2c
 8000f08:	fb01 f303 	mul.w	r3, r1, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3314      	adds	r3, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e029      	b.n	8000f6a <http_request+0xf2>
	}
	else
	{
		// ищем следующий пробел (" ") в HTTP заголовке, таким образом считывая имя документа из запроса
		i=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	82bb      	strh	r3, [r7, #20]
		while (1)
		{
			tmpbuf[i] = w5500_readSockBufByte(sn, point+i);
 8000f1a:	89fa      	ldrh	r2, [r7, #14]
 8000f1c:	8abb      	ldrh	r3, [r7, #20]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	8abc      	ldrh	r4, [r7, #20]
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 facf 	bl	80024cc <w5500_readSockBufByte>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b8b      	ldr	r3, [pc, #556]	; (8001160 <http_request+0x2e8>)
 8000f34:	551a      	strb	r2, [r3, r4]
			if(tmpbuf[i] == (uint8_t)' ') break;
 8000f36:	8abb      	ldrh	r3, [r7, #20]
 8000f38:	4a89      	ldr	r2, [pc, #548]	; (8001160 <http_request+0x2e8>)
 8000f3a:	5cd3      	ldrb	r3, [r2, r3]
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d003      	beq.n	8000f48 <http_request+0xd0>
			i++;
 8000f40:	8abb      	ldrh	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	82bb      	strh	r3, [r7, #20]
			tmpbuf[i] = w5500_readSockBufByte(sn, point+i);
 8000f46:	e7e8      	b.n	8000f1a <http_request+0xa2>
			if(tmpbuf[i] == (uint8_t)' ') break;
 8000f48:	bf00      	nop
		}
		tmpbuf[i] = 0; //закончим строку
 8000f4a:	8abb      	ldrh	r3, [r7, #20]
 8000f4c:	4a84      	ldr	r2, [pc, #528]	; (8001160 <http_request+0x2e8>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	54d1      	strb	r1, [r2, r3]
		strcpy(httpsockprop[sn].fname,tmpbuf);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	222c      	movs	r2, #44	; 0x2c
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	4a7e      	ldr	r2, [pc, #504]	; (8001158 <http_request+0x2e0>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	3306      	adds	r3, #6
 8000f62:	497f      	ldr	r1, [pc, #508]	; (8001160 <http_request+0x2e8>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 fcb8 	bl	80058da <strcpy>

	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	if (1)
	{
		//изучим расширение файла
		ss1 = strchr(httpsockprop[sn].fname,ch1);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	222c      	movs	r2, #44	; 0x2c
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	3310      	adds	r3, #16
 8000f74:	4a78      	ldr	r2, [pc, #480]	; (8001158 <http_request+0x2e0>)
 8000f76:	4413      	add	r3, r2
 8000f78:	3306      	adds	r3, #6
 8000f7a:	6939      	ldr	r1, [r7, #16]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fc9f 	bl	80058c0 <strchr>
 8000f82:	60b8      	str	r0, [r7, #8]
		ss1++;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3301      	adds	r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
		if (strncmp(ss1,"jpg", 3) == 0)
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4975      	ldr	r1, [pc, #468]	; (8001164 <http_request+0x2ec>)
 8000f8e:	68b8      	ldr	r0, [r7, #8]
 8000f90:	f004 fcab 	bl	80058ea <strncmp>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d111      	bne.n	8000fbe <http_request+0x146>
		{
			httpsockprop[sn].http_doc = EXISTING_JPG;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4a6e      	ldr	r2, [pc, #440]	; (8001158 <http_request+0x2e0>)
 8000f9e:	212c      	movs	r1, #44	; 0x2c
 8000fa0:	fb01 f303 	mul.w	r3, r1, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	2202      	movs	r2, #2
 8000faa:	701a      	strb	r2, [r3, #0]
			//сначала включаем в размер размер заголовка
			httpsockprop[sn].data_size = strlen(jpg_header);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a6a      	ldr	r2, [pc, #424]	; (8001158 <http_request+0x2e0>)
 8000fb0:	212c      	movs	r1, #44	; 0x2c
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3304      	adds	r3, #4
 8000fba:	224f      	movs	r2, #79	; 0x4f
 8000fbc:	601a      	str	r2, [r3, #0]
		}
		if (strncmp(ss1,"ico", 3) == 0)
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4969      	ldr	r1, [pc, #420]	; (8001168 <http_request+0x2f0>)
 8000fc2:	68b8      	ldr	r0, [r7, #8]
 8000fc4:	f004 fc91 	bl	80058ea <strncmp>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d112      	bne.n	8000ff4 <http_request+0x17c>
		{
			httpsockprop[sn].http_doc = EXISTING_ICO;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4a61      	ldr	r2, [pc, #388]	; (8001158 <http_request+0x2e0>)
 8000fd2:	212c      	movs	r1, #44	; 0x2c
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	3314      	adds	r3, #20
 8000fdc:	2203      	movs	r2, #3
 8000fde:	701a      	strb	r2, [r3, #0]
			//сначала включаем в размер размер заголовка
			httpsockprop[sn].data_size = strlen(icon_header);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4a5d      	ldr	r2, [pc, #372]	; (8001158 <http_request+0x2e0>)
 8000fe4:	212c      	movs	r1, #44	; 0x2c
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	3304      	adds	r3, #4
 8000fee:	222f      	movs	r2, #47	; 0x2f
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e011      	b.n	8001018 <http_request+0x1a0>
		}
		else
		{
			httpsockprop[sn].http_doc = EXISTING_HTML;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a58      	ldr	r2, [pc, #352]	; (8001158 <http_request+0x2e0>)
 8000ff8:	212c      	movs	r1, #44	; 0x2c
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	3314      	adds	r3, #20
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
			//сначала включаем в размер размер заголовка
			httpsockprop[sn].data_size = strlen(http_header);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4a53      	ldr	r2, [pc, #332]	; (8001158 <http_request+0x2e0>)
 800100a:	212c      	movs	r1, #44	; 0x2c
 800100c:	fb01 f303 	mul.w	r3, r1, r3
 8001010:	4413      	add	r3, r2
 8001012:	3304      	adds	r3, #4
 8001014:	222c      	movs	r2, #44	; 0x2c
 8001016:	601a      	str	r2, [r3, #0]
		}
		//затем размер самого документа
		data_send=(void*)JSON_DATA_SEND;
 8001018:	4b54      	ldr	r3, [pc, #336]	; (800116c <http_request+0x2f4>)
 800101a:	4a55      	ldr	r2, [pc, #340]	; (8001170 <http_request+0x2f8>)
 800101c:	601a      	str	r2, [r3, #0]
		httpsockprop[sn].data_size += strlen(data_send);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <http_request+0x2e0>)
 8001022:	212c      	movs	r1, #44	; 0x2c
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	4413      	add	r3, r2
 800102a:	3304      	adds	r3, #4
 800102c:	681c      	ldr	r4, [r3, #0]
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <http_request+0x2f4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f88a 	bl	800014c <strlen>
 8001038:	4602      	mov	r2, r0
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4422      	add	r2, r4
 800103e:	4946      	ldr	r1, [pc, #280]	; (8001158 <http_request+0x2e0>)
 8001040:	202c      	movs	r0, #44	; 0x2c
 8001042:	fb00 f303 	mul.w	r3, r0, r3
 8001046:	440b      	add	r3, r1
 8001048:	3304      	adds	r3, #4
 800104a:	601a      	str	r2, [r3, #0]
		//сначала включаем в размер размер заголовка
		httpsockprop[sn].data_size = strlen(error_header);
		//затем размер самого документа
		httpsockprop[sn].data_size += sizeof(e404_htm);
	}
	httpsockprop[sn].cnt_rem_data_part = httpsockprop[sn].data_size / tcp_size_wnd + 1;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4a42      	ldr	r2, [pc, #264]	; (8001158 <http_request+0x2e0>)
 8001050:	212c      	movs	r1, #44	; 0x2c
 8001052:	fb01 f303 	mul.w	r3, r1, r3
 8001056:	4413      	add	r3, r2
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <http_request+0x2fc>)
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	b292      	uxth	r2, r2
 8001062:	fbb3 f3f2 	udiv	r3, r3, r2
 8001066:	b29a      	uxth	r2, r3
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3201      	adds	r2, #1
 800106c:	b290      	uxth	r0, r2
 800106e:	4a3a      	ldr	r2, [pc, #232]	; (8001158 <http_request+0x2e0>)
 8001070:	212c      	movs	r1, #44	; 0x2c
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	4413      	add	r3, r2
 8001078:	330c      	adds	r3, #12
 800107a:	4602      	mov	r2, r0
 800107c:	801a      	strh	r2, [r3, #0]
	httpsockprop[sn].last_data_part_size = httpsockprop[sn].data_size % tcp_size_wnd;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a35      	ldr	r2, [pc, #212]	; (8001158 <http_request+0x2e0>)
 8001082:	212c      	movs	r1, #44	; 0x2c
 8001084:	fb01 f303 	mul.w	r3, r1, r3
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a39      	ldr	r2, [pc, #228]	; (8001174 <http_request+0x2fc>)
 8001090:	8812      	ldrh	r2, [r2, #0]
 8001092:	b292      	uxth	r2, r2
 8001094:	fbb3 f1f2 	udiv	r1, r3, r2
 8001098:	fb02 f201 	mul.w	r2, r2, r1
 800109c:	1a9a      	subs	r2, r3, r2
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b290      	uxth	r0, r2
 80010a2:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <http_request+0x2e0>)
 80010a4:	212c      	movs	r1, #44	; 0x2c
 80010a6:	fb01 f303 	mul.w	r3, r1, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	3308      	adds	r3, #8
 80010ae:	4602      	mov	r2, r0
 80010b0:	801a      	strh	r2, [r3, #0]
	//борьба с неправильным расчётом, когда общий размер делится на минимальный размер окна без остатка
	if(httpsockprop[sn].last_data_part_size==0)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a28      	ldr	r2, [pc, #160]	; (8001158 <http_request+0x2e0>)
 80010b6:	212c      	movs	r1, #44	; 0x2c
 80010b8:	fb01 f303 	mul.w	r3, r1, r3
 80010bc:	4413      	add	r3, r2
 80010be:	3308      	adds	r3, #8
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d11e      	bne.n	8001106 <http_request+0x28e>
	{
		httpsockprop[sn].last_data_part_size=tcp_size_wnd;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <http_request+0x2fc>)
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	b290      	uxth	r0, r2
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <http_request+0x2e0>)
 80010d2:	212c      	movs	r1, #44	; 0x2c
 80010d4:	fb01 f303 	mul.w	r3, r1, r3
 80010d8:	4413      	add	r3, r2
 80010da:	3308      	adds	r3, #8
 80010dc:	4602      	mov	r2, r0
 80010de:	801a      	strh	r2, [r3, #0]
		httpsockprop[sn].cnt_rem_data_part--;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	491d      	ldr	r1, [pc, #116]	; (8001158 <http_request+0x2e0>)
 80010e4:	222c      	movs	r2, #44	; 0x2c
 80010e6:	fb02 f203 	mul.w	r2, r2, r3
 80010ea:	440a      	add	r2, r1
 80010ec:	320c      	adds	r2, #12
 80010ee:	8812      	ldrh	r2, [r2, #0]
 80010f0:	b292      	uxth	r2, r2
 80010f2:	3a01      	subs	r2, #1
 80010f4:	b290      	uxth	r0, r2
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <http_request+0x2e0>)
 80010f8:	212c      	movs	r1, #44	; 0x2c
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	4413      	add	r3, r2
 8001100:	330c      	adds	r3, #12
 8001102:	4602      	mov	r2, r0
 8001104:	801a      	strh	r2, [r3, #0]
	}
	httpsockprop[sn].cnt_data_part = httpsockprop[sn].cnt_rem_data_part;
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4913      	ldr	r1, [pc, #76]	; (8001158 <http_request+0x2e0>)
 800110c:	202c      	movs	r0, #44	; 0x2c
 800110e:	fb00 f202 	mul.w	r2, r0, r2
 8001112:	440a      	add	r2, r1
 8001114:	320c      	adds	r2, #12
 8001116:	8812      	ldrh	r2, [r2, #0]
 8001118:	b290      	uxth	r0, r2
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <http_request+0x2e0>)
 800111c:	212c      	movs	r1, #44	; 0x2c
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4413      	add	r3, r2
 8001124:	330a      	adds	r3, #10
 8001126:	4602      	mov	r2, r0
 8001128:	801a      	strh	r2, [r3, #0]
	//sprintf(str1,"data size:%lu; cnt data part:%u; last_data_part_size:%u\r\n",
	//(unsigned long)httpsockprop[sn].data_size, httpsockprop[sn].cnt_rem_data_part, httpsockprop[sn].last_data_part_size);
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	if (httpsockprop[sn].cnt_rem_data_part==1)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <http_request+0x2e0>)
 800112e:	212c      	movs	r1, #44	; 0x2c
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	330c      	adds	r3, #12
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d11b      	bne.n	8001178 <http_request+0x300>
	{
		httpsockprop[sn].data_stat = DATA_ONE;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <http_request+0x2e0>)
 8001144:	212c      	movs	r1, #44	; 0x2c
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	4413      	add	r3, r2
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e025      	b.n	800119e <http_request+0x326>
 8001152:	bf00      	nop
 8001154:	20000df0 	.word	0x20000df0
 8001158:	20000e00 	.word	0x20000e00
 800115c:	0800618c 	.word	0x0800618c
 8001160:	20002c54 	.word	0x20002c54
 8001164:	08006198 	.word	0x08006198
 8001168:	0800619c 	.word	0x0800619c
 800116c:	20000f60 	.word	0x20000f60
 8001170:	200011c4 	.word	0x200011c4
 8001174:	20000000 	.word	0x20000000
	}
	else if (httpsockprop[sn].cnt_rem_data_part>1)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4a26      	ldr	r2, [pc, #152]	; (8001214 <http_request+0x39c>)
 800117c:	212c      	movs	r1, #44	; 0x2c
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	330c      	adds	r3, #12
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d907      	bls.n	800119e <http_request+0x326>
	{
		httpsockprop[sn].data_stat = DATA_FIRST;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4a20      	ldr	r2, [pc, #128]	; (8001214 <http_request+0x39c>)
 8001192:	212c      	movs	r1, #44	; 0x2c
 8001194:	fb01 f303 	mul.w	r3, r1, r3
 8001198:	4413      	add	r3, r2
 800119a:	2202      	movs	r2, #2
 800119c:	701a      	strb	r2, [r3, #0]
	}
	if(httpsockprop[sn].data_stat==DATA_ONE)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <http_request+0x39c>)
 80011a2:	212c      	movs	r1, #44	; 0x2c
 80011a4:	fb01 f303 	mul.w	r3, r1, r3
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d11d      	bne.n	80011ee <http_request+0x376>
	{
		 tcp_send_http_one(sn);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fb2b 	bl	8000810 <tcp_send_http_one>
		DisconnectSocket(sn); //Разъединяемся
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fa7d 	bl	80026bc <DisconnectSocket>
		SocketClosedWait(sn);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fa5d 	bl	8002684 <SocketClosedWait>
		OpenSocket(sn,Mode_TCP);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2101      	movs	r1, #1
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 f9e6 	bl	80025a0 <OpenSocket>
		//Ждём инициализации сокета (статус SOCK_INIT)
		SocketInitWait(sn);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fa04 	bl	80025e4 <SocketInitWait>
		//Продолжаем слушать сокет
		ListenSocket(sn);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fa1c 	bl	800261c <ListenSocket>
		SocketListenWait(sn);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fa30 	bl	800264c <SocketListenWait>
	}
	else if(httpsockprop[sn].data_stat==DATA_FIRST)
	{
		tcp_send_http_first(sn);
	}
}
 80011ec:	e00d      	b.n	800120a <http_request+0x392>
	else if(httpsockprop[sn].data_stat==DATA_FIRST)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <http_request+0x39c>)
 80011f2:	212c      	movs	r1, #44	; 0x2c
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d103      	bne.n	800120a <http_request+0x392>
		tcp_send_http_first(sn);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fb9f 	bl	8000948 <tcp_send_http_first>
}
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	bf00      	nop
 8001214:	20000e00 	.word	0x20000e00

08001218 <jwOpen>:
// - initialise with user string buffer of length buflen
// - isPretty=JW_PRETTY adds \n and spaces to prettify output (else JW_COMPACT)
//
void jwOpen( JWC_DECL char *buffer, unsigned int buflen,
				   enum jwNodeType rootType, int isPretty )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	71fb      	strb	r3, [r7, #7]
	memset( buffer, 0, buflen );	// zap the whole destination buffer
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	2100      	movs	r1, #0
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f004 fb1e 	bl	800586e <memset>
	JWC(buffer)= buffer;
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <jwOpen+0x70>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6013      	str	r3, [r2, #0]
	JWC(buflen)= buflen;
 8001238:	4a13      	ldr	r2, [pc, #76]	; (8001288 <jwOpen+0x70>)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	6053      	str	r3, [r2, #4]
	JWC(bufp)= buffer;
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <jwOpen+0x70>)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6093      	str	r3, [r2, #8]
	JWC(nodeStack)[0].nodeType= rootType;
 8001244:	4a10      	ldr	r2, [pc, #64]	; (8001288 <jwOpen+0x70>)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	JWC(nodeStack)[0].elementNo= 0;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <jwOpen+0x70>)
 800124e:	2200      	movs	r2, #0
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
	JWC(stackpos)=0;
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <jwOpen+0x70>)
 8001254:	2200      	movs	r2, #0
 8001256:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	JWC(error)= JWRITE_OK;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <jwOpen+0x70>)
 800125c:	2200      	movs	r2, #0
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
	JWC(callNo)= 1;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <jwOpen+0x70>)
 8001262:	2201      	movs	r2, #1
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
	JWC(isPretty)= isPretty;
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <jwOpen+0x70>)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	jwPutch( JWC_PARAM (rootType==JW_OBJECT) ? '{' : '[' );
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <jwOpen+0x60>
 8001274:	237b      	movs	r3, #123	; 0x7b
 8001276:	e000      	b.n	800127a <jwOpen+0x62>
 8001278:	235b      	movs	r3, #91	; 0x5b
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f932 	bl	80014e4 <jwPutch>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000f64 	.word	0x20000f64

0800128c <jwClose>:
// jwClose
// - closes the root JSON object started by jwOpen()
// - returns error code
//
int jwClose( JWC_DECL0 )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	if( JWC(error) == JWRITE_OK )
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <jwClose+0x58>)
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	2b00      	cmp	r3, #0
 8001298:	d11d      	bne.n	80012d6 <jwClose+0x4a>
	{
		if( JWC(stackpos) == 0 )
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <jwClose+0x58>)
 800129c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d115      	bne.n	80012d0 <jwClose+0x44>
		{
			enum jwNodeType node= JWC(nodeStack)[0].nodeType;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <jwClose+0x58>)
 80012a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012aa:	71fb      	strb	r3, [r7, #7]
			if( JWC(isPretty) )
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <jwClose+0x58>)
 80012ae:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <jwClose+0x30>
				jwPutch( JWC_PARAM '\n' );
 80012b6:	200a      	movs	r0, #10
 80012b8:	f000 f914 	bl	80014e4 <jwPutch>
			jwPutch( JWC_PARAM (node == JW_OBJECT) ? '}' : ']');
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <jwClose+0x3a>
 80012c2:	237d      	movs	r3, #125	; 0x7d
 80012c4:	e000      	b.n	80012c8 <jwClose+0x3c>
 80012c6:	235d      	movs	r3, #93	; 0x5d
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f90b 	bl	80014e4 <jwPutch>
 80012ce:	e002      	b.n	80012d6 <jwClose+0x4a>
		}else{
			JWC(error)= JWRITE_NEST_ERROR;	// nesting error, not all objects closed when jwClose() called
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <jwClose+0x58>)
 80012d2:	2206      	movs	r2, #6
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return JWC(error);
 80012d6:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <jwClose+0x58>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000f64 	.word	0x20000f64

080012e8 <jwEnd>:

//------------------------------------------
// End the current array/object
//
int jwEnd( JWC_DECL0 )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	if( JWC(error) == JWRITE_OK )
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <jwEnd+0x50>)
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d11a      	bne.n	800132c <jwEnd+0x44>
	{
		enum jwNodeType node;
		int lastElemNo= JWC(nodeStack)[JWC(stackpos)].elementNo;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <jwEnd+0x50>)
 80012f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <jwEnd+0x50>)
 80012fe:	3306      	adds	r3, #6
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	607b      	str	r3, [r7, #4]
		node= jwPop( JWC_PARAM0 );
 8001308:	f000 f8c8 	bl	800149c <jwPop>
 800130c:	4603      	mov	r3, r0
 800130e:	70fb      	strb	r3, [r7, #3]
		if( lastElemNo > 0 )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	dd01      	ble.n	800131a <jwEnd+0x32>
			jwPretty( JWC_PARAM0 );
 8001316:	f000 f86d 	bl	80013f4 <jwPretty>
		jwPutch( JWC_PARAM (node == JW_OBJECT) ? '}' : ']');
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <jwEnd+0x3c>
 8001320:	237d      	movs	r3, #125	; 0x7d
 8001322:	e000      	b.n	8001326 <jwEnd+0x3e>
 8001324:	235d      	movs	r3, #93	; 0x5d
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f8dc 	bl	80014e4 <jwPutch>
	}
	return JWC(error);
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <jwEnd+0x50>)
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000f64 	.word	0x20000f64

0800133c <jwObj_raw>:
int _jwObj( JWC_DECL char *key );

// put raw string to object (i.e. contents of rawtext without quotes)
//
void jwObj_raw( JWC_DECL char *key, char *rawtext )
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	if(_jwObj( JWC_PARAM key ) == JWRITE_OK)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f91c 	bl	8001584 <_jwObj>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <jwObj_raw+0x1c>
		jwPutraw( JWC_PARAM rawtext);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f000 f902 	bl	800155c <jwPutraw>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <jwObj_string>:

// put "quoted" string to object
//
void jwObj_string( JWC_DECL char *key, char *value )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	if(_jwObj( JWC_PARAM key ) == JWRITE_OK)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f90a 	bl	8001584 <_jwObj>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <jwObj_string+0x1c>
		jwPutstr( JWC_PARAM value );
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f000 f8d6 	bl	8001528 <jwPutstr>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <jwObj_int>:

void jwObj_int( JWC_DECL char *key, int value )
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	modp_itoa10( value, JWC(tmpbuf) );
 800138e:	4906      	ldr	r1, [pc, #24]	; (80013a8 <jwObj_int+0x24>)
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f000 f98f 	bl	80016b4 <modp_itoa10>
	jwObj_raw( JWC_PARAM key, JWC(tmpbuf) );
 8001396:	4904      	ldr	r1, [pc, #16]	; (80013a8 <jwObj_int+0x24>)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffcf 	bl	800133c <jwObj_raw>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000f70 	.word	0x20000f70

080013ac <jwObj_array>:
}

// put Array in Object
//
void jwObj_array( JWC_DECL char *key )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	if(_jwObj( JWC_PARAM key ) == JWRITE_OK)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f8e5 	bl	8001584 <_jwObj>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <jwObj_array+0x20>
	{
		jwPutch( JWC_PARAM '[' );
 80013c0:	205b      	movs	r0, #91	; 0x5b
 80013c2:	f000 f88f 	bl	80014e4 <jwPutch>
		jwPush( JWC_PARAM JW_ARRAY );
 80013c6:	2002      	movs	r0, #2
 80013c8:	f000 f838 	bl	800143c <jwPush>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <jwArr_object>:
{
	jwArr_raw( JWC_PARAM  "null" );
}

void jwArr_object( JWC_DECL0 )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	if(_jwArr( JWC_PARAM0 ) == JWRITE_OK)
 80013d8:	f000 f91a 	bl	8001610 <_jwArr>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <jwArr_object+0x1a>
	{
		jwPutch( JWC_PARAM '{' );
 80013e2:	207b      	movs	r0, #123	; 0x7b
 80013e4:	f000 f87e 	bl	80014e4 <jwPutch>
		jwPush( JWC_PARAM JW_OBJECT );
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 f827 	bl	800143c <jwPush>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <jwPretty>:

//============================================================================
// Internal functions
//
void jwPretty( JWC_DECL0 )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	int i;
	if( JWC(isPretty) )
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <jwPretty+0x40>)
 80013fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <jwPretty+0x36>
	{
		jwPutch( JWC_PARAM '\n' );
 8001404:	200a      	movs	r0, #10
 8001406:	f000 f86d 	bl	80014e4 <jwPutch>
		for( i=0; i<JWC(stackpos)+1; i++ )
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e005      	b.n	800141c <jwPretty+0x28>
			jwPutraw( JWC_PARAM "    " );
 8001410:	4809      	ldr	r0, [pc, #36]	; (8001438 <jwPretty+0x44>)
 8001412:	f000 f8a3 	bl	800155c <jwPutraw>
		for( i=0; i<JWC(stackpos)+1; i++ )
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <jwPretty+0x40>)
 800141e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001422:	3301      	adds	r3, #1
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf2      	blt.n	8001410 <jwPretty+0x1c>
	}
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000f64 	.word	0x20000f64
 8001438:	080062c4 	.word	0x080062c4

0800143c <jwPush>:

// Push / Pop node stack
//
void jwPush( JWC_DECL enum jwNodeType nodeType )
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
	if( (JWC(stackpos)+1) >= JWRITE_STACK_DEPTH )
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <jwPush+0x5c>)
 8001448:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800144c:	3301      	adds	r3, #1
 800144e:	2b1f      	cmp	r3, #31
 8001450:	dd03      	ble.n	800145a <jwPush+0x1e>
		JWC(error)= JWRITE_STACK_FULL;		// array/object nesting > JWRITE_STACK_DEPTH
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <jwPush+0x5c>)
 8001454:	2204      	movs	r2, #4
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
	else
	{
		JWC(nodeStack[++JWC(stackpos)]).nodeType= nodeType;
		JWC(nodeStack[JWC(stackpos)]).elementNo= 0;
	}
}
 8001458:	e018      	b.n	800148c <jwPush+0x50>
		JWC(nodeStack[++JWC(stackpos)]).nodeType= nodeType;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <jwPush+0x5c>)
 800145c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001460:	3301      	adds	r3, #1
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <jwPush+0x5c>)
 8001464:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <jwPush+0x5c>)
 800146a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <jwPush+0x5c>)
 8001470:	3306      	adds	r3, #6
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	711a      	strb	r2, [r3, #4]
		JWC(nodeStack[JWC(stackpos)]).elementNo= 0;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <jwPush+0x5c>)
 800147c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <jwPush+0x5c>)
 8001482:	3306      	adds	r3, #6
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000f64 	.word	0x20000f64

0800149c <jwPop>:

enum jwNodeType jwPop( JWC_DECL0 )
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
	enum jwNodeType retval= JWC(nodeStack[JWC(stackpos)]).nodeType;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <jwPop+0x44>)
 80014a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <jwPop+0x44>)
 80014aa:	3306      	adds	r3, #6
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	791b      	ldrb	r3, [r3, #4]
 80014b2:	71fb      	strb	r3, [r7, #7]
	if( JWC(stackpos) == 0 )
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <jwPop+0x44>)
 80014b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d103      	bne.n	80014c6 <jwPop+0x2a>
		JWC(error)= JWRITE_STACK_EMPTY;		// stack underflow error (too many 'end's)
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <jwPop+0x44>)
 80014c0:	2205      	movs	r2, #5
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014c4:	e006      	b.n	80014d4 <jwPop+0x38>
	else
		JWC(stackpos)--;
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <jwPop+0x44>)
 80014c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <jwPop+0x44>)
 80014d0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return retval;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000f64 	.word	0x20000f64

080014e4 <jwPutch>:

void jwPutch( JWC_DECL char c )
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	if( (unsigned int)(JWC(bufp) - JWC(buffer)) >= JWC(buflen) )
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <jwPutch+0x40>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <jwPutch+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <jwPutch+0x40>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d303      	bcc.n	800150c <jwPutch+0x28>
	{
		JWC(error)= JWRITE_BUF_FULL;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <jwPutch+0x40>)
 8001506:	2201      	movs	r2, #1
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
	}else{
		*JWC(bufp)++ = c;
	}
}
 800150a:	e006      	b.n	800151a <jwPutch+0x36>
		*JWC(bufp)++ = c;
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <jwPutch+0x40>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	4904      	ldr	r1, [pc, #16]	; (8001524 <jwPutch+0x40>)
 8001514:	608a      	str	r2, [r1, #8]
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000f64 	.word	0x20000f64

08001528 <jwPutstr>:

// put string enclosed in quotes
//
void jwPutstr( JWC_DECL char *str )
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	jwPutch( JWC_PARAM '\"' );
 8001530:	2022      	movs	r0, #34	; 0x22
 8001532:	f7ff ffd7 	bl	80014e4 <jwPutch>
	while( *str != '\0' )
 8001536:	e006      	b.n	8001546 <jwPutstr+0x1e>
		jwPutch( JWC_PARAM *str++ );
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ffcf 	bl	80014e4 <jwPutch>
	while( *str != '\0' )
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f4      	bne.n	8001538 <jwPutstr+0x10>
	jwPutch( JWC_PARAM '\"' );
 800154e:	2022      	movs	r0, #34	; 0x22
 8001550:	f7ff ffc8 	bl	80014e4 <jwPutch>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <jwPutraw>:

// put raw string
//
void jwPutraw( JWC_DECL char *str )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	while( *str != '\0' )
 8001564:	e006      	b.n	8001574 <jwPutraw+0x18>
		jwPutch( JWC_PARAM *str++ );
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ffb8 	bl	80014e4 <jwPutch>
	while( *str != '\0' )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f4      	bne.n	8001566 <jwPutraw+0xa>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_jwObj>:
// - checks current node is OBJECT
// - adds comma if reqd
// - adds "key" :
//
int _jwObj( JWC_DECL char *key )
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	if(JWC(error) == JWRITE_OK)
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <_jwObj+0x88>)
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d135      	bne.n	8001600 <_jwObj+0x7c>
	{
		JWC(callNo)++;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <_jwObj+0x88>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	3301      	adds	r3, #1
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <_jwObj+0x88>)
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
		if( JWC(nodeStack)[JWC(stackpos)].nodeType != JW_OBJECT )
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <_jwObj+0x88>)
 80015a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <_jwObj+0x88>)
 80015a6:	3306      	adds	r3, #6
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	791b      	ldrb	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d003      	beq.n	80015ba <_jwObj+0x36>
			JWC(error)= JWRITE_NOT_OBJECT;			// tried to write Object key/value into Array
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <_jwObj+0x88>)
 80015b4:	2203      	movs	r2, #3
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b8:	e012      	b.n	80015e0 <_jwObj+0x5c>
		else if( JWC(nodeStack)[JWC(stackpos)].elementNo++ > 0 )
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <_jwObj+0x88>)
 80015bc:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <_jwObj+0x88>)
 80015c2:	1d8b      	adds	r3, r1, #6
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	1c50      	adds	r0, r2, #1
 80015cc:	4c0f      	ldr	r4, [pc, #60]	; (800160c <_jwObj+0x88>)
 80015ce:	1d8b      	adds	r3, r1, #6
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4423      	add	r3, r4
 80015d4:	6098      	str	r0, [r3, #8]
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	dd02      	ble.n	80015e0 <_jwObj+0x5c>
			jwPutch( JWC_PARAM ',' );
 80015da:	202c      	movs	r0, #44	; 0x2c
 80015dc:	f7ff ff82 	bl	80014e4 <jwPutch>
		jwPretty( JWC_PARAM0 );
 80015e0:	f7ff ff08 	bl	80013f4 <jwPretty>
		jwPutstr( JWC_PARAM key );
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff9f 	bl	8001528 <jwPutstr>
		jwPutch( JWC_PARAM ':' );
 80015ea:	203a      	movs	r0, #58	; 0x3a
 80015ec:	f7ff ff7a 	bl	80014e4 <jwPutch>
		if( JWC(isPretty) )
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <_jwObj+0x88>)
 80015f2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <_jwObj+0x7c>
			jwPutch( JWC_PARAM ' ' );
 80015fa:	2020      	movs	r0, #32
 80015fc:	f7ff ff72 	bl	80014e4 <jwPutch>
	}
	return JWC(error);
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <_jwObj+0x88>)
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000f64 	.word	0x20000f64

08001610 <_jwArr>:
// - checks error
// - checks current node is ARRAY
// - adds comma if reqd
//
int _jwArr( JWC_DECL0 )
{
 8001610:	b598      	push	{r3, r4, r7, lr}
 8001612:	af00      	add	r7, sp, #0
	if(JWC(error) == JWRITE_OK)
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <_jwArr+0x64>)
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	2b00      	cmp	r3, #0
 800161a:	d127      	bne.n	800166c <_jwArr+0x5c>
	{
		JWC(callNo)++;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_jwArr+0x64>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	3301      	adds	r3, #1
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_jwArr+0x64>)
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
		if( JWC(nodeStack)[JWC(stackpos)].nodeType != JW_ARRAY )
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <_jwArr+0x64>)
 8001628:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <_jwArr+0x64>)
 800162e:	3306      	adds	r3, #6
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d003      	beq.n	8001642 <_jwArr+0x32>
			JWC(error)= JWRITE_NOT_ARRAY;			// tried to write array value into Object
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <_jwArr+0x64>)
 800163c:	2202      	movs	r2, #2
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001640:	e012      	b.n	8001668 <_jwArr+0x58>
		else if( JWC(nodeStack)[JWC(stackpos)].elementNo++ > 0 )
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <_jwArr+0x64>)
 8001644:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <_jwArr+0x64>)
 800164a:	1d8b      	adds	r3, r1, #6
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	1c50      	adds	r0, r2, #1
 8001654:	4c07      	ldr	r4, [pc, #28]	; (8001674 <_jwArr+0x64>)
 8001656:	1d8b      	adds	r3, r1, #6
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4423      	add	r3, r4
 800165c:	6098      	str	r0, [r3, #8]
 800165e:	2a00      	cmp	r2, #0
 8001660:	dd02      	ble.n	8001668 <_jwArr+0x58>
			jwPutch( JWC_PARAM ',' );
 8001662:	202c      	movs	r0, #44	; 0x2c
 8001664:	f7ff ff3e 	bl	80014e4 <jwPutch>
		jwPretty( JWC_PARAM0 );
 8001668:	f7ff fec4 	bl	80013f4 <jwPretty>
	}
	return JWC(error);
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <_jwArr+0x64>)
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd98      	pop	{r3, r4, r7, pc}
 8001674:	20000f64 	.word	0x20000f64

08001678 <strreverse>:
 * Released under the bsd license.
 * </pre>
 */

static void strreverse(char* begin, char* end)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
    char aux;
    while (end > begin)
 8001682:	e00d      	b.n	80016a0 <strreverse+0x28>
        aux = *end, *end-- = *begin, *begin++ = aux;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	603a      	str	r2, [r7, #0]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	701a      	strb	r2, [r3, #0]
    while (end > begin)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8ed      	bhi.n	8001684 <strreverse+0xc>
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <modp_itoa10>:
 *
 * \param[in] value
 * \param[out] buf the output buffer.  Should be 16 chars or more.
 */
void modp_itoa10(int32_t value, char* str)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
    char* wstr=str;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
    // Take care of sign
    unsigned int uvalue = (value < 0) ? -value : value;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bfb8      	it	lt
 80016c8:	425b      	neglt	r3, r3
 80016ca:	60bb      	str	r3, [r7, #8]
    // Conversion. Number is reversed.
    do *wstr++ = (char)(48 + (uvalue % 10)); while(uvalue /= 10);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <modp_itoa10+0x78>)
 80016d0:	fba3 2301 	umull	r2, r3, r3, r1
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	1aca      	subs	r2, r1, r3
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	60f9      	str	r1, [r7, #12]
 80016e8:	3230      	adds	r2, #48	; 0x30
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <modp_itoa10+0x78>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e5      	bne.n	80016cc <modp_itoa10+0x18>
    if (value < 0) *wstr++ = '-';
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	da04      	bge.n	8001710 <modp_itoa10+0x5c>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60fa      	str	r2, [r7, #12]
 800170c:	222d      	movs	r2, #45	; 0x2d
 800170e:	701a      	strb	r2, [r3, #0]
    *wstr='\0';
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]

    // Reverse string
    strreverse(str,wstr-1);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b01      	subs	r3, #1
 800171a:	4619      	mov	r1, r3
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f7ff ffab 	bl	8001678 <strreverse>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	cccccccd 	.word	0xcccccccd

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f001 fa64 	bl	8002c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 f8a8 	bl	800188c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  reboot_min=0;
 800173c:	4b4f      	ldr	r3, [pc, #316]	; (800187c <main+0x14c>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001742:	f000 f9e1 	bl	8001b08 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001746:	f000 f903 	bl	8001950 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800174a:	f000 f989 	bl	8001a60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800174e:	f000 f9b1 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8001752:	f000 f8e3 	bl	800191c <MX_IWDG_Init>
  MX_TIM1_Init();
 8001756:	f000 f931 	bl	80019bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001760:	4847      	ldr	r0, [pc, #284]	; (8001880 <main+0x150>)
 8001762:	f001 fdaf 	bl	80032c4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001766:	2064      	movs	r0, #100	; 0x64
 8001768:	f001 faac 	bl	8002cc4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001772:	4843      	ldr	r0, [pc, #268]	; (8001880 <main+0x150>)
 8001774:	f001 fda6 	bl	80032c4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f001 faa3 	bl	8002cc4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001784:	483e      	ldr	r0, [pc, #248]	; (8001880 <main+0x150>)
 8001786:	f001 fd9d 	bl	80032c4 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 800178a:	2064      	movs	r0, #100	; 0x64
 800178c:	f001 fa9a 	bl	8002cc4 <HAL_Delay>
   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001796:	483a      	ldr	r0, [pc, #232]	; (8001880 <main+0x150>)
 8001798:	f001 fd94 	bl	80032c4 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f001 fa91 	bl	8002cc4 <HAL_Delay>
   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a8:	4835      	ldr	r0, [pc, #212]	; (8001880 <main+0x150>)
 80017aa:	f001 fd8b 	bl	80032c4 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80017ae:	2064      	movs	r0, #100	; 0x64
 80017b0:	f001 fa88 	bl	8002cc4 <HAL_Delay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ba:	4831      	ldr	r0, [pc, #196]	; (8001880 <main+0x150>)
 80017bc:	f001 fd82 	bl	80032c4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80017c0:	2064      	movs	r0, #100	; 0x64
 80017c2:	f001 fa7f 	bl	8002cc4 <HAL_Delay>
  net_ini();
 80017c6:	f000 fae7 	bl	8001d98 <net_ini>


  BLE_init(&huart1);
 80017ca:	482e      	ldr	r0, [pc, #184]	; (8001884 <main+0x154>)
 80017cc:	f7fe fcc6 	bl	800015c <BLE_init>
 // LOGGER_init(huart2);


	HAL_Delay(5000);
 80017d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80017d4:	f001 fa76 	bl	8002cc4 <HAL_Delay>
	BLE_Search_Start();
 80017d8:	f7fe fda8 	bl	800032c <BLE_Search_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 80017dc:	482a      	ldr	r0, [pc, #168]	; (8001888 <main+0x158>)
 80017de:	f002 ff32 	bl	8004646 <HAL_TIM_Base_Start_IT>

	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e8:	4825      	ldr	r0, [pc, #148]	; (8001880 <main+0x150>)
 80017ea:	f001 fd6b 	bl	80032c4 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 80017ee:	2064      	movs	r0, #100	; 0x64
 80017f0:	f001 fa68 	bl	8002cc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fa:	4821      	ldr	r0, [pc, #132]	; (8001880 <main+0x150>)
 80017fc:	f001 fd62 	bl	80032c4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001800:	2064      	movs	r0, #100	; 0x64
 8001802:	f001 fa5f 	bl	8002cc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180c:	481c      	ldr	r0, [pc, #112]	; (8001880 <main+0x150>)
 800180e:	f001 fd59 	bl	80032c4 <HAL_GPIO_WritePin>
	     HAL_Delay(100);
 8001812:	2064      	movs	r0, #100	; 0x64
 8001814:	f001 fa56 	bl	8002cc4 <HAL_Delay>
	   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181e:	4818      	ldr	r0, [pc, #96]	; (8001880 <main+0x150>)
 8001820:	f001 fd50 	bl	80032c4 <HAL_GPIO_WritePin>
	   HAL_Delay(100);
 8001824:	2064      	movs	r0, #100	; 0x64
 8001826:	f001 fa4d 	bl	8002cc4 <HAL_Delay>
	   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <main+0x150>)
 8001832:	f001 fd47 	bl	80032c4 <HAL_GPIO_WritePin>
	      HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	; 0x64
 8001838:	f001 fa44 	bl	8002cc4 <HAL_Delay>
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001842:	480f      	ldr	r0, [pc, #60]	; (8001880 <main+0x150>)
 8001844:	f001 fd3e 	bl	80032c4 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8001848:	2064      	movs	r0, #100	; 0x64
 800184a:	f001 fa3b 	bl	8002cc4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001854:	480a      	ldr	r0, [pc, #40]	; (8001880 <main+0x150>)
 8001856:	f001 fd35 	bl	80032c4 <HAL_GPIO_WritePin>
	    HAL_Delay(70);
 800185a:	2046      	movs	r0, #70	; 0x46
 800185c:	f001 fa32 	bl	8002cc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <main+0x150>)
 8001868:	f001 fd2c 	bl	80032c4 <HAL_GPIO_WritePin>
	  HAL_Delay(70);
 800186c:	2046      	movs	r0, #70	; 0x46
 800186e:	f001 fa29 	bl	8002cc4 <HAL_Delay>

	    BLE_Search_up();
 8001872:	f7fe fd6b 	bl	800034c <BLE_Search_up>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  net_poll();
 8001876:	f000 fa89 	bl	8001d8c <net_poll>
	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800187a:	e7e8      	b.n	800184e <main+0x11e>
 800187c:	20000df0 	.word	0x20000df0
 8001880:	40011000 	.word	0x40011000
 8001884:	200010ac 	.word	0x200010ac
 8001888:	200010ec 	.word	0x200010ec

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b090      	sub	sp, #64	; 0x40
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0318 	add.w	r3, r7, #24
 8001896:	2228      	movs	r2, #40	; 0x28
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f003 ffe7 	bl	800586e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018ae:	2309      	movs	r3, #9
 80018b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018c0:	2301      	movs	r3, #1
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 fd53 	bl	8003384 <HAL_RCC_OscConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80018e4:	f000 fa26 	bl	8001d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2102      	movs	r1, #2
 8001902:	4618      	mov	r0, r3
 8001904:	f001 ffbe 	bl	8003884 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800190e:	f000 fa11 	bl	8001d34 <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	3740      	adds	r7, #64	; 0x40
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_IWDG_Init+0x2c>)
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <MX_IWDG_Init+0x30>)
 8001924:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_IWDG_Init+0x2c>)
 8001928:	2205      	movs	r2, #5
 800192a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_IWDG_Init+0x2c>)
 800192e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001932:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_IWDG_Init+0x2c>)
 8001936:	f001 fcdd 	bl	80032f4 <HAL_IWDG_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001940:	f000 f9f8 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200010a0 	.word	0x200010a0
 800194c:	40003000 	.word	0x40003000

08001950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <MX_SPI1_Init+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_SPI1_Init+0x64>)
 800195c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_SPI1_Init+0x64>)
 800197c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001984:	2208      	movs	r2, #8
 8001986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_SPI1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_SPI1_Init+0x64>)
 800199c:	220a      	movs	r2, #10
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_SPI1_Init+0x64>)
 80019a2:	f002 f90b 	bl	8003bbc <HAL_SPI_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019ac:	f000 f9c2 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000112c 	.word	0x2000112c
 80019b8:	40013000 	.word	0x40013000

080019bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_TIM1_Init+0x9c>)
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <MX_TIM1_Init+0xa0>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_TIM1_Init+0x9c>)
 80019e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_TIM1_Init+0x9c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16480;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_TIM1_Init+0x9c>)
 80019ee:	f244 0260 	movw	r2, #16480	; 0x4060
 80019f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_TIM1_Init+0x9c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_TIM1_Init+0x9c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_TIM1_Init+0x9c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <MX_TIM1_Init+0x9c>)
 8001a08:	f002 fdf2 	bl	80045f0 <HAL_TIM_Base_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a12:	f000 f98f 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM1_Init+0x9c>)
 8001a24:	f002 ff3a 	bl	800489c <HAL_TIM_ConfigClockSource>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a2e:	f000 f981 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM1_Init+0x9c>)
 8001a40:	f003 f900 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a4a:	f000 f973 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200010ec 	.word	0x200010ec
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <MX_USART1_UART_Init+0x50>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a98:	f003 f92a 	bl	8004cf0 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aa2:	f000 f947 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200010ac 	.word	0x200010ac
 8001ab0:	40013800 	.word	0x40013800

08001ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART2_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aec:	f003 f900 	bl	8004cf0 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 f91d 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20001184 	.word	0x20001184
 8001b04:	40004400 	.word	0x40004400

08001b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b3a:	f043 0320 	orr.w	r3, r3, #32
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_GPIO_Init+0xd0>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b82:	4816      	ldr	r0, [pc, #88]	; (8001bdc <MX_GPIO_Init+0xd4>)
 8001b84:	f001 fb9e 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|CS_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b8e:	4814      	ldr	r0, [pc, #80]	; (8001be0 <MX_GPIO_Init+0xd8>)
 8001b90:	f001 fb98 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <MX_GPIO_Init+0xd4>)
 8001bae:	f001 fa2f 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin CS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|CS_Pin;
 8001bb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_GPIO_Init+0xd8>)
 8001bcc:	f001 fa20 	bl	8003010 <HAL_GPIO_Init>

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40010c00 	.word	0x40010c00

08001be4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d118      	bne.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x44>
        {
        	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        	if(reboot_min>=8)//20=5min
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	d90e      	bls.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x38>
        	    {
        			IWDG->KR = 0x00005555U;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c00:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c04:	601a      	str	r2, [r3, #0]
        		    IWDG->PR = IWDG_PRESCALER_4;
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	605a      	str	r2, [r3, #4]
        		    IWDG->KR = 0x00005555U;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c0e:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c12:	601a      	str	r2, [r3, #0]
        		    IWDG->RLR = 0;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
        	    else
        	    {
        	    	reboot_min++;
        	    }
        }
}
 8001c1a:	e005      	b.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x44>
        	    	reboot_min++;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c26:	701a      	strb	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	20000df0 	.word	0x20000df0
 8001c3c:	40003000 	.word	0x40003000

08001c40 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)

{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]



          if(huart == BLE_UART)
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_UART_RxCpltCallback+0x20>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d101      	bne.n	8001c56 <HAL_UART_RxCpltCallback+0x16>
          {
        	  BLE_Callback();
 8001c52:	f7fe fdcb 	bl	80007ec <BLE_Callback>
          }
          UNUSED(huart);
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000dec 	.word	0x20000dec

08001c64 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart){
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]


	  __HAL_UART_CLEAR_OREFLAG (huart);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
	  __HAL_UART_CLEAR_NEFLAG (huart);
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
	  __HAL_UART_CLEAR_FEFLAG (huart);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
	  __HAL_UART_DISABLE_IT (huart, UART_IT_ERR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	615a      	str	r2, [r3, #20]

	///сбросить флаги ошибок
	sprintf(str1,"HAL_UART_ErrorCallback()\r\n");
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_UART_ErrorCallback+0xb8>)
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_UART_ErrorCallback+0xbc>)
 8001cc2:	4615      	mov	r5, r2
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	6028      	str	r0, [r5, #0]
 8001cca:	6069      	str	r1, [r5, #4]
 8001ccc:	60aa      	str	r2, [r5, #8]
 8001cce:	60eb      	str	r3, [r5, #12]
 8001cd0:	cc03      	ldmia	r4!, {r0, r1}
 8001cd2:	6128      	str	r0, [r5, #16]
 8001cd4:	6169      	str	r1, [r5, #20]
 8001cd6:	8823      	ldrh	r3, [r4, #0]
 8001cd8:	78a2      	ldrb	r2, [r4, #2]
 8001cda:	832b      	strh	r3, [r5, #24]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	76ab      	strb	r3, [r5, #26]
						HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001ce0:	480e      	ldr	r0, [pc, #56]	; (8001d1c <HAL_UART_ErrorCallback+0xb8>)
 8001ce2:	f7fe fa33 	bl	800014c <strlen>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	490b      	ldr	r1, [pc, #44]	; (8001d1c <HAL_UART_ErrorCallback+0xb8>)
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <HAL_UART_ErrorCallback+0xc0>)
 8001cf2:	f003 f84a 	bl	8004d8a <HAL_UART_Transmit>
						   if(huart == BLE_UART)
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_UART_ErrorCallback+0xc4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d108      	bne.n	8001d12 <HAL_UART_ErrorCallback+0xae>
						          {
							   RCV_Status= BLE_Recive_CALLBACKERROR;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_UART_ErrorCallback+0xc8>)
 8001d02:	220f      	movs	r2, #15
 8001d04:	701a      	strb	r2, [r3, #0]

						   RCV_Status= BLE_Recive_CALLBACKERROR;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_UART_ErrorCallback+0xc8>)
 8001d08:	220f      	movs	r2, #15
 8001d0a:	701a      	strb	r2, [r3, #0]
						   NadoPodnyat=1;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_UART_ErrorCallback+0xcc>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
						   //HAL_UART_Receive_IT (huart, u8DATUartShortRxBuffer1, 1);
						   }
						   UNUSED(huart);

}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200000ac 	.word	0x200000ac
 8001d20:	080062d0 	.word	0x080062d0
 8001d24:	20001184 	.word	0x20001184
 8001d28:	20000dec 	.word	0x20000dec
 8001d2c:	20000540 	.word	0x20000540
 8001d30:	20000541 	.word	0x20000541

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3e:	4808      	ldr	r0, [pc, #32]	; (8001d60 <Error_Handler+0x2c>)
 8001d40:	f001 fac0 	bl	80032c4 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 8001d44:	200a      	movs	r0, #10
 8001d46:	f000 ffbd 	bl	8002cc4 <HAL_Delay>
		    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <Error_Handler+0x2c>)
 8001d52:	f001 fab7 	bl	80032c4 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 8001d56:	200a      	movs	r0, #10
 8001d58:	f000 ffb4 	bl	8002cc4 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40011000 	.word	0x40011000

08001d64 <packet_receive>:
uint16_t local_port = LOCAL_PORT;
//-----------------------------------------------
char str1[1060]={0};
//-----------------------------------------------
void packet_receive(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i=3;i<8;i++)
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	e006      	b.n	8001d7e <packet_receive+0x1a>
  {
    w5500_packetReceive(i);
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fe6c 	bl	8002a50 <w5500_packetReceive>
  for(i=3;i<8;i++)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d9f5      	bls.n	8001d70 <packet_receive+0xc>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <net_poll>:
//-----------------------------------------------
void net_poll(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  packet_receive();
 8001d90:	f7ff ffe8 	bl	8001d64 <packet_receive>
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <net_ini>:
//-----------------------------------------------
void net_ini(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	w5500_ini();
 8001d9c:	f000 fd7a 	bl	8002894 <w5500_ini>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <ParserBeacons>:

volatile uint32_t __UniqueID = 0x460A3330;


HAL_StatusTypeDef ParserBeacons(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
	char buff[33];
	  jwOpen(JSON_DATA_SEND, MAXANSWERLENGTH, JW_OBJECT, JW_COMPACT );    // open root node as object
 8001daa:	2300      	movs	r3, #0
 8001dac:	2201      	movs	r2, #1
 8001dae:	f641 019c 	movw	r1, #6300	; 0x189c
 8001db2:	4861      	ldr	r0, [pc, #388]	; (8001f38 <ParserBeacons+0x194>)
 8001db4:	f7ff fa30 	bl	8001218 <jwOpen>
	  jwObj_int("uID", __UniqueID);
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <ParserBeacons+0x198>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4860      	ldr	r0, [pc, #384]	; (8001f40 <ParserBeacons+0x19c>)
 8001dc0:	f7ff fae0 	bl	8001384 <jwObj_int>
	  jwObj_int("Count", Beacons.count);
 8001dc4:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <ParserBeacons+0x1a0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	485f      	ldr	r0, [pc, #380]	; (8001f48 <ParserBeacons+0x1a4>)
 8001dcc:	f7ff fada 	bl	8001384 <jwObj_int>
	  jwObj_array("Beacons");
 8001dd0:	485e      	ldr	r0, [pc, #376]	; (8001f4c <ParserBeacons+0x1a8>)
 8001dd2:	f7ff faeb 	bl	80013ac <jwObj_array>
	  int i =0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(i=0;i<Beacons.count; i++){
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dde:	e08f      	b.n	8001f00 <ParserBeacons+0x15c>
		  	jwArr_object("BeaconI");
 8001de0:	485b      	ldr	r0, [pc, #364]	; (8001f50 <ParserBeacons+0x1ac>)
 8001de2:	f7ff faf7 	bl	80013d4 <jwArr_object>
			memcpy(buff,Beacons.BLE_Beacons[i].P0_FactoryID,8);
 8001de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de8:	4613      	mov	r3, r2
 8001dea:	015b      	lsls	r3, r3, #5
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4a54      	ldr	r2, [pc, #336]	; (8001f44 <ParserBeacons+0x1a0>)
 8001df2:	4413      	add	r3, r2
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fd2c 	bl	8005858 <memcpy>
			buff[8]='\0';
 8001e00:	2300      	movs	r3, #0
 8001e02:	733b      	strb	r3, [r7, #12]
			jwObj_string("P0_FactoryID", buff);
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4852      	ldr	r0, [pc, #328]	; (8001f54 <ParserBeacons+0x1b0>)
 8001e0a:	f7ff faa9 	bl	8001360 <jwObj_string>
			memcpy(buff,Beacons.BLE_Beacons[i].P1_iBeacon_UUID,32);
 8001e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e10:	4613      	mov	r3, r2
 8001e12:	015b      	lsls	r3, r3, #5
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	3308      	adds	r3, #8
 8001e1a:	4a4a      	ldr	r2, [pc, #296]	; (8001f44 <ParserBeacons+0x1a0>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	1c59      	adds	r1, r3, #1
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2220      	movs	r2, #32
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fd17 	bl	8005858 <memcpy>
			buff[32]='\0';
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			jwObj_string("P1_iBeacon_UUID", buff);
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4848      	ldr	r0, [pc, #288]	; (8001f58 <ParserBeacons+0x1b4>)
 8001e36:	f7ff fa93 	bl	8001360 <jwObj_string>
			memcpy(buff,Beacons.BLE_Beacons[i].P2_1MajorValue,4);
 8001e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	015b      	lsls	r3, r3, #5
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	3328      	adds	r3, #40	; 0x28
 8001e46:	4a3f      	ldr	r2, [pc, #252]	; (8001f44 <ParserBeacons+0x1a0>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	607b      	str	r3, [r7, #4]
			buff[4]='\0';
 8001e50:	2300      	movs	r3, #0
 8001e52:	723b      	strb	r3, [r7, #8]
			jwObj_string("P2_1MajorValue", buff);
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4840      	ldr	r0, [pc, #256]	; (8001f5c <ParserBeacons+0x1b8>)
 8001e5a:	f7ff fa81 	bl	8001360 <jwObj_string>
			memcpy(buff,Beacons.BLE_Beacons[i].P2_2MinorValue,4);
 8001e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e60:	4613      	mov	r3, r2
 8001e62:	015b      	lsls	r3, r3, #5
 8001e64:	4413      	add	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	3328      	adds	r3, #40	; 0x28
 8001e6a:	4a36      	ldr	r2, [pc, #216]	; (8001f44 <ParserBeacons+0x1a0>)
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3305      	adds	r3, #5
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	607b      	str	r3, [r7, #4]
			buff[4]='\0';
 8001e74:	2300      	movs	r3, #0
 8001e76:	723b      	strb	r3, [r7, #8]
			jwObj_string("P2_2MinorValue", buff);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4838      	ldr	r0, [pc, #224]	; (8001f60 <ParserBeacons+0x1bc>)
 8001e7e:	f7ff fa6f 	bl	8001360 <jwObj_string>
			memcpy(buff,Beacons.BLE_Beacons[i].P2_3MeasuredPower,2);
 8001e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e84:	4613      	mov	r3, r2
 8001e86:	015b      	lsls	r3, r3, #5
 8001e88:	4413      	add	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	3330      	adds	r3, #48	; 0x30
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <ParserBeacons+0x1a0>)
 8001e90:	4413      	add	r3, r2
 8001e92:	3301      	adds	r3, #1
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	80bb      	strh	r3, [r7, #4]
			buff[2]='\0';
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71bb      	strb	r3, [r7, #6]
			jwObj_string("P2_3MeasuredPower", buff);
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4830      	ldr	r0, [pc, #192]	; (8001f64 <ParserBeacons+0x1c0>)
 8001ea4:	f7ff fa5c 	bl	8001360 <jwObj_string>
			memcpy(buff,Beacons.BLE_Beacons[i].P3_MAC,12);
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eaa:	4613      	mov	r3, r2
 8001eac:	015b      	lsls	r3, r3, #5
 8001eae:	4413      	add	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	3330      	adds	r3, #48	; 0x30
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <ParserBeacons+0x1a0>)
 8001eb6:	4413      	add	r3, r2
 8001eb8:	1cd9      	adds	r1, r3, #3
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fcca 	bl	8005858 <memcpy>
			buff[12]='\0';
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	743b      	strb	r3, [r7, #16]
			jwObj_string("P3_MAC", buff);
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4826      	ldr	r0, [pc, #152]	; (8001f68 <ParserBeacons+0x1c4>)
 8001ece:	f7ff fa47 	bl	8001360 <jwObj_string>
			memcpy(buff,Beacons.BLE_Beacons[i].P4_RSSI,4);
 8001ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	015b      	lsls	r3, r3, #5
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	3338      	adds	r3, #56	; 0x38
 8001ede:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <ParserBeacons+0x1a0>)
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	607b      	str	r3, [r7, #4]
			buff[4]='\0';
 8001ee8:	2300      	movs	r3, #0
 8001eea:	723b      	strb	r3, [r7, #8]
			jwObj_string("P4_RSSI", buff);
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	481e      	ldr	r0, [pc, #120]	; (8001f6c <ParserBeacons+0x1c8>)
 8001ef2:	f7ff fa35 	bl	8001360 <jwObj_string>
			jwEnd();
 8001ef6:	f7ff f9f7 	bl	80012e8 <jwEnd>
		for(i=0;i<Beacons.count; i++){
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	3301      	adds	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <ParserBeacons+0x1a0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	f6ff af69 	blt.w	8001de0 <ParserBeacons+0x3c>
		}
	  jwEnd();
 8001f0e:	f7ff f9eb 	bl	80012e8 <jwEnd>
	  int resultCode = jwClose();
 8001f12:	f7ff f9bb 	bl	800128c <jwClose>
 8001f16:	62b8      	str	r0, [r7, #40]	; 0x28
	  if( resultCode != JWRITE_OK ) {JSON_DATA_SEND[MAXANSWERLENGTH-1]='\0';return HAL_ERROR;}
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <ParserBeacons+0x18a>
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <ParserBeacons+0x194>)
 8001f20:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8001f24:	331b      	adds	r3, #27
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <ParserBeacons+0x18c>
	  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200011c4 	.word	0x200011c4
 8001f3c:	20000014 	.word	0x20000014
 8001f40:	080062ec 	.word	0x080062ec
 8001f44:	20000544 	.word	0x20000544
 8001f48:	080062f0 	.word	0x080062f0
 8001f4c:	080062f8 	.word	0x080062f8
 8001f50:	08006300 	.word	0x08006300
 8001f54:	08006308 	.word	0x08006308
 8001f58:	08006318 	.word	0x08006318
 8001f5c:	08006328 	.word	0x08006328
 8001f60:	08006338 	.word	0x08006338
 8001f64:	08006348 	.word	0x08006348
 8001f68:	0800635c 	.word	0x0800635c
 8001f6c:	08006364 	.word	0x08006364

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_MspInit+0x5c>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <HAL_MspInit+0x5c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6193      	str	r3, [r2, #24]
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_MspInit+0x5c>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_MspInit+0x5c>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_MspInit+0x5c>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_MspInit+0x5c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_MspInit+0x60>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_MspInit+0x60>)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000

08001fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1b      	ldr	r2, [pc, #108]	; (800205c <HAL_SPI_MspInit+0x88>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d12f      	bne.n	8002054 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_SPI_MspInit+0x8c>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_SPI_MspInit+0x8c>)
 8001ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_SPI_MspInit+0x8c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_SPI_MspInit+0x8c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_SPI_MspInit+0x8c>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_SPI_MspInit+0x8c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002024:	23a0      	movs	r3, #160	; 0xa0
 8002026:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4619      	mov	r1, r3
 8002036:	480b      	ldr	r0, [pc, #44]	; (8002064 <HAL_SPI_MspInit+0x90>)
 8002038:	f000 ffea 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800203c:	2340      	movs	r3, #64	; 0x40
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_SPI_MspInit+0x90>)
 8002050:	f000 ffde 	bl	8003010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40013000 	.word	0x40013000
 8002060:	40021000 	.word	0x40021000
 8002064:	40010800 	.word	0x40010800

08002068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <HAL_TIM_Base_MspInit+0x44>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d113      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_TIM_Base_MspInit+0x48>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <HAL_TIM_Base_MspInit+0x48>)
 8002080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002084:	6193      	str	r3, [r2, #24]
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_TIM_Base_MspInit+0x48>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2019      	movs	r0, #25
 8002098:	f000 ff0d 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800209c:	2019      	movs	r0, #25
 800209e:	f000 ff26 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40021000 	.word	0x40021000

080020b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a3b      	ldr	r2, [pc, #236]	; (80021bc <HAL_UART_MspInit+0x108>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d13a      	bne.n	800214a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 80020da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	4619      	mov	r1, r3
 8002118:	482a      	ldr	r0, [pc, #168]	; (80021c4 <HAL_UART_MspInit+0x110>)
 800211a:	f000 ff79 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800211e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4619      	mov	r1, r3
 8002132:	4824      	ldr	r0, [pc, #144]	; (80021c4 <HAL_UART_MspInit+0x110>)
 8002134:	f000 ff6c 	bl	8003010 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	2025      	movs	r0, #37	; 0x25
 800213e:	f000 feba 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002142:	2025      	movs	r0, #37	; 0x25
 8002144:	f000 fed3 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002148:	e034      	b.n	80021b4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_UART_MspInit+0x114>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d12f      	bne.n	80021b4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 800215a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215e:	61d3      	str	r3, [r2, #28]
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_UART_MspInit+0x10c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002184:	2304      	movs	r3, #4
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	4619      	mov	r1, r3
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <HAL_UART_MspInit+0x110>)
 8002198:	f000 ff3a 	bl	8003010 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800219c:	2308      	movs	r3, #8
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_UART_MspInit+0x110>)
 80021b0:	f000 ff2e 	bl	8003010 <HAL_GPIO_Init>
}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40004400 	.word	0x40004400

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <HardFault_Handler+0x4>

080021de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <MemManage_Handler+0x4>

080021e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <BusFault_Handler+0x4>

080021ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <UsageFault_Handler+0x4>

080021f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002218:	f000 fd38 	bl	8002c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM1_UP_IRQHandler+0x10>)
 8002226:	f002 fa31 	bl	800468c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200010ec 	.word	0x200010ec

08002234 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <USART1_IRQHandler+0x10>)
 800223a:	f002 ff37 	bl	80050ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200010ac 	.word	0x200010ac

08002248 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <_sbrk+0x50>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <_sbrk+0x16>
		heap_end = &end;
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <_sbrk+0x50>)
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <_sbrk+0x54>)
 800225c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <_sbrk+0x50>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <_sbrk+0x50>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	466a      	mov	r2, sp
 800226e:	4293      	cmp	r3, r2
 8002270:	d907      	bls.n	8002282 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002272:	f003 fac7 	bl	8005804 <__errno>
 8002276:	4602      	mov	r2, r0
 8002278:	230c      	movs	r3, #12
 800227a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
 8002280:	e006      	b.n	8002290 <_sbrk+0x48>
	}

	heap_end += incr;
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <_sbrk+0x50>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a03      	ldr	r2, [pc, #12]	; (8002298 <_sbrk+0x50>)
 800228c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200004d0 	.word	0x200004d0
 800229c:	20002e80 	.word	0x20002e80

080022a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <SystemInit+0x5c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <SystemInit+0x5c>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <SystemInit+0x5c>)
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	4911      	ldr	r1, [pc, #68]	; (80022fc <SystemInit+0x5c>)
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <SystemInit+0x60>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <SystemInit+0x5c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <SystemInit+0x5c>)
 80022c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <SystemInit+0x5c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SystemInit+0x5c>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <SystemInit+0x5c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <SystemInit+0x5c>)
 80022de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SystemInit+0x5c>)
 80022e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SystemInit+0x64>)
 80022ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40021000 	.word	0x40021000
 8002300:	f8ff0000 	.word	0xf8ff0000
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <w5500_writeReg>:
extern uint8_t ipgate[4];
extern uint8_t ipmask[4];
extern uint16_t local_port;
//-----------------------------------------------
void w5500_writeReg(uint8_t op, uint16_t addres, uint8_t data)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
 8002312:	460b      	mov	r3, r1
 8002314:	80bb      	strh	r3, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[] = {addres >> 8, addres, op|(RWB_WRITE<<2), data};
 800231a:	88bb      	ldrh	r3, [r7, #4]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b29b      	uxth	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	733b      	strb	r3, [r7, #12]
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	737b      	strb	r3, [r7, #13]
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	b2db      	uxtb	r3, r3
 8002332:	73bb      	strb	r3, [r7, #14]
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	73fb      	strb	r3, [r7, #15]
  SS_SELECT();
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233e:	480a      	ldr	r0, [pc, #40]	; (8002368 <w5500_writeReg+0x60>)
 8002340:	f000 ffc0 	bl	80032c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, buf, 4, 0xFFFFFFFF);
 8002344:	f107 010c 	add.w	r1, r7, #12
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
 800234c:	2204      	movs	r2, #4
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <w5500_writeReg+0x64>)
 8002350:	f001 fc95 	bl	8003c7e <HAL_SPI_Transmit>
  SS_DESELECT();
 8002354:	2201      	movs	r2, #1
 8002356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <w5500_writeReg+0x60>)
 800235c:	f000 ffb2 	bl	80032c4 <HAL_GPIO_WritePin>
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40010c00 	.word	0x40010c00
 800236c:	2000112c 	.word	0x2000112c

08002370 <w5500_writeBuf>:
//-----------------------------------------------
void w5500_writeBuf(data_sect_ptr *datasect, uint16_t len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
  SS_SELECT();
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002382:	480a      	ldr	r0, [pc, #40]	; (80023ac <w5500_writeBuf+0x3c>)
 8002384:	f000 ff9e 	bl	80032c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) datasect, len, 0xFFFFFFFF);
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <w5500_writeBuf+0x40>)
 8002392:	f001 fc74 	bl	8003c7e <HAL_SPI_Transmit>
  SS_DESELECT();
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <w5500_writeBuf+0x3c>)
 800239e:	f000 ff91 	bl	80032c4 <HAL_GPIO_WritePin>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40010c00 	.word	0x40010c00
 80023b0:	2000112c 	.word	0x2000112c

080023b4 <w5500_writeSockBuf>:
//-----------------------------------------------
void w5500_writeSockBuf(uint8_t sock_num, uint16_t point, uint8_t *buf, uint16_t len)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60ba      	str	r2, [r7, #8]
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	460b      	mov	r3, r1
 80023c4:	81bb      	strh	r3, [r7, #12]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  data_sect_ptr *datasect = (void*)buf;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	617b      	str	r3, [r7, #20]
  datasect->opcode = (((sock_num<<2)|BSB_S0_TX)<<3)|(RWB_WRITE<<2)|OM_FDM0;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	f043 0314 	orr.w	r3, r3, #20
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	709a      	strb	r2, [r3, #2]
  datasect->addr = be16toword(point);
 80023e0:	89bb      	ldrh	r3, [r7, #12]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	89bb      	ldrh	r3, [r7, #12]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	801a      	strh	r2, [r3, #0]
  w5500_writeBuf(datasect,len+3);//3 служебных байта
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	3303      	adds	r3, #3
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4619      	mov	r1, r3
 8002400:	6978      	ldr	r0, [r7, #20]
 8002402:	f7ff ffb5 	bl	8002370 <w5500_writeBuf>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <w5500_readReg>:
//-----------------------------------------------

uint8_t w5500_readReg(uint8_t op, uint16_t addres)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	4603      	mov	r3, r0
 8002418:	460a      	mov	r2, r1
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	4613      	mov	r3, r2
 800241e:	80bb      	strh	r3, [r7, #4]
  uint8_t data;
  uint8_t wbuf[] = {addres >> 8, addres, op, 0x0};
 8002420:	88bb      	ldrh	r3, [r7, #4]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29b      	uxth	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	743b      	strb	r3, [r7, #16]
 800242a:	88bb      	ldrh	r3, [r7, #4]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	747b      	strb	r3, [r7, #17]
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	74bb      	strb	r3, [r7, #18]
 8002434:	2300      	movs	r3, #0
 8002436:	74fb      	strb	r3, [r7, #19]
  uint8_t rbuf[4];
  SS_SELECT();
 8002438:	2200      	movs	r2, #0
 800243a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800243e:	480d      	ldr	r0, [pc, #52]	; (8002474 <w5500_readReg+0x64>)
 8002440:	f000 ff40 	bl	80032c4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, wbuf, rbuf, 4, 0xFFFFFFFF);
 8002444:	f107 020c 	add.w	r2, r7, #12
 8002448:	f107 0110 	add.w	r1, r7, #16
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2304      	movs	r3, #4
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <w5500_readReg+0x68>)
 8002456:	f001 fe4f 	bl	80040f8 <HAL_SPI_TransmitReceive>
  SS_DESELECT();
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <w5500_readReg+0x64>)
 8002462:	f000 ff2f 	bl	80032c4 <HAL_GPIO_WritePin>
  data = rbuf[3];
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	75fb      	strb	r3, [r7, #23]
  return data;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40010c00 	.word	0x40010c00
 8002478:	2000112c 	.word	0x2000112c

0800247c <w5500_readBuf>:
//-----------------------------------------------
void w5500_readBuf(data_sect_ptr *datasect, uint16_t len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
  SS_SELECT();
 8002488:	2200      	movs	r2, #0
 800248a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248e:	480d      	ldr	r0, [pc, #52]	; (80024c4 <w5500_readBuf+0x48>)
 8002490:	f000 ff18 	bl	80032c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) datasect, 3, 0xFFFFFFFF);
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	2203      	movs	r2, #3
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	480a      	ldr	r0, [pc, #40]	; (80024c8 <w5500_readBuf+0x4c>)
 800249e:	f001 fbee 	bl	8003c7e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t*) datasect, len, 0xFFFFFFFF);
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4807      	ldr	r0, [pc, #28]	; (80024c8 <w5500_readBuf+0x4c>)
 80024ac:	f001 fd1b 	bl	8003ee6 <HAL_SPI_Receive>
  SS_DESELECT();
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b6:	4803      	ldr	r0, [pc, #12]	; (80024c4 <w5500_readBuf+0x48>)
 80024b8:	f000 ff04 	bl	80032c4 <HAL_GPIO_WritePin>
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40010c00 	.word	0x40010c00
 80024c8:	2000112c 	.word	0x2000112c

080024cc <w5500_readSockBufByte>:
//-----------------------------------------------
uint8_t w5500_readSockBufByte(uint8_t sock_num, uint16_t point)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	460a      	mov	r2, r1
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	80bb      	strh	r3, [r7, #4]
  uint8_t opcode, bt;
  opcode = (((sock_num<<2)|BSB_S0_RX)<<3)|OM_FDM1;
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	f043 0319 	orr.w	r3, r3, #25
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	73fb      	strb	r3, [r7, #15]
  bt = w5500_readReg(opcode, point);
 80024ea:	88ba      	ldrh	r2, [r7, #4]
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff8d 	bl	8002410 <w5500_readReg>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73bb      	strb	r3, [r7, #14]
  return bt;
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <w5500_readSockBuf>:
//-----------------------------------------------
void w5500_readSockBuf(uint8_t sock_num, uint16_t point, uint8_t *buf, uint16_t len)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	461a      	mov	r2, r3
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
 8002512:	460b      	mov	r3, r1
 8002514:	81bb      	strh	r3, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
  data_sect_ptr *datasect = (void*)buf;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	617b      	str	r3, [r7, #20]
  datasect->opcode = (((sock_num<<2)|BSB_S0_RX)<<3)|OM_FDM0;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	015b      	lsls	r3, r3, #5
 8002522:	b25b      	sxtb	r3, r3
 8002524:	f043 0318 	orr.w	r3, r3, #24
 8002528:	b25b      	sxtb	r3, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	709a      	strb	r2, [r3, #2]
  datasect->addr = be16toword(point);
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	b29b      	uxth	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	89bb      	ldrh	r3, [r7, #12]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	b21b      	sxth	r3, r3
 800253e:	4313      	orrs	r3, r2
 8002540:	b21b      	sxth	r3, r3
 8002542:	b29a      	uxth	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	801a      	strh	r2, [r3, #0]
  w5500_readBuf(datasect,len);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	4619      	mov	r1, r3
 800254c:	6978      	ldr	r0, [r7, #20]
 800254e:	f7ff ff95 	bl	800247c <w5500_readBuf>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <SetSockPort>:
//-----------------------------------------------
void SetSockPort(uint8_t sock_num, uint16_t port)

{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	460a      	mov	r2, r1
 8002564:	71fb      	strb	r3, [r7, #7]
 8002566:	4613      	mov	r3, r2
 8002568:	80bb      	strh	r3, [r7, #4]
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	b25b      	sxtb	r3, r3
 8002570:	f043 0309 	orr.w	r3, r3, #9
 8002574:	b25b      	sxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]
  w5500_writeReg(opcode, Sn_PORT0,port>>8);
 8002578:	88bb      	ldrh	r3, [r7, #4]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	b29b      	uxth	r3, r3
 800257e:	b2da      	uxtb	r2, r3
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2104      	movs	r1, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff febf 	bl	8002308 <w5500_writeReg>
  w5500_writeReg(opcode, Sn_PORT1,port);
 800258a:	88bb      	ldrh	r3, [r7, #4]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2105      	movs	r1, #5
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff feb8 	bl	8002308 <w5500_writeReg>
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <OpenSocket>:
//-----------------------------------------------
void OpenSocket(uint8_t sock_num, uint16_t mode)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	460a      	mov	r2, r1
 80025aa:	71fb      	strb	r3, [r7, #7]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80bb      	strh	r3, [r7, #4]
  uint8_t opcode=0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	f043 0309 	orr.w	r3, r3, #9
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	73fb      	strb	r3, [r7, #15]
  w5500_writeReg(opcode, Sn_MR, mode);
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fe9c 	bl	8002308 <w5500_writeReg>
  w5500_writeReg(opcode, Sn_CR, 0x01);
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2201      	movs	r2, #1
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fe96 	bl	8002308 <w5500_writeReg>
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <SocketInitWait>:
//-----------------------------------------------
void SocketInitWait(uint8_t sock_num)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode=0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	015b      	lsls	r3, r3, #5
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	f043 0309 	orr.w	r3, r3, #9
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	73fb      	strb	r3, [r7, #15]
  while(1)
  {
    if(w5500_readReg(opcode, Sn_SR)==SOCK_INIT)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2103      	movs	r1, #3
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff03 	bl	8002410 <w5500_readReg>
 800260a:	4603      	mov	r3, r0
 800260c:	2b13      	cmp	r3, #19
 800260e:	d000      	beq.n	8002612 <SocketInitWait+0x2e>
 8002610:	e7f6      	b.n	8002600 <SocketInitWait+0x1c>
    {
      break;
 8002612:	bf00      	nop
    }
  }
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <ListenSocket>:
//-----------------------------------------------
void ListenSocket(uint8_t sock_num)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode=0;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	015b      	lsls	r3, r3, #5
 800262e:	b25b      	sxtb	r3, r3
 8002630:	f043 0309 	orr.w	r3, r3, #9
 8002634:	b25b      	sxtb	r3, r3
 8002636:	73fb      	strb	r3, [r7, #15]
  w5500_writeReg(opcode, Sn_CR, 0x02); //LISTEN SOCKET
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2202      	movs	r2, #2
 800263c:	2101      	movs	r1, #1
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fe62 	bl	8002308 <w5500_writeReg>
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <SocketListenWait>:
//-----------------------------------------------
void SocketListenWait(uint8_t sock_num)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode=0;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	015b      	lsls	r3, r3, #5
 800265e:	b25b      	sxtb	r3, r3
 8002660:	f043 0309 	orr.w	r3, r3, #9
 8002664:	b25b      	sxtb	r3, r3
 8002666:	73fb      	strb	r3, [r7, #15]
  while(1)
  {
    if(w5500_readReg(opcode, Sn_SR)==SOCK_LISTEN)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2103      	movs	r1, #3
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fecf 	bl	8002410 <w5500_readReg>
 8002672:	4603      	mov	r3, r0
 8002674:	2b14      	cmp	r3, #20
 8002676:	d000      	beq.n	800267a <SocketListenWait+0x2e>
 8002678:	e7f6      	b.n	8002668 <SocketListenWait+0x1c>
    {
      break;
 800267a:	bf00      	nop
    }
  }
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <SocketClosedWait>:
//-----------------------------------------------
void SocketClosedWait(uint8_t sock_num)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode=0;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	b25b      	sxtb	r3, r3
 8002698:	f043 0309 	orr.w	r3, r3, #9
 800269c:	b25b      	sxtb	r3, r3
 800269e:	73fb      	strb	r3, [r7, #15]
  while(1)
  {
    if(w5500_readReg(opcode, Sn_SR)==SOCK_CLOSED)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2103      	movs	r1, #3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff feb3 	bl	8002410 <w5500_readReg>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d000      	beq.n	80026b2 <SocketClosedWait+0x2e>
 80026b0:	e7f6      	b.n	80026a0 <SocketClosedWait+0x1c>
    {
      break;
 80026b2:	bf00      	nop
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <DisconnectSocket>:
//-----------------------------------------------
void DisconnectSocket(uint8_t sock_num)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode=0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	015b      	lsls	r3, r3, #5
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	f043 0309 	orr.w	r3, r3, #9
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	73fb      	strb	r3, [r7, #15]
  w5500_writeReg(opcode, Sn_CR, 0x08); //DISCON
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2208      	movs	r2, #8
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fe12 	bl	8002308 <w5500_writeReg>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <GetSocketStatus>:
//-----------------------------------------------
uint8_t GetSocketStatus(uint8_t sock_num)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  uint8_t dt;
  uint8_t opcode=0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	015b      	lsls	r3, r3, #5
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	f043 0309 	orr.w	r3, r3, #9
 8002704:	b25b      	sxtb	r3, r3
 8002706:	73fb      	strb	r3, [r7, #15]
  dt = w5500_readReg(opcode, Sn_SR);
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2103      	movs	r1, #3
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fe7f 	bl	8002410 <w5500_readReg>
 8002712:	4603      	mov	r3, r0
 8002714:	73bb      	strb	r3, [r7, #14]
  return dt;
 8002716:	7bbb      	ldrb	r3, [r7, #14]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <RecvSocket>:
//-----------------------------------------------
void RecvSocket(uint8_t sock_num)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	015b      	lsls	r3, r3, #5
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f043 0309 	orr.w	r3, r3, #9
 8002734:	b25b      	sxtb	r3, r3
 8002736:	73fb      	strb	r3, [r7, #15]
  w5500_writeReg(opcode, Sn_CR, 0x40); //RECV SOCKET
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fde2 	bl	8002308 <w5500_writeReg>
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <SendSocket>:
//-----------------------------------------------
void SendSocket(uint8_t sock_num)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	b25b      	sxtb	r3, r3
 800275c:	f043 0309 	orr.w	r3, r3, #9
 8002760:	b25b      	sxtb	r3, r3
 8002762:	73fb      	strb	r3, [r7, #15]
  w5500_writeReg(opcode, Sn_CR, 0x20); //SEND SOCKET
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2220      	movs	r2, #32
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fdcc 	bl	8002308 <w5500_writeReg>
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <GetSizeRX>:
//-----------------------------------------------
uint16_t GetSizeRX(uint8_t sock_num)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  uint16_t len;
  uint8_t opcode=0;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	015b      	lsls	r3, r3, #5
 800278a:	b25b      	sxtb	r3, r3
 800278c:	f043 0309 	orr.w	r3, r3, #9
 8002790:	b25b      	sxtb	r3, r3
 8002792:	73fb      	strb	r3, [r7, #15]
  len = (w5500_readReg(opcode,Sn_RX_RSR0)<<8|w5500_readReg(opcode,Sn_RX_RSR1));
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2126      	movs	r1, #38	; 0x26
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fe39 	bl	8002410 <w5500_readReg>
 800279e:	4603      	mov	r3, r0
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b21c      	sxth	r4, r3
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2127      	movs	r1, #39	; 0x27
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fe31 	bl	8002410 <w5500_readReg>
 80027ae:	4603      	mov	r3, r0
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	4323      	orrs	r3, r4
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	81bb      	strh	r3, [r7, #12]
  return len;
 80027b8:	89bb      	ldrh	r3, [r7, #12]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}

080027c2 <GetReadPointer>:
//-----------------------------------------------
uint16_t GetReadPointer(uint8_t sock_num)
{
 80027c2:	b590      	push	{r4, r7, lr}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  uint16_t point;
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	015b      	lsls	r3, r3, #5
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	f043 0309 	orr.w	r3, r3, #9
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	73fb      	strb	r3, [r7, #15]
  point = (w5500_readReg(opcode,Sn_RX_RD0)<<8|w5500_readReg(opcode,Sn_RX_RD1));
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2128      	movs	r1, #40	; 0x28
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe16 	bl	8002410 <w5500_readReg>
 80027e4:	4603      	mov	r3, r0
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	b21c      	sxth	r4, r3
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2129      	movs	r1, #41	; 0x29
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fe0e 	bl	8002410 <w5500_readReg>
 80027f4:	4603      	mov	r3, r0
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	4323      	orrs	r3, r4
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	81bb      	strh	r3, [r7, #12]
  return point;
 80027fe:	89bb      	ldrh	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <GetWritePointer>:
//-----------------------------------------------
uint16_t GetWritePointer(uint8_t sock_num)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  uint16_t point;
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	b25b      	sxtb	r3, r3
 8002818:	f043 0309 	orr.w	r3, r3, #9
 800281c:	b25b      	sxtb	r3, r3
 800281e:	73fb      	strb	r3, [r7, #15]
  point = (w5500_readReg(opcode,Sn_TX_WR0)<<8|w5500_readReg(opcode,Sn_TX_WR1));
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2124      	movs	r1, #36	; 0x24
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fdf3 	bl	8002410 <w5500_readReg>
 800282a:	4603      	mov	r3, r0
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b21c      	sxth	r4, r3
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2125      	movs	r1, #37	; 0x25
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fdeb 	bl	8002410 <w5500_readReg>
 800283a:	4603      	mov	r3, r0
 800283c:	b21b      	sxth	r3, r3
 800283e:	4323      	orrs	r3, r4
 8002840:	b21b      	sxth	r3, r3
 8002842:	81bb      	strh	r3, [r7, #12]
  return point;
 8002844:	89bb      	ldrh	r3, [r7, #12]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}

0800284e <SetWritePointer>:
//-----------------------------------------------
void SetWritePointer(uint8_t sock_num, uint16_t point)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	460a      	mov	r2, r1
 8002858:	71fb      	strb	r3, [r7, #7]
 800285a:	4613      	mov	r3, r2
 800285c:	80bb      	strh	r3, [r7, #4]
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	b25b      	sxtb	r3, r3
 8002864:	f043 0309 	orr.w	r3, r3, #9
 8002868:	b25b      	sxtb	r3, r3
 800286a:	73fb      	strb	r3, [r7, #15]
  w5500_writeReg(opcode, Sn_TX_WR0, point>>8);
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	b29b      	uxth	r3, r3
 8002872:	b2da      	uxtb	r2, r3
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2124      	movs	r1, #36	; 0x24
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fd45 	bl	8002308 <w5500_writeReg>
  w5500_writeReg(opcode, Sn_TX_WR1, (uint8_t)point);
 800287e:	88bb      	ldrh	r3, [r7, #4]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2125      	movs	r1, #37	; 0x25
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fd3e 	bl	8002308 <w5500_writeReg>
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <w5500_ini>:
//-----------------------------------------------
void w5500_ini(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	uint8_t i;
  uint8_t opcode=0;
 800289a:	2300      	movs	r3, #0
 800289c:	71bb      	strb	r3, [r7, #6]
  //Hard Reset
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028a4:	4864      	ldr	r0, [pc, #400]	; (8002a38 <w5500_ini+0x1a4>)
 80028a6:	f000 fd0d 	bl	80032c4 <HAL_GPIO_WritePin>
    HAL_Delay(70);
 80028aa:	2046      	movs	r0, #70	; 0x46
 80028ac:	f000 fa0a 	bl	8002cc4 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b6:	4860      	ldr	r0, [pc, #384]	; (8002a38 <w5500_ini+0x1a4>)
 80028b8:	f000 fd04 	bl	80032c4 <HAL_GPIO_WritePin>
    HAL_Delay(70);
 80028bc:	2046      	movs	r0, #70	; 0x46
 80028be:	f000 fa01 	bl	8002cc4 <HAL_Delay>
	//Soft Reset
	opcode = (BSB_COMMON<<3)|OM_FDM1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	71bb      	strb	r3, [r7, #6]
	w5500_writeReg(opcode, MR, 0x80);
 80028c6:	79bb      	ldrb	r3, [r7, #6]
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fd1b 	bl	8002308 <w5500_writeReg>
	HAL_Delay(100);
 80028d2:	2064      	movs	r0, #100	; 0x64
 80028d4:	f000 f9f6 	bl	8002cc4 <HAL_Delay>
	//Configute Net
	w5500_writeReg(opcode, SHAR0,macaddr[0]);
 80028d8:	4b58      	ldr	r3, [pc, #352]	; (8002a3c <w5500_ini+0x1a8>)
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	79bb      	ldrb	r3, [r7, #6]
 80028de:	2109      	movs	r1, #9
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fd11 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SHAR1,macaddr[1]);
 80028e6:	4b55      	ldr	r3, [pc, #340]	; (8002a3c <w5500_ini+0x1a8>)
 80028e8:	785a      	ldrb	r2, [r3, #1]
 80028ea:	79bb      	ldrb	r3, [r7, #6]
 80028ec:	210a      	movs	r1, #10
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fd0a 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SHAR2,macaddr[2]);
 80028f4:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <w5500_ini+0x1a8>)
 80028f6:	789a      	ldrb	r2, [r3, #2]
 80028f8:	79bb      	ldrb	r3, [r7, #6]
 80028fa:	210b      	movs	r1, #11
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fd03 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SHAR3,macaddr[3]);
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <w5500_ini+0x1a8>)
 8002904:	78da      	ldrb	r2, [r3, #3]
 8002906:	79bb      	ldrb	r3, [r7, #6]
 8002908:	210c      	movs	r1, #12
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fcfc 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SHAR4,macaddr[4]);
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <w5500_ini+0x1a8>)
 8002912:	791a      	ldrb	r2, [r3, #4]
 8002914:	79bb      	ldrb	r3, [r7, #6]
 8002916:	210d      	movs	r1, #13
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fcf5 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SHAR5,macaddr[5]);
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <w5500_ini+0x1a8>)
 8002920:	795a      	ldrb	r2, [r3, #5]
 8002922:	79bb      	ldrb	r3, [r7, #6]
 8002924:	210e      	movs	r1, #14
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fcee 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, GWR0,ipgate[0]);
 800292c:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <w5500_ini+0x1ac>)
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fce7 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, GWR1,ipgate[1]);
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <w5500_ini+0x1ac>)
 800293c:	785a      	ldrb	r2, [r3, #1]
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fce0 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, GWR2,ipgate[2]);
 8002948:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <w5500_ini+0x1ac>)
 800294a:	789a      	ldrb	r2, [r3, #2]
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	2103      	movs	r1, #3
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fcd9 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, GWR3,ipgate[3]);
 8002956:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <w5500_ini+0x1ac>)
 8002958:	78da      	ldrb	r2, [r3, #3]
 800295a:	79bb      	ldrb	r3, [r7, #6]
 800295c:	2104      	movs	r1, #4
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fcd2 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SUBR0,ipmask[0]);
 8002964:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <w5500_ini+0x1b0>)
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	79bb      	ldrb	r3, [r7, #6]
 800296a:	2105      	movs	r1, #5
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fccb 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SUBR1,ipmask[1]);
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <w5500_ini+0x1b0>)
 8002974:	785a      	ldrb	r2, [r3, #1]
 8002976:	79bb      	ldrb	r3, [r7, #6]
 8002978:	2106      	movs	r1, #6
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fcc4 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SUBR2,ipmask[2]);
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <w5500_ini+0x1b0>)
 8002982:	789a      	ldrb	r2, [r3, #2]
 8002984:	79bb      	ldrb	r3, [r7, #6]
 8002986:	2107      	movs	r1, #7
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fcbd 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SUBR3,ipmask[3]);
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <w5500_ini+0x1b0>)
 8002990:	78da      	ldrb	r2, [r3, #3]
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	2108      	movs	r1, #8
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fcb6 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SIPR0,ipaddr[0]);
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <w5500_ini+0x1b4>)
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	79bb      	ldrb	r3, [r7, #6]
 80029a2:	210f      	movs	r1, #15
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fcaf 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SIPR1,ipaddr[1]);
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <w5500_ini+0x1b4>)
 80029ac:	785a      	ldrb	r2, [r3, #1]
 80029ae:	79bb      	ldrb	r3, [r7, #6]
 80029b0:	2110      	movs	r1, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fca8 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SIPR2,ipaddr[2]);
 80029b8:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <w5500_ini+0x1b4>)
 80029ba:	789a      	ldrb	r2, [r3, #2]
 80029bc:	79bb      	ldrb	r3, [r7, #6]
 80029be:	2111      	movs	r1, #17
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fca1 	bl	8002308 <w5500_writeReg>
	w5500_writeReg(opcode, SIPR3,ipaddr[3]);
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <w5500_ini+0x1b4>)
 80029c8:	78da      	ldrb	r2, [r3, #3]
 80029ca:	79bb      	ldrb	r3, [r7, #6]
 80029cc:	2112      	movs	r1, #18
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fc9a 	bl	8002308 <w5500_writeReg>
	for(i=3;i<8;i++)
 80029d4:	2303      	movs	r3, #3
 80029d6:	71fb      	strb	r3, [r7, #7]
 80029d8:	e01a      	b.n	8002a10 <w5500_ini+0x17c>
	  {
	    SetSockPort(i, local_port);
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <w5500_ini+0x1b8>)
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fdb9 	bl	800255a <SetSockPort>
	    //Открываем сокет
	    OpenSocket(i,Mode_TCP);
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fdd7 	bl	80025a0 <OpenSocket>
	    SocketInitWait(i);
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fdf5 	bl	80025e4 <SocketInitWait>
	    //Начинаем слушать сокет
	    ListenSocket(i);
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fe0d 	bl	800261c <ListenSocket>
	    SocketListenWait(i);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fe21 	bl	800264c <SocketListenWait>
	for(i=3;i<8;i++)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	71fb      	strb	r3, [r7, #7]
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b07      	cmp	r3, #7
 8002a14:	d9e1      	bls.n	80029da <w5500_ini+0x146>
	  }
	  HAL_Delay(500);
 8002a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a1a:	f000 f953 	bl	8002cc4 <HAL_Delay>
	  //Посмотрим статусы
	  for(i=3;i<8;i++)
 8002a1e:	2303      	movs	r3, #3
 8002a20:	71fb      	strb	r3, [r7, #7]
 8002a22:	e002      	b.n	8002a2a <w5500_ini+0x196>
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	3301      	adds	r3, #1
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2b07      	cmp	r3, #7
 8002a2e:	d9f9      	bls.n	8002a24 <w5500_ini+0x190>
	  {
	   // dtt = GetSocketStatus(i);
	    //sprintf(str1,"First Status Sn%d: 0x%02X\r\n",i,dtt);
	    //HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	  }
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40010c00 	.word	0x40010c00
 8002a3c:	2000001c 	.word	0x2000001c
 8002a40:	20000008 	.word	0x20000008
 8002a44:	2000000c 	.word	0x2000000c
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	20000010 	.word	0x20000010

08002a50 <w5500_packetReceive>:
//-----------------------------------------------
void w5500_packetReceive(uint8_t sn)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
  uint16_t point;
  uint16_t len;
	if(GetSocketStatus(sn)==SOCK_ESTABLISHED)
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fe45 	bl	80026ec <GetSocketStatus>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b17      	cmp	r3, #23
 8002a66:	f040 809b 	bne.w	8002ba0 <w5500_packetReceive+0x150>
	{

		if(httpsockprop[sn].data_stat == DATA_COMPLETED)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ba8 <w5500_packetReceive+0x158>)
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d144      	bne.n	8002b08 <w5500_packetReceive+0xb8>
		{
			//Отобразим размер принятых данных
			len = GetSizeRX(sn);
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fe79 	bl	8002778 <GetSizeRX>
 8002a86:	4603      	mov	r3, r0
 8002a88:	81fb      	strh	r3, [r7, #14]
			//sprintf(str1,"len_rx_buf:0x%04X\r\n",len);
			//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
			//Если пришел пустой пакет, то уходим из функции
			if(!len){
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d119      	bne.n	8002ac4 <w5500_packetReceive+0x74>
				DisconnectSocket(sn); //Разъединяемся
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fe12 	bl	80026bc <DisconnectSocket>
				        SocketClosedWait(sn);
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fdf2 	bl	8002684 <SocketClosedWait>
				        OpenSocket(sn,Mode_TCP);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fd7b 	bl	80025a0 <OpenSocket>
				        //Ждём инициализации сокета (статус SOCK_INIT)
				        SocketInitWait(sn);
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fd99 	bl	80025e4 <SocketInitWait>
				        //Продолжаем слушать сокет
				        ListenSocket(sn);
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fdb1 	bl	800261c <ListenSocket>
				        SocketListenWait(sn);
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fdc5 	bl	800264c <SocketListenWait>
				        return;
 8002ac2:	e06d      	b.n	8002ba0 <w5500_packetReceive+0x150>
			}
			//здесь обмениваемся информацией: на запрос документа от клиента отправляем ему запрошенный документ
			//указатель на начало чтения приёмного буфера
			point = GetReadPointer(sn);
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fe7b 	bl	80027c2 <GetReadPointer>
 8002acc:	4603      	mov	r3, r0
 8002ace:	81bb      	strh	r3, [r7, #12]
			//sprintf(str1,"Sn_RX_RD:0x%04X\r\n",point);
			//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
			w5500_readSockBuf(sn, point, (uint8_t*)tmpbuf, 5);
 8002ad0:	89b9      	ldrh	r1, [r7, #12]
 8002ad2:	79f8      	ldrb	r0, [r7, #7]
 8002ad4:	2305      	movs	r3, #5
 8002ad6:	4a35      	ldr	r2, [pc, #212]	; (8002bac <w5500_packetReceive+0x15c>)
 8002ad8:	f7ff fd14 	bl	8002504 <w5500_readSockBuf>
			if (strncmp(tmpbuf,"GET /", 5) == 0)
 8002adc:	2205      	movs	r2, #5
 8002ade:	4934      	ldr	r1, [pc, #208]	; (8002bb0 <w5500_packetReceive+0x160>)
 8002ae0:	4832      	ldr	r0, [pc, #200]	; (8002bac <w5500_packetReceive+0x15c>)
 8002ae2:	f002 ff02 	bl	80058ea <strncmp>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d159      	bne.n	8002ba0 <w5500_packetReceive+0x150>
			{
				//HAL_UART_Transmit(&huart2,(uint8_t*)"HTTP\r\n",6,0x1000);
				httpsockprop[sn].prt_tp = PRT_TCP_HTTP;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	4a2e      	ldr	r2, [pc, #184]	; (8002ba8 <w5500_packetReceive+0x158>)
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3315      	adds	r3, #21
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
				http_request(sn);
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f9b9 	bl	8000e78 <http_request>
 8002b06:	e04b      	b.n	8002ba0 <w5500_packetReceive+0x150>
			else
			{

			}
		}
		else if(httpsockprop[sn].data_stat==DATA_MIDDLE)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <w5500_packetReceive+0x158>)
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d10f      	bne.n	8002b3c <w5500_packetReceive+0xec>
    {
      if(httpsockprop[sn].prt_tp == PRT_TCP_HTTP)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <w5500_packetReceive+0x158>)
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3315      	adds	r3, #21
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d136      	bne.n	8002ba0 <w5500_packetReceive+0x150>
      {
				tcp_send_http_middle(sn);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe f80f 	bl	8000b58 <tcp_send_http_middle>
 8002b3a:	e031      	b.n	8002ba0 <w5500_packetReceive+0x150>
      }
    }
    else if(httpsockprop[sn].data_stat==DATA_LAST)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <w5500_packetReceive+0x158>)
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d127      	bne.n	8002ba0 <w5500_packetReceive+0x150>
    {
      if(httpsockprop[sn].prt_tp == PRT_TCP_HTTP)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <w5500_packetReceive+0x158>)
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3315      	adds	r3, #21
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d11c      	bne.n	8002ba0 <w5500_packetReceive+0x150>
      {
				tcp_send_http_last(sn);
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f8f9 	bl	8000d60 <tcp_send_http_last>
        DisconnectSocket(sn); //Разъединяемся
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fda3 	bl	80026bc <DisconnectSocket>
        SocketClosedWait(sn);
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fd83 	bl	8002684 <SocketClosedWait>
        OpenSocket(sn,Mode_TCP);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fd0c 	bl	80025a0 <OpenSocket>
        //Ждём инициализации сокета (статус SOCK_INIT)
        SocketInitWait(sn);
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fd2a 	bl	80025e4 <SocketInitWait>
        //Продолжаем слушать сокет
        ListenSocket(sn);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fd42 	bl	800261c <ListenSocket>
        SocketListenWait(sn);
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fd56 	bl	800264c <SocketListenWait>

		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}


}
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000e00 	.word	0x20000e00
 8002bac:	20002c54 	.word	0x20002c54
 8002bb0:	0800636c 	.word	0x0800636c

08002bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002bb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002bb6:	e003      	b.n	8002bc0 <LoopCopyDataInit>

08002bb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002bba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002bbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002bbe:	3104      	adds	r1, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002bc0:	480a      	ldr	r0, [pc, #40]	; (8002bec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002bc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002bc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002bc8:	d3f6      	bcc.n	8002bb8 <CopyDataInit>
  ldr r2, =_sbss
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002bcc:	e002      	b.n	8002bd4 <LoopFillZerobss>

08002bce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002bd0:	f842 3b04 	str.w	r3, [r2], #4

08002bd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002bd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bd8:	d3f9      	bcc.n	8002bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bda:	f7ff fb61 	bl	80022a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bde:	f002 fe17 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002be2:	f7fe fda5 	bl	8001730 <main>
  bx lr
 8002be6:	4770      	bx	lr
  ldr r3, =_sidata
 8002be8:	0800640c 	.word	0x0800640c
  ldr r0, =_sdata
 8002bec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bf0:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8002bf4:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8002bf8:	20002e80 	.word	0x20002e80

08002bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <ADC1_2_IRQHandler>
	...

08002c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_Init+0x28>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <HAL_Init+0x28>)
 8002c0a:	f043 0310 	orr.w	r3, r3, #16
 8002c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c10:	2003      	movs	r0, #3
 8002c12:	f000 f945 	bl	8002ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f000 f808 	bl	8002c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c1c:	f7ff f9a8 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40022000 	.word	0x40022000

08002c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_InitTick+0x54>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_InitTick+0x58>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f95d 	bl	8002f0a <HAL_SYSTICK_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00e      	b.n	8002c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d80a      	bhi.n	8002c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c60:	2200      	movs	r2, #0
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f000 f925 	bl	8002eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c6c:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <HAL_InitTick+0x5c>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e000      	b.n	8002c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000018 	.word	0x20000018
 8002c84:	20000028 	.word	0x20000028
 8002c88:	20000024 	.word	0x20000024

08002c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_IncTick+0x1c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_IncTick+0x20>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a03      	ldr	r2, [pc, #12]	; (8002cac <HAL_IncTick+0x20>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	20000028 	.word	0x20000028
 8002cac:	20002e78 	.word	0x20002e78

08002cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb4:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <HAL_GetTick+0x10>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	20002e78 	.word	0x20002e78

08002cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fff0 	bl	8002cb0 <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d005      	beq.n	8002cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_Delay+0x40>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cea:	bf00      	nop
 8002cec:	f7ff ffe0 	bl	8002cb0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8f7      	bhi.n	8002cec <HAL_Delay+0x28>
  {
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000028 	.word	0x20000028

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4906      	ldr	r1, [pc, #24]	; (8002da0 <__NVIC_EnableIRQ+0x34>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6c:	d301      	bcc.n	8002e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <SysTick_Config+0x40>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7a:	210f      	movs	r1, #15
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f7ff ff90 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <SysTick_Config+0x40>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <SysTick_Config+0x40>)
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010

08002ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff2d 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec8:	f7ff ff42 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff ff90 	bl	8002df8 <NVIC_EncodePriority>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff5f 	bl	8002da4 <__NVIC_SetPriority>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff35 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffa2 	bl	8002e5c <SysTick_Config>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d005      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e051      	b.n	8002fea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 020e 	bic.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <HAL_DMA_Abort_IT+0xd0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d029      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xa0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <HAL_DMA_Abort_IT+0xd4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_Abort_IT+0x9c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_DMA_Abort_IT+0xd8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01a      	beq.n	8002fba <HAL_DMA_Abort_IT+0x96>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_DMA_Abort_IT+0xdc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d012      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x90>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_DMA_Abort_IT+0xe0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00a      	beq.n	8002fae <HAL_DMA_Abort_IT+0x8a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_DMA_Abort_IT+0xe4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d102      	bne.n	8002fa8 <HAL_DMA_Abort_IT+0x84>
 8002fa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fa6:	e00e      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fac:	e00b      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb2:	e008      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb8:	e005      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbe:	e002      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	e000      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4a11      	ldr	r2, [pc, #68]	; (800300c <HAL_DMA_Abort_IT+0xe8>)
 8002fc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    } 
  }
  return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40020008 	.word	0x40020008
 8002ff8:	4002001c 	.word	0x4002001c
 8002ffc:	40020030 	.word	0x40020030
 8003000:	40020044 	.word	0x40020044
 8003004:	40020058 	.word	0x40020058
 8003008:	4002006c 	.word	0x4002006c
 800300c:	40020000 	.word	0x40020000

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b08b      	sub	sp, #44	; 0x2c
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003022:	e127      	b.n	8003274 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003024:	2201      	movs	r2, #1
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 8116 	bne.w	800326e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b12      	cmp	r3, #18
 8003048:	d034      	beq.n	80030b4 <HAL_GPIO_Init+0xa4>
 800304a:	2b12      	cmp	r3, #18
 800304c:	d80d      	bhi.n	800306a <HAL_GPIO_Init+0x5a>
 800304e:	2b02      	cmp	r3, #2
 8003050:	d02b      	beq.n	80030aa <HAL_GPIO_Init+0x9a>
 8003052:	2b02      	cmp	r3, #2
 8003054:	d804      	bhi.n	8003060 <HAL_GPIO_Init+0x50>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d031      	beq.n	80030be <HAL_GPIO_Init+0xae>
 800305a:	2b01      	cmp	r3, #1
 800305c:	d01c      	beq.n	8003098 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800305e:	e048      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003060:	2b03      	cmp	r3, #3
 8003062:	d043      	beq.n	80030ec <HAL_GPIO_Init+0xdc>
 8003064:	2b11      	cmp	r3, #17
 8003066:	d01b      	beq.n	80030a0 <HAL_GPIO_Init+0x90>
          break;
 8003068:	e043      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800306a:	4a89      	ldr	r2, [pc, #548]	; (8003290 <HAL_GPIO_Init+0x280>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d026      	beq.n	80030be <HAL_GPIO_Init+0xae>
 8003070:	4a87      	ldr	r2, [pc, #540]	; (8003290 <HAL_GPIO_Init+0x280>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d806      	bhi.n	8003084 <HAL_GPIO_Init+0x74>
 8003076:	4a87      	ldr	r2, [pc, #540]	; (8003294 <HAL_GPIO_Init+0x284>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d020      	beq.n	80030be <HAL_GPIO_Init+0xae>
 800307c:	4a86      	ldr	r2, [pc, #536]	; (8003298 <HAL_GPIO_Init+0x288>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_GPIO_Init+0xae>
          break;
 8003082:	e036      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003084:	4a85      	ldr	r2, [pc, #532]	; (800329c <HAL_GPIO_Init+0x28c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0xae>
 800308a:	4a85      	ldr	r2, [pc, #532]	; (80032a0 <HAL_GPIO_Init+0x290>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d016      	beq.n	80030be <HAL_GPIO_Init+0xae>
 8003090:	4a84      	ldr	r2, [pc, #528]	; (80032a4 <HAL_GPIO_Init+0x294>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_GPIO_Init+0xae>
          break;
 8003096:	e02c      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	623b      	str	r3, [r7, #32]
          break;
 800309e:	e028      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	3304      	adds	r3, #4
 80030a6:	623b      	str	r3, [r7, #32]
          break;
 80030a8:	e023      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	3308      	adds	r3, #8
 80030b0:	623b      	str	r3, [r7, #32]
          break;
 80030b2:	e01e      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	330c      	adds	r3, #12
 80030ba:	623b      	str	r3, [r7, #32]
          break;
 80030bc:	e019      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030c6:	2304      	movs	r3, #4
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e012      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d4:	2308      	movs	r3, #8
 80030d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	611a      	str	r2, [r3, #16]
          break;
 80030de:	e008      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e0:	2308      	movs	r3, #8
 80030e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	615a      	str	r2, [r3, #20]
          break;
 80030ea:	e002      	b.n	80030f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
          break;
 80030f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2bff      	cmp	r3, #255	; 0xff
 80030f6:	d801      	bhi.n	80030fc <HAL_GPIO_Init+0xec>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	e001      	b.n	8003100 <HAL_GPIO_Init+0xf0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2bff      	cmp	r3, #255	; 0xff
 8003106:	d802      	bhi.n	800310e <HAL_GPIO_Init+0xfe>
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	e002      	b.n	8003114 <HAL_GPIO_Init+0x104>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3b08      	subs	r3, #8
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	210f      	movs	r1, #15
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	401a      	ands	r2, r3
 8003126:	6a39      	ldr	r1, [r7, #32]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	431a      	orrs	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8096 	beq.w	800326e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003142:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_GPIO_Init+0x298>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_GPIO_Init+0x298>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6193      	str	r3, [r2, #24]
 800314e:	4b56      	ldr	r3, [pc, #344]	; (80032a8 <HAL_GPIO_Init+0x298>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800315a:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_GPIO_Init+0x29c>)
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003166:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4013      	ands	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <HAL_GPIO_Init+0x2a0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x19e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <HAL_GPIO_Init+0x2a4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x19a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_GPIO_Init+0x2a8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x196>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a48      	ldr	r2, [pc, #288]	; (80032bc <HAL_GPIO_Init+0x2ac>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x192>
 800319e:	2303      	movs	r3, #3
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x1a0>
 80031a2:	2304      	movs	r3, #4
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x1a0>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x1a0>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x1a0>
 80031ae:	2300      	movs	r3, #0
 80031b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031c0:	493a      	ldr	r1, [pc, #232]	; (80032ac <HAL_GPIO_Init+0x29c>)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4938      	ldr	r1, [pc, #224]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
 80031e6:	e006      	b.n	80031f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	4933      	ldr	r1, [pc, #204]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	492e      	ldr	r1, [pc, #184]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
 800320e:	e006      	b.n	800321e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	43db      	mvns	r3, r3
 8003218:	4929      	ldr	r1, [pc, #164]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 800321a:	4013      	ands	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	4924      	ldr	r1, [pc, #144]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
 8003236:	e006      	b.n	8003246 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003238:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	43db      	mvns	r3, r3
 8003240:	491f      	ldr	r1, [pc, #124]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003242:	4013      	ands	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	491a      	ldr	r1, [pc, #104]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	60cb      	str	r3, [r1, #12]
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	43db      	mvns	r3, r3
 8003268:	4915      	ldr	r1, [pc, #84]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 800326a:	4013      	ands	r3, r2
 800326c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	3301      	adds	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	f47f aed0 	bne.w	8003024 <HAL_GPIO_Init+0x14>
  }
}
 8003284:	bf00      	nop
 8003286:	372c      	adds	r7, #44	; 0x2c
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	10210000 	.word	0x10210000
 8003294:	10110000 	.word	0x10110000
 8003298:	10120000 	.word	0x10120000
 800329c:	10310000 	.word	0x10310000
 80032a0:	10320000 	.word	0x10320000
 80032a4:	10220000 	.word	0x10220000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40010800 	.word	0x40010800
 80032b4:	40010c00 	.word	0x40010c00
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	40010400 	.word	0x40010400

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032e0:	e003      	b.n	80032ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	611a      	str	r2, [r3, #16]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02b      	b.n	800335e <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800330e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f245 5255 	movw	r2, #21845	; 0x5555
 8003318:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6852      	ldr	r2, [r2, #4]
 8003322:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6892      	ldr	r2, [r2, #8]
 800332c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800332e:	f7ff fcbf 	bl	8002cb0 <HAL_GetTick>
 8003332:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8003334:	e008      	b.n	8003348 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003336:	f7ff fcbb 	bl	8002cb0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d901      	bls.n	8003348 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e00a      	b.n	800335e <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f1      	bne.n	8003336 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800335a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003376:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e26c      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8087 	beq.w	80034b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a4:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d00c      	beq.n	80033ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033b0:	4b8f      	ldr	r3, [pc, #572]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d112      	bne.n	80033e2 <HAL_RCC_OscConfig+0x5e>
 80033bc:	4b8c      	ldr	r3, [pc, #560]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d10b      	bne.n	80033e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d06c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x12c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d168      	bne.n	80034b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e246      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x76>
 80033ec:	4b80      	ldr	r3, [pc, #512]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a7f      	ldr	r2, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	e02e      	b.n	8003458 <HAL_RCC_OscConfig+0xd4>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x98>
 8003402:	4b7b      	ldr	r3, [pc, #492]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7a      	ldr	r2, [pc, #488]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b78      	ldr	r3, [pc, #480]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a77      	ldr	r2, [pc, #476]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xd4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0xbc>
 8003426:	4b72      	ldr	r3, [pc, #456]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a71      	ldr	r2, [pc, #452]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xd4>
 8003440:	4b6b      	ldr	r3, [pc, #428]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a67      	ldr	r2, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7ff fc26 	bl	8002cb0 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7ff fc22 	bl	8002cb0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1fa      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xe4>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff fc12 	bl	8002cb0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7ff fc0e 	bl	8002cb0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1e6      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x10c>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034be:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ca:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x18c>
 80034d6:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x176>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1ba      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4939      	ldr	r1, [pc, #228]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7ff fbc7 	bl	8002cb0 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003526:	f7ff fbc3 	bl	8002cb0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e19b      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4927      	ldr	r1, [pc, #156]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7ff fba6 	bl	8002cb0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003568:	f7ff fba2 	bl	8002cb0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e17a      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d03a      	beq.n	8003608 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <HAL_RCC_OscConfig+0x274>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7ff fb86 	bl	8002cb0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7ff fb82 	bl	8002cb0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e15a      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035c6:	2001      	movs	r0, #1
 80035c8:	f000 fada 	bl	8003b80 <RCC_Delay>
 80035cc:	e01c      	b.n	8003608 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_RCC_OscConfig+0x274>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d4:	f7ff fb6c 	bl	8002cb0 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035da:	e00f      	b.n	80035fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035dc:	f7ff fb68 	bl	8002cb0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d908      	bls.n	80035fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e140      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	42420000 	.word	0x42420000
 80035f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	4b9e      	ldr	r3, [pc, #632]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e9      	bne.n	80035dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a6 	beq.w	8003762 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361a:	4b97      	ldr	r3, [pc, #604]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	4b94      	ldr	r3, [pc, #592]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4a93      	ldr	r2, [pc, #588]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	61d3      	str	r3, [r2, #28]
 8003632:	4b91      	ldr	r3, [pc, #580]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b8e      	ldr	r3, [pc, #568]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b8b      	ldr	r3, [pc, #556]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a8a      	ldr	r2, [pc, #552]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7ff fb29 	bl	8002cb0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7ff fb25 	bl	8002cb0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0fd      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b81      	ldr	r3, [pc, #516]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x312>
 8003688:	4b7b      	ldr	r3, [pc, #492]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a7a      	ldr	r2, [pc, #488]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	e02d      	b.n	80036f2 <HAL_RCC_OscConfig+0x36e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x334>
 800369e:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a75      	ldr	r2, [pc, #468]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	4b73      	ldr	r3, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a72      	ldr	r2, [pc, #456]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	6213      	str	r3, [r2, #32]
 80036b6:	e01c      	b.n	80036f2 <HAL_RCC_OscConfig+0x36e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d10c      	bne.n	80036da <HAL_RCC_OscConfig+0x356>
 80036c0:	4b6d      	ldr	r3, [pc, #436]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4a6c      	ldr	r2, [pc, #432]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	f043 0304 	orr.w	r3, r3, #4
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4a69      	ldr	r2, [pc, #420]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6213      	str	r3, [r2, #32]
 80036d8:	e00b      	b.n	80036f2 <HAL_RCC_OscConfig+0x36e>
 80036da:	4b67      	ldr	r3, [pc, #412]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a66      	ldr	r2, [pc, #408]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6213      	str	r3, [r2, #32]
 80036e6:	4b64      	ldr	r3, [pc, #400]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4a63      	ldr	r2, [pc, #396]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7ff fad9 	bl	8002cb0 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7ff fad5 	bl	8002cb0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0ab      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	4b57      	ldr	r3, [pc, #348]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ee      	beq.n	8003702 <HAL_RCC_OscConfig+0x37e>
 8003724:	e014      	b.n	8003750 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7ff fac3 	bl	8002cb0 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7ff fabf 	bl	8002cb0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e095      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003744:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ee      	bne.n	800372e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d105      	bne.n	8003762 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003756:	4b48      	ldr	r3, [pc, #288]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4a47      	ldr	r2, [pc, #284]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800375c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003760:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8081 	beq.w	800386e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376c:	4b42      	ldr	r3, [pc, #264]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d061      	beq.n	800383c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d146      	bne.n	800380e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b3f      	ldr	r3, [pc, #252]	; (8003880 <HAL_RCC_OscConfig+0x4fc>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7ff fa93 	bl	8002cb0 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378e:	f7ff fa8f 	bl	8002cb0 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e067      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a0:	4b35      	ldr	r3, [pc, #212]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b4:	d108      	bne.n	80037c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	492d      	ldr	r1, [pc, #180]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a19      	ldr	r1, [r3, #32]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	430b      	orrs	r3, r1
 80037da:	4927      	ldr	r1, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x4fc>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7ff fa63 	bl	8002cb0 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ee:	f7ff fa5f 	bl	8002cb0 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e037      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003800:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x46a>
 800380c:	e02f      	b.n	800386e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_RCC_OscConfig+0x4fc>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7ff fa4c 	bl	8002cb0 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381c:	f7ff fa48 	bl	8002cb0 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e020      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x498>
 800383a:	e018      	b.n	800386e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e013      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	429a      	cmp	r2, r3
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
 8003880:	42420060 	.word	0x42420060

08003884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0d0      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d910      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 0207 	bic.w	r2, r3, #7
 80038ae:	4965      	ldr	r1, [pc, #404]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b63      	ldr	r3, [pc, #396]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0b8      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e0:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a58      	ldr	r2, [pc, #352]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f8:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003904:	4b50      	ldr	r3, [pc, #320]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	494d      	ldr	r1, [pc, #308]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d040      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d115      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e07f      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	4b41      	ldr	r3, [pc, #260]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e073      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e06b      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4936      	ldr	r1, [pc, #216]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003974:	f7ff f99c 	bl	8002cb0 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	e00a      	b.n	8003992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7ff f998 	bl	8002cb0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e053      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 020c 	and.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1eb      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d210      	bcs.n	80039d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4922      	ldr	r1, [pc, #136]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e032      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4916      	ldr	r1, [pc, #88]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039fe:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	490e      	ldr	r1, [pc, #56]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a12:	f000 f821 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	5cd3      	ldrb	r3, [r2, r3]
 8003a26:	fa21 f303 	lsr.w	r3, r1, r3
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <HAL_RCC_ClockConfig+0x1cc>)
 8003a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_ClockConfig+0x1d0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f8fa 	bl	8002c2c <HAL_InitTick>

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40022000 	.word	0x40022000
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	080063b8 	.word	0x080063b8
 8003a50:	20000018 	.word	0x20000018
 8003a54:	20000024 	.word	0x20000024

08003a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b490      	push	{r4, r7}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a60:	1d3c      	adds	r4, r7, #4
 8003a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a82:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x40>
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x46>
 8003a96:	e02d      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a98:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a9a:	623b      	str	r3, [r7, #32]
      break;
 8003a9c:	e02d      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	0c9b      	lsrs	r3, r3, #18
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aaa:	4413      	add	r3, r2
 8003aac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ab0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c5b      	lsrs	r3, r3, #17
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aca:	4413      	add	r3, r2
 8003acc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ad0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ad6:	fb02 f203 	mul.w	r2, r2, r3
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	e004      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	623b      	str	r3, [r7, #32]
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003af6:	623b      	str	r3, [r7, #32]
      break;
 8003af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afa:	6a3b      	ldr	r3, [r7, #32]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc90      	pop	{r4, r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	08006374 	.word	0x08006374
 8003b0c:	08006384 	.word	0x08006384
 8003b10:	40021000 	.word	0x40021000
 8003b14:	007a1200 	.word	0x007a1200
 8003b18:	003d0900 	.word	0x003d0900

08003b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b20:	4b02      	ldr	r3, [pc, #8]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000018 	.word	0x20000018

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b34:	f7ff fff2 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b38:	4601      	mov	r1, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4a03      	ldr	r2, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	080063c8 	.word	0x080063c8

08003b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b5c:	f7ff ffde 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	0adb      	lsrs	r3, r3, #11
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	080063c8 	.word	0x080063c8

08003b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCC_Delay+0x34>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <RCC_Delay+0x38>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0a5b      	lsrs	r3, r3, #9
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b9c:	bf00      	nop
  }
  while (Delay --);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	60fa      	str	r2, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f9      	bne.n	8003b9c <RCC_Delay+0x1c>
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000018 	.word	0x20000018
 8003bb8:	10624dd3 	.word	0x10624dd3

08003bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e053      	b.n	8003c76 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fe f9f3 	bl	8001fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c04:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	ea42 0103 	orr.w	r1, r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	0c1a      	lsrs	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f002 0204 	and.w	r2, r2, #4
 8003c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b088      	sub	sp, #32
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_SPI_Transmit+0x22>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e11e      	b.n	8003ede <HAL_SPI_Transmit+0x260>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca8:	f7ff f802 	bl	8002cb0 <HAL_GetTick>
 8003cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc2:	e103      	b.n	8003ecc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0x52>
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd4:	e0fa      	b.n	8003ecc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1c:	d107      	bne.n	8003d2e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d007      	beq.n	8003d4c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d54:	d14b      	bne.n	8003dee <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Transmit+0xe6>
 8003d5e:	8afb      	ldrh	r3, [r7, #22]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d13e      	bne.n	8003de2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d88:	e02b      	b.n	8003de2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d112      	bne.n	8003dbe <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	1c9a      	adds	r2, r3, #2
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dbc:	e011      	b.n	8003de2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dbe:	f7fe ff77 	bl	8002cb0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d803      	bhi.n	8003dd6 <HAL_SPI_Transmit+0x158>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d102      	bne.n	8003ddc <HAL_SPI_Transmit+0x15e>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de0:	e074      	b.n	8003ecc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ce      	bne.n	8003d8a <HAL_SPI_Transmit+0x10c>
 8003dec:	e04c      	b.n	8003e88 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_SPI_Transmit+0x17e>
 8003df6:	8afb      	ldrh	r3, [r7, #22]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d140      	bne.n	8003e7e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	7812      	ldrb	r2, [r2, #0]
 8003e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e22:	e02c      	b.n	8003e7e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d113      	bne.n	8003e5a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e58:	e011      	b.n	8003e7e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5a:	f7fe ff29 	bl	8002cb0 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d803      	bhi.n	8003e72 <HAL_SPI_Transmit+0x1f4>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d102      	bne.n	8003e78 <HAL_SPI_Transmit+0x1fa>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e7c:	e026      	b.n	8003ecc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1cd      	bne.n	8003e24 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fb91 	bl	80045b4 <SPI_EndRxTxTransaction>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e000      	b.n	8003ecc <HAL_SPI_Transmit+0x24e>
  }

error:
 8003eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b088      	sub	sp, #32
 8003eea:	af02      	add	r7, sp, #8
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f02:	d112      	bne.n	8003f2a <HAL_SPI_Receive+0x44>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10e      	bne.n	8003f2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f8e9 	bl	80040f8 <HAL_SPI_TransmitReceive>
 8003f26:	4603      	mov	r3, r0
 8003f28:	e0e2      	b.n	80040f0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_SPI_Receive+0x52>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e0db      	b.n	80040f0 <HAL_SPI_Receive+0x20a>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f40:	f7fe feb6 	bl	8002cb0 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d002      	beq.n	8003f58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
 8003f54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f56:	e0c2      	b.n	80040de <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Receive+0x7e>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f68:	e0b9      	b.n	80040de <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	d107      	bne.n	8003fc2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d007      	beq.n	8003fe0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d162      	bne.n	80040ae <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fe8:	e02e      	b.n	8004048 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d115      	bne.n	8004024 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f103 020c 	add.w	r2, r3, #12
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004022:	e011      	b.n	8004048 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004024:	f7fe fe44 	bl	8002cb0 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d803      	bhi.n	800403c <HAL_SPI_Receive+0x156>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d102      	bne.n	8004042 <HAL_SPI_Receive+0x15c>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004046:	e04a      	b.n	80040de <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1cb      	bne.n	8003fea <HAL_SPI_Receive+0x104>
 8004052:	e031      	b.n	80040b8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d113      	bne.n	800408a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	b292      	uxth	r2, r2
 800406e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004088:	e011      	b.n	80040ae <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800408a:	f7fe fe11 	bl	8002cb0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d803      	bhi.n	80040a2 <HAL_SPI_Receive+0x1bc>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d102      	bne.n	80040a8 <HAL_SPI_Receive+0x1c2>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040ac:	e017      	b.n	80040de <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1cd      	bne.n	8004054 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa27 	bl	8004510 <SPI_EndRxTransaction>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
 80040da:	e000      	b.n	80040de <HAL_SPI_Receive+0x1f8>
  }

error :
 80040dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	; 0x30
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004106:	2301      	movs	r3, #1
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_SPI_TransmitReceive+0x26>
 800411a:	2302      	movs	r3, #2
 800411c:	e18a      	b.n	8004434 <HAL_SPI_TransmitReceive+0x33c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004126:	f7fe fdc3 	bl	8002cb0 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004144:	2b01      	cmp	r3, #1
 8004146:	d00f      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x70>
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414e:	d107      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x68>
 8004158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800415c:	2b04      	cmp	r3, #4
 800415e:	d003      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004160:	2302      	movs	r3, #2
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004166:	e15b      	b.n	8004420 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_SPI_TransmitReceive+0x82>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_SPI_TransmitReceive+0x82>
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004180:	e14e      	b.n	8004420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b04      	cmp	r3, #4
 800418c:	d003      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2205      	movs	r2, #5
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	887a      	ldrh	r2, [r7, #2]
 80041be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d007      	beq.n	80041ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f2:	d178      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x10a>
 80041fc:	8b7b      	ldrh	r3, [r7, #26]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d166      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	881a      	ldrh	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	1c9a      	adds	r2, r3, #2
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004226:	e053      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d11b      	bne.n	800426e <HAL_SPI_TransmitReceive+0x176>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d016      	beq.n	800426e <HAL_SPI_TransmitReceive+0x176>
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	2b01      	cmp	r3, #1
 8004244:	d113      	bne.n	800426e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	881a      	ldrh	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d119      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x1b8>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d014      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	b292      	uxth	r2, r2
 8004292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042ac:	2301      	movs	r3, #1
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042b0:	f7fe fcfe 	bl	8002cb0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042bc:	429a      	cmp	r2, r3
 80042be:	d807      	bhi.n	80042d0 <HAL_SPI_TransmitReceive+0x1d8>
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d003      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042ce:	e0a7      	b.n	8004420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1a6      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x130>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1a1      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x130>
 80042e4:	e07c      	b.n	80043e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x1fc>
 80042ee:	8b7b      	ldrh	r3, [r7, #26]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d16b      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	7812      	ldrb	r2, [r2, #0]
 8004300:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431a:	e057      	b.n	80043cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d11c      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x26c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d017      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x26c>
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d114      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d119      	bne.n	80043a6 <HAL_SPI_TransmitReceive+0x2ae>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d014      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a2:	2301      	movs	r3, #1
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043a6:	f7fe fc83 	bl	8002cb0 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d803      	bhi.n	80043be <HAL_SPI_TransmitReceive+0x2c6>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d102      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x2cc>
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043ca:	e029      	b.n	8004420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1a2      	bne.n	800431c <HAL_SPI_TransmitReceive+0x224>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d19d      	bne.n	800431c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f8e5 	bl	80045b4 <SPI_EndRxTxTransaction>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043fc:	e010      	b.n	8004420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	e000      	b.n	8004420 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800441e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004434:	4618      	mov	r0, r3
 8004436:	3730      	adds	r7, #48	; 0x30
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800444c:	e04c      	b.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d048      	beq.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004456:	f7fe fc2b 	bl	8002cb0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d902      	bls.n	800446c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d13d      	bne.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800447a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004484:	d111      	bne.n	80044aa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448e:	d004      	beq.n	800449a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d107      	bne.n	80044aa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b2:	d10f      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e00f      	b.n	8004508 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	d1a3      	bne.n	800444e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004524:	d111      	bne.n	800454a <SPI_EndRxTransaction+0x3a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	d004      	beq.n	800453a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004538:	d107      	bne.n	800454a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004552:	d117      	bne.n	8004584 <SPI_EndRxTransaction+0x74>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455c:	d112      	bne.n	8004584 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2200      	movs	r2, #0
 8004566:	2101      	movs	r1, #1
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff ff67 	bl	800443c <SPI_WaitFlagStateUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01a      	beq.n	80045aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e013      	b.n	80045ac <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ff54 	bl	800443c <SPI_WaitFlagStateUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e000      	b.n	80045ac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff ff36 	bl	800443c <SPI_WaitFlagStateUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e000      	b.n	80045e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e01d      	b.n	800463e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fd26 	bl	8002068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fa10 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b06      	cmp	r3, #6
 800466e:	d007      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d122      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d11b      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0202 	mvn.w	r2, #2
 80046b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9a4 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 80046d4:	e005      	b.n	80046e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f997 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f9a6 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d122      	bne.n	800473c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d11b      	bne.n	800473c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0204 	mvn.w	r2, #4
 800470c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f97a 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 8004728:	e005      	b.n	8004736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f96d 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f97c 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b08      	cmp	r3, #8
 8004748:	d122      	bne.n	8004790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d11b      	bne.n	8004790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0208 	mvn.w	r2, #8
 8004760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2204      	movs	r2, #4
 8004766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f950 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 800477c:	e005      	b.n	800478a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f943 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f952 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b10      	cmp	r3, #16
 800479c:	d122      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d11b      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0210 	mvn.w	r2, #16
 80047b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2208      	movs	r2, #8
 80047ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f926 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f919 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f928 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10e      	bne.n	8004810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0201 	mvn.w	r2, #1
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd f9ea 	bl	8001be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d10e      	bne.n	800483c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b80      	cmp	r3, #128	; 0x80
 800482a:	d107      	bne.n	800483c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa51 	bl	8004cde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d10e      	bne.n	8004868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d107      	bne.n	8004868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8ec 	bl	8004a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d10e      	bne.n	8004894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b20      	cmp	r3, #32
 8004882:	d107      	bne.n	8004894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0220 	mvn.w	r2, #32
 800488c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa1c 	bl	8004ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_TIM_ConfigClockSource+0x18>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e0a6      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x166>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d067      	beq.n	80049bc <HAL_TIM_ConfigClockSource+0x120>
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d80b      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x6c>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d073      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0x140>
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d802      	bhi.n	80048fe <HAL_TIM_ConfigClockSource+0x62>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d06f      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048fc:	e078      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d06c      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0x140>
 8004902:	2b30      	cmp	r3, #48	; 0x30
 8004904:	d06a      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004906:	e073      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004908:	2b70      	cmp	r3, #112	; 0x70
 800490a:	d00d      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0x8c>
 800490c:	2b70      	cmp	r3, #112	; 0x70
 800490e:	d804      	bhi.n	800491a <HAL_TIM_ConfigClockSource+0x7e>
 8004910:	2b50      	cmp	r3, #80	; 0x50
 8004912:	d033      	beq.n	800497c <HAL_TIM_ConfigClockSource+0xe0>
 8004914:	2b60      	cmp	r3, #96	; 0x60
 8004916:	d041      	beq.n	800499c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004918:	e06a      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d066      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x152>
 8004920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004924:	d017      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004926:	e063      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f000 f965 	bl	8004c06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800494a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]
      break;
 8004954:	e04c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6899      	ldr	r1, [r3, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f000 f94e 	bl	8004c06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004978:	609a      	str	r2, [r3, #8]
      break;
 800497a:	e039      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	461a      	mov	r2, r3
 800498a:	f000 f8c5 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2150      	movs	r1, #80	; 0x50
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f91c 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 800499a:	e029      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	461a      	mov	r2, r3
 80049aa:	f000 f8e3 	bl	8004b74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2160      	movs	r1, #96	; 0x60
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f90c 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 80049ba:	e019      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	461a      	mov	r2, r3
 80049ca:	f000 f8a5 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2140      	movs	r1, #64	; 0x40
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f8fc 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 80049da:	e009      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 f8f3 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 80049ec:	e000      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
	...

08004a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a29      	ldr	r2, [pc, #164]	; (8004b0c <TIM_Base_SetConfig+0xb8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_Base_SetConfig+0x30>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d007      	beq.n	8004a84 <TIM_Base_SetConfig+0x30>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <TIM_Base_SetConfig+0xbc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0x30>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <TIM_Base_SetConfig+0xc0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d108      	bne.n	8004a96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1c      	ldr	r2, [pc, #112]	; (8004b0c <TIM_Base_SetConfig+0xb8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_Base_SetConfig+0x62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d007      	beq.n	8004ab6 <TIM_Base_SetConfig+0x62>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <TIM_Base_SetConfig+0xbc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_Base_SetConfig+0x62>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <TIM_Base_SetConfig+0xc0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d108      	bne.n	8004ac8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <TIM_Base_SetConfig+0xb8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d103      	bne.n	8004afc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	615a      	str	r2, [r3, #20]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800

08004b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 030a 	bic.w	r3, r3, #10
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f023 0210 	bic.w	r2, r3, #16
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	031b      	lsls	r3, r3, #12
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f043 0307 	orr.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b087      	sub	sp, #28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	021a      	lsls	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e032      	b.n	8004cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c94:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e03f      	b.n	8004d82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd f9cc 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2224      	movs	r2, #36	; 0x24
 8004d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fc8b 	bl	8005650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b088      	sub	sp, #32
 8004d8e:	af02      	add	r7, sp, #8
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	f040 8083 	bne.w	8004eb2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_UART_Transmit+0x2e>
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e07b      	b.n	8004eb4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Transmit+0x40>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e074      	b.n	8004eb4 <HAL_UART_Transmit+0x12a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2221      	movs	r2, #33	; 0x21
 8004ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004de0:	f7fd ff66 	bl	8002cb0 <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004df2:	e042      	b.n	8004e7a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	d122      	bne.n	8004e52 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fa56 	bl	80052c8 <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e046      	b.n	8004eb4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e38:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	3302      	adds	r3, #2
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	e017      	b.n	8004e7a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	e013      	b.n	8004e7a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2180      	movs	r1, #128	; 0x80
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fa33 	bl	80052c8 <UART_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e023      	b.n	8004eb4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	60ba      	str	r2, [r7, #8]
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1b7      	bne.n	8004df4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2140      	movs	r1, #64	; 0x40
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fa1a 	bl	80052c8 <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e00a      	b.n	8004eb4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d140      	bne.n	8004f58 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_Receive_IT+0x26>
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e039      	b.n	8004f5a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_UART_Receive_IT+0x38>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e032      	b.n	8004f5a <HAL_UART_Receive_IT+0x9e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	88fa      	ldrh	r2, [r7, #6]
 8004f0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2222      	movs	r2, #34	; 0x22
 8004f18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f32:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0220 	orr.w	r2, r2, #32
 8004f52:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004f7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695a      	ldr	r2, [r3, #20]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00f      	beq.n	8004fb8 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d004      	beq.n	8004fb0 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	4a3e      	ldr	r2, [pc, #248]	; (80050a4 <HAL_UART_Abort_IT+0x140>)
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34
 8004fae:	e003      	b.n	8004fb8 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00f      	beq.n	8004fe0 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	4a35      	ldr	r2, [pc, #212]	; (80050a8 <HAL_UART_Abort_IT+0x144>)
 8004fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8004fd6:	e003      	b.n	8004fe0 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	2200      	movs	r2, #0
 8004fde:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01a      	beq.n	8005024 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ffc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd ff8a 	bl	8002f24 <HAL_DMA_Abort_IT>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	2200      	movs	r2, #0
 800501c:	635a      	str	r2, [r3, #52]	; 0x34
 800501e:	e001      	b.n	8005024 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01c      	beq.n	800506c <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005040:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	4618      	mov	r0, r3
 8005050:	f7fd ff68 	bl	8002f24 <HAL_DMA_Abort_IT>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	2200      	movs	r2, #0
 8005060:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 8005062:	2301      	movs	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e001      	b.n	800506c <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d113      	bne.n	800509a <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f90e 	bl	80052b6 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	080053bf 	.word	0x080053bf
 80050a8:	08005419 	.word	0x08005419

080050ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_UART_IRQHandler+0x52>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa28 	bl	800554c <UART_Receive_IT>
      return;
 80050fc:	e0cc      	b.n	8005298 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80ab 	beq.w	800525c <HAL_UART_IRQHandler+0x1b0>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d105      	bne.n	800511c <HAL_UART_IRQHandler+0x70>
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80a0 	beq.w	800525c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_UART_IRQHandler+0x90>
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	f043 0201 	orr.w	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_UART_IRQHandler+0xb0>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005154:	f043 0202 	orr.w	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_UART_IRQHandler+0xd0>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005174:	f043 0204 	orr.w	r2, r3, #4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_UART_IRQHandler+0xf0>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	f043 0208 	orr.w	r2, r3, #8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d078      	beq.n	8005296 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <HAL_UART_IRQHandler+0x112>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f9c7 	bl	800554c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <HAL_UART_IRQHandler+0x13a>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d031      	beq.n	800524a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8b8 	bl	800535c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d023      	beq.n	8005242 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005208:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <HAL_UART_IRQHandler+0x1f4>)
 8005218:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fe80 	bl	8002f24 <HAL_DMA_Abort_IT>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00e      	b.n	8005258 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc fd12 	bl	8001c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00a      	b.n	8005258 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fd0e 	bl	8001c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e006      	b.n	8005258 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fd0a 	bl	8001c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005256:	e01e      	b.n	8005296 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	bf00      	nop
    return;
 800525a:	e01c      	b.n	8005296 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_UART_IRQHandler+0x1cc>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8fe 	bl	8005472 <UART_Transmit_IT>
    return;
 8005276:	e00f      	b.n	8005298 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_UART_IRQHandler+0x1ec>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f945 	bl	800551c <UART_EndTransmit_IT>
    return;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005296:	bf00      	nop
  }
}
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	08005397 	.word	0x08005397

080052a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d8:	e02c      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d028      	beq.n	8005334 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052e8:	f7fd fce2 	bl	8002cb0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d21d      	bcs.n	8005334 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005306:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e00f      	b.n	8005354 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	429a      	cmp	r2, r3
 8005350:	d0c3      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005372:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7fc fc57 	bl	8001c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	2200      	movs	r2, #0
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d114      	bne.n	8005410 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff ff54 	bl	80052b6 <HAL_UART_AbortCpltCallback>
 800540e:	e000      	b.n	8005412 <UART_DMATxAbortCallback+0x54>
      return;
 8005410:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542a:	2200      	movs	r2, #0
 800542c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543c:	2b00      	cmp	r3, #0
 800543e:	d114      	bne.n	800546a <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff ff27 	bl	80052b6 <HAL_UART_AbortCpltCallback>
 8005468:	e000      	b.n	800546c <UART_DMARxAbortCallback+0x54>
      return;
 800546a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b21      	cmp	r3, #33	; 0x21
 8005484:	d144      	bne.n	8005510 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548e:	d11a      	bne.n	80054c6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]
 80054b8:	e00e      	b.n	80054d8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	621a      	str	r2, [r3, #32]
 80054c4:	e008      	b.n	80054d8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6211      	str	r1, [r2, #32]
 80054d0:	781a      	ldrb	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10f      	bne.n	800550c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005532:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff feb1 	bl	80052a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b22      	cmp	r3, #34	; 0x22
 800555e:	d171      	bne.n	8005644 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d123      	bne.n	80055b2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10e      	bne.n	8005596 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	1c9a      	adds	r2, r3, #2
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	629a      	str	r2, [r3, #40]	; 0x28
 8005594:	e029      	b.n	80055ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	b29b      	uxth	r3, r3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
 80055b0:	e01b      	b.n	80055ea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6858      	ldr	r0, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	1c59      	adds	r1, r3, #1
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6291      	str	r1, [r2, #40]	; 0x28
 80055ca:	b2c2      	uxtb	r2, r0
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	e00c      	b.n	80055ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	1c58      	adds	r0, r3, #1
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	6288      	str	r0, [r1, #40]	; 0x28
 80055e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	4619      	mov	r1, r3
 80055f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d120      	bne.n	8005640 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0220 	bic.w	r2, r2, #32
 800560c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800561c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fc fb02 	bl	8001c40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e002      	b.n	8005646 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800568a:	f023 030c 	bic.w	r3, r3, #12
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	430b      	orrs	r3, r1
 8005696:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a52      	ldr	r2, [pc, #328]	; (80057fc <UART_SetConfig+0x1ac>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d14e      	bne.n	8005756 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056b8:	f7fe fa4e 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 80056bc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	4a4a      	ldr	r2, [pc, #296]	; (8005800 <UART_SetConfig+0x1b0>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	0119      	lsls	r1, r3, #4
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009a      	lsls	r2, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f4:	4b42      	ldr	r3, [pc, #264]	; (8005800 <UART_SetConfig+0x1b0>)
 80056f6:	fba3 0302 	umull	r0, r3, r3, r2
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	2064      	movs	r0, #100	; 0x64
 80056fe:	fb00 f303 	mul.w	r3, r0, r3
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	3332      	adds	r3, #50	; 0x32
 8005708:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <UART_SetConfig+0x1b0>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005714:	4419      	add	r1, r3
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009a      	lsls	r2, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fbb2 f2f3 	udiv	r2, r2, r3
 800572c:	4b34      	ldr	r3, [pc, #208]	; (8005800 <UART_SetConfig+0x1b0>)
 800572e:	fba3 0302 	umull	r0, r3, r3, r2
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	2064      	movs	r0, #100	; 0x64
 8005736:	fb00 f303 	mul.w	r3, r0, r3
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	3332      	adds	r3, #50	; 0x32
 8005740:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <UART_SetConfig+0x1b0>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	440a      	add	r2, r1
 8005752:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005754:	e04d      	b.n	80057f2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005756:	f7fe f9eb 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 800575a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009a      	lsls	r2, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	4a23      	ldr	r2, [pc, #140]	; (8005800 <UART_SetConfig+0x1b0>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	0119      	lsls	r1, r3, #4
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009a      	lsls	r2, r3, #2
 8005786:	441a      	add	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005792:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <UART_SetConfig+0x1b0>)
 8005794:	fba3 0302 	umull	r0, r3, r3, r2
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	2064      	movs	r0, #100	; 0x64
 800579c:	fb00 f303 	mul.w	r3, r0, r3
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	3332      	adds	r3, #50	; 0x32
 80057a6:	4a16      	ldr	r2, [pc, #88]	; (8005800 <UART_SetConfig+0x1b0>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b2:	4419      	add	r1, r3
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009a      	lsls	r2, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ca:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <UART_SetConfig+0x1b0>)
 80057cc:	fba3 0302 	umull	r0, r3, r3, r2
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	2064      	movs	r0, #100	; 0x64
 80057d4:	fb00 f303 	mul.w	r3, r0, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	3332      	adds	r3, #50	; 0x32
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <UART_SetConfig+0x1b0>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	f003 020f 	and.w	r2, r3, #15
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	440a      	add	r2, r1
 80057f0:	609a      	str	r2, [r3, #8]
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40013800 	.word	0x40013800
 8005800:	51eb851f 	.word	0x51eb851f

08005804 <__errno>:
 8005804:	4b01      	ldr	r3, [pc, #4]	; (800580c <__errno+0x8>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	2000002c 	.word	0x2000002c

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	2500      	movs	r5, #0
 8005814:	4e0c      	ldr	r6, [pc, #48]	; (8005848 <__libc_init_array+0x38>)
 8005816:	4c0d      	ldr	r4, [pc, #52]	; (800584c <__libc_init_array+0x3c>)
 8005818:	1ba4      	subs	r4, r4, r6
 800581a:	10a4      	asrs	r4, r4, #2
 800581c:	42a5      	cmp	r5, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	f000 fc5e 	bl	80060e0 <_init>
 8005824:	2500      	movs	r5, #0
 8005826:	4e0a      	ldr	r6, [pc, #40]	; (8005850 <__libc_init_array+0x40>)
 8005828:	4c0a      	ldr	r4, [pc, #40]	; (8005854 <__libc_init_array+0x44>)
 800582a:	1ba4      	subs	r4, r4, r6
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	42a5      	cmp	r5, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005838:	4798      	blx	r3
 800583a:	3501      	adds	r5, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005842:	4798      	blx	r3
 8005844:	3501      	adds	r5, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	08006404 	.word	0x08006404
 800584c:	08006404 	.word	0x08006404
 8005850:	08006404 	.word	0x08006404
 8005854:	08006408 	.word	0x08006408

08005858 <memcpy>:
 8005858:	b510      	push	{r4, lr}
 800585a:	1e43      	subs	r3, r0, #1
 800585c:	440a      	add	r2, r1
 800585e:	4291      	cmp	r1, r2
 8005860:	d100      	bne.n	8005864 <memcpy+0xc>
 8005862:	bd10      	pop	{r4, pc}
 8005864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586c:	e7f7      	b.n	800585e <memcpy+0x6>

0800586e <memset>:
 800586e:	4603      	mov	r3, r0
 8005870:	4402      	add	r2, r0
 8005872:	4293      	cmp	r3, r2
 8005874:	d100      	bne.n	8005878 <memset+0xa>
 8005876:	4770      	bx	lr
 8005878:	f803 1b01 	strb.w	r1, [r3], #1
 800587c:	e7f9      	b.n	8005872 <memset+0x4>
	...

08005880 <siprintf>:
 8005880:	b40e      	push	{r1, r2, r3}
 8005882:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005886:	b500      	push	{lr}
 8005888:	b09c      	sub	sp, #112	; 0x70
 800588a:	ab1d      	add	r3, sp, #116	; 0x74
 800588c:	9002      	str	r0, [sp, #8]
 800588e:	9006      	str	r0, [sp, #24]
 8005890:	9107      	str	r1, [sp, #28]
 8005892:	9104      	str	r1, [sp, #16]
 8005894:	4808      	ldr	r0, [pc, #32]	; (80058b8 <siprintf+0x38>)
 8005896:	4909      	ldr	r1, [pc, #36]	; (80058bc <siprintf+0x3c>)
 8005898:	f853 2b04 	ldr.w	r2, [r3], #4
 800589c:	9105      	str	r1, [sp, #20]
 800589e:	6800      	ldr	r0, [r0, #0]
 80058a0:	a902      	add	r1, sp, #8
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	f000 f88e 	bl	80059c4 <_svfiprintf_r>
 80058a8:	2200      	movs	r2, #0
 80058aa:	9b02      	ldr	r3, [sp, #8]
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	b01c      	add	sp, #112	; 0x70
 80058b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058b4:	b003      	add	sp, #12
 80058b6:	4770      	bx	lr
 80058b8:	2000002c 	.word	0x2000002c
 80058bc:	ffff0208 	.word	0xffff0208

080058c0 <strchr>:
 80058c0:	b2c9      	uxtb	r1, r1
 80058c2:	4603      	mov	r3, r0
 80058c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c8:	b11a      	cbz	r2, 80058d2 <strchr+0x12>
 80058ca:	428a      	cmp	r2, r1
 80058cc:	d1f9      	bne.n	80058c2 <strchr+0x2>
 80058ce:	4618      	mov	r0, r3
 80058d0:	4770      	bx	lr
 80058d2:	2900      	cmp	r1, #0
 80058d4:	bf18      	it	ne
 80058d6:	2300      	movne	r3, #0
 80058d8:	e7f9      	b.n	80058ce <strchr+0xe>

080058da <strcpy>:
 80058da:	4603      	mov	r3, r0
 80058dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058e0:	f803 2b01 	strb.w	r2, [r3], #1
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d1f9      	bne.n	80058dc <strcpy+0x2>
 80058e8:	4770      	bx	lr

080058ea <strncmp>:
 80058ea:	b510      	push	{r4, lr}
 80058ec:	b16a      	cbz	r2, 800590a <strncmp+0x20>
 80058ee:	3901      	subs	r1, #1
 80058f0:	1884      	adds	r4, r0, r2
 80058f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80058f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d103      	bne.n	8005906 <strncmp+0x1c>
 80058fe:	42a0      	cmp	r0, r4
 8005900:	d001      	beq.n	8005906 <strncmp+0x1c>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f5      	bne.n	80058f2 <strncmp+0x8>
 8005906:	1a98      	subs	r0, r3, r2
 8005908:	bd10      	pop	{r4, pc}
 800590a:	4610      	mov	r0, r2
 800590c:	e7fc      	b.n	8005908 <strncmp+0x1e>

0800590e <__ssputs_r>:
 800590e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005912:	688e      	ldr	r6, [r1, #8]
 8005914:	4682      	mov	sl, r0
 8005916:	429e      	cmp	r6, r3
 8005918:	460c      	mov	r4, r1
 800591a:	4690      	mov	r8, r2
 800591c:	4699      	mov	r9, r3
 800591e:	d837      	bhi.n	8005990 <__ssputs_r+0x82>
 8005920:	898a      	ldrh	r2, [r1, #12]
 8005922:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005926:	d031      	beq.n	800598c <__ssputs_r+0x7e>
 8005928:	2302      	movs	r3, #2
 800592a:	6825      	ldr	r5, [r4, #0]
 800592c:	6909      	ldr	r1, [r1, #16]
 800592e:	1a6f      	subs	r7, r5, r1
 8005930:	6965      	ldr	r5, [r4, #20]
 8005932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005936:	fb95 f5f3 	sdiv	r5, r5, r3
 800593a:	f109 0301 	add.w	r3, r9, #1
 800593e:	443b      	add	r3, r7
 8005940:	429d      	cmp	r5, r3
 8005942:	bf38      	it	cc
 8005944:	461d      	movcc	r5, r3
 8005946:	0553      	lsls	r3, r2, #21
 8005948:	d530      	bpl.n	80059ac <__ssputs_r+0x9e>
 800594a:	4629      	mov	r1, r5
 800594c:	f000 fb2e 	bl	8005fac <_malloc_r>
 8005950:	4606      	mov	r6, r0
 8005952:	b950      	cbnz	r0, 800596a <__ssputs_r+0x5c>
 8005954:	230c      	movs	r3, #12
 8005956:	f04f 30ff 	mov.w	r0, #4294967295
 800595a:	f8ca 3000 	str.w	r3, [sl]
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596a:	463a      	mov	r2, r7
 800596c:	6921      	ldr	r1, [r4, #16]
 800596e:	f7ff ff73 	bl	8005858 <memcpy>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	6126      	str	r6, [r4, #16]
 8005980:	443e      	add	r6, r7
 8005982:	6026      	str	r6, [r4, #0]
 8005984:	464e      	mov	r6, r9
 8005986:	6165      	str	r5, [r4, #20]
 8005988:	1bed      	subs	r5, r5, r7
 800598a:	60a5      	str	r5, [r4, #8]
 800598c:	454e      	cmp	r6, r9
 800598e:	d900      	bls.n	8005992 <__ssputs_r+0x84>
 8005990:	464e      	mov	r6, r9
 8005992:	4632      	mov	r2, r6
 8005994:	4641      	mov	r1, r8
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	f000 faa2 	bl	8005ee0 <memmove>
 800599c:	68a3      	ldr	r3, [r4, #8]
 800599e:	2000      	movs	r0, #0
 80059a0:	1b9b      	subs	r3, r3, r6
 80059a2:	60a3      	str	r3, [r4, #8]
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	441e      	add	r6, r3
 80059a8:	6026      	str	r6, [r4, #0]
 80059aa:	e7dc      	b.n	8005966 <__ssputs_r+0x58>
 80059ac:	462a      	mov	r2, r5
 80059ae:	f000 fb57 	bl	8006060 <_realloc_r>
 80059b2:	4606      	mov	r6, r0
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d1e2      	bne.n	800597e <__ssputs_r+0x70>
 80059b8:	6921      	ldr	r1, [r4, #16]
 80059ba:	4650      	mov	r0, sl
 80059bc:	f000 faaa 	bl	8005f14 <_free_r>
 80059c0:	e7c8      	b.n	8005954 <__ssputs_r+0x46>
	...

080059c4 <_svfiprintf_r>:
 80059c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c8:	461d      	mov	r5, r3
 80059ca:	898b      	ldrh	r3, [r1, #12]
 80059cc:	b09d      	sub	sp, #116	; 0x74
 80059ce:	061f      	lsls	r7, r3, #24
 80059d0:	4680      	mov	r8, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	4616      	mov	r6, r2
 80059d6:	d50f      	bpl.n	80059f8 <_svfiprintf_r+0x34>
 80059d8:	690b      	ldr	r3, [r1, #16]
 80059da:	b96b      	cbnz	r3, 80059f8 <_svfiprintf_r+0x34>
 80059dc:	2140      	movs	r1, #64	; 0x40
 80059de:	f000 fae5 	bl	8005fac <_malloc_r>
 80059e2:	6020      	str	r0, [r4, #0]
 80059e4:	6120      	str	r0, [r4, #16]
 80059e6:	b928      	cbnz	r0, 80059f4 <_svfiprintf_r+0x30>
 80059e8:	230c      	movs	r3, #12
 80059ea:	f8c8 3000 	str.w	r3, [r8]
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	e0c8      	b.n	8005b86 <_svfiprintf_r+0x1c2>
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	6163      	str	r3, [r4, #20]
 80059f8:	2300      	movs	r3, #0
 80059fa:	9309      	str	r3, [sp, #36]	; 0x24
 80059fc:	2320      	movs	r3, #32
 80059fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a02:	2330      	movs	r3, #48	; 0x30
 8005a04:	f04f 0b01 	mov.w	fp, #1
 8005a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a0c:	9503      	str	r5, [sp, #12]
 8005a0e:	4637      	mov	r7, r6
 8005a10:	463d      	mov	r5, r7
 8005a12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a16:	b10b      	cbz	r3, 8005a1c <_svfiprintf_r+0x58>
 8005a18:	2b25      	cmp	r3, #37	; 0x25
 8005a1a:	d13e      	bne.n	8005a9a <_svfiprintf_r+0xd6>
 8005a1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a20:	d00b      	beq.n	8005a3a <_svfiprintf_r+0x76>
 8005a22:	4653      	mov	r3, sl
 8005a24:	4632      	mov	r2, r6
 8005a26:	4621      	mov	r1, r4
 8005a28:	4640      	mov	r0, r8
 8005a2a:	f7ff ff70 	bl	800590e <__ssputs_r>
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f000 80a4 	beq.w	8005b7c <_svfiprintf_r+0x1b8>
 8005a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a36:	4453      	add	r3, sl
 8005a38:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3a:	783b      	ldrb	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 809d 	beq.w	8005b7c <_svfiprintf_r+0x1b8>
 8005a42:	2300      	movs	r3, #0
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295
 8005a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	9307      	str	r3, [sp, #28]
 8005a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a54:	931a      	str	r3, [sp, #104]	; 0x68
 8005a56:	462f      	mov	r7, r5
 8005a58:	2205      	movs	r2, #5
 8005a5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a5e:	4850      	ldr	r0, [pc, #320]	; (8005ba0 <_svfiprintf_r+0x1dc>)
 8005a60:	f000 fa30 	bl	8005ec4 <memchr>
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	b9d0      	cbnz	r0, 8005a9e <_svfiprintf_r+0xda>
 8005a68:	06d9      	lsls	r1, r3, #27
 8005a6a:	bf44      	itt	mi
 8005a6c:	2220      	movmi	r2, #32
 8005a6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a72:	071a      	lsls	r2, r3, #28
 8005a74:	bf44      	itt	mi
 8005a76:	222b      	movmi	r2, #43	; 0x2b
 8005a78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a7c:	782a      	ldrb	r2, [r5, #0]
 8005a7e:	2a2a      	cmp	r2, #42	; 0x2a
 8005a80:	d015      	beq.n	8005aae <_svfiprintf_r+0xea>
 8005a82:	462f      	mov	r7, r5
 8005a84:	2000      	movs	r0, #0
 8005a86:	250a      	movs	r5, #10
 8005a88:	9a07      	ldr	r2, [sp, #28]
 8005a8a:	4639      	mov	r1, r7
 8005a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a90:	3b30      	subs	r3, #48	; 0x30
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d94d      	bls.n	8005b32 <_svfiprintf_r+0x16e>
 8005a96:	b1b8      	cbz	r0, 8005ac8 <_svfiprintf_r+0x104>
 8005a98:	e00f      	b.n	8005aba <_svfiprintf_r+0xf6>
 8005a9a:	462f      	mov	r7, r5
 8005a9c:	e7b8      	b.n	8005a10 <_svfiprintf_r+0x4c>
 8005a9e:	4a40      	ldr	r2, [pc, #256]	; (8005ba0 <_svfiprintf_r+0x1dc>)
 8005aa0:	463d      	mov	r5, r7
 8005aa2:	1a80      	subs	r0, r0, r2
 8005aa4:	fa0b f000 	lsl.w	r0, fp, r0
 8005aa8:	4318      	orrs	r0, r3
 8005aaa:	9004      	str	r0, [sp, #16]
 8005aac:	e7d3      	b.n	8005a56 <_svfiprintf_r+0x92>
 8005aae:	9a03      	ldr	r2, [sp, #12]
 8005ab0:	1d11      	adds	r1, r2, #4
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	9103      	str	r1, [sp, #12]
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	db01      	blt.n	8005abe <_svfiprintf_r+0xfa>
 8005aba:	9207      	str	r2, [sp, #28]
 8005abc:	e004      	b.n	8005ac8 <_svfiprintf_r+0x104>
 8005abe:	4252      	negs	r2, r2
 8005ac0:	f043 0302 	orr.w	r3, r3, #2
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	9304      	str	r3, [sp, #16]
 8005ac8:	783b      	ldrb	r3, [r7, #0]
 8005aca:	2b2e      	cmp	r3, #46	; 0x2e
 8005acc:	d10c      	bne.n	8005ae8 <_svfiprintf_r+0x124>
 8005ace:	787b      	ldrb	r3, [r7, #1]
 8005ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad2:	d133      	bne.n	8005b3c <_svfiprintf_r+0x178>
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	3702      	adds	r7, #2
 8005ad8:	1d1a      	adds	r2, r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	9203      	str	r2, [sp, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bfb8      	it	lt
 8005ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ae6:	9305      	str	r3, [sp, #20]
 8005ae8:	4d2e      	ldr	r5, [pc, #184]	; (8005ba4 <_svfiprintf_r+0x1e0>)
 8005aea:	2203      	movs	r2, #3
 8005aec:	7839      	ldrb	r1, [r7, #0]
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 f9e8 	bl	8005ec4 <memchr>
 8005af4:	b138      	cbz	r0, 8005b06 <_svfiprintf_r+0x142>
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	1b40      	subs	r0, r0, r5
 8005afa:	fa03 f000 	lsl.w	r0, r3, r0
 8005afe:	9b04      	ldr	r3, [sp, #16]
 8005b00:	3701      	adds	r7, #1
 8005b02:	4303      	orrs	r3, r0
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	7839      	ldrb	r1, [r7, #0]
 8005b08:	2206      	movs	r2, #6
 8005b0a:	4827      	ldr	r0, [pc, #156]	; (8005ba8 <_svfiprintf_r+0x1e4>)
 8005b0c:	1c7e      	adds	r6, r7, #1
 8005b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b12:	f000 f9d7 	bl	8005ec4 <memchr>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d038      	beq.n	8005b8c <_svfiprintf_r+0x1c8>
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <_svfiprintf_r+0x1e8>)
 8005b1c:	bb13      	cbnz	r3, 8005b64 <_svfiprintf_r+0x1a0>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	3307      	adds	r3, #7
 8005b22:	f023 0307 	bic.w	r3, r3, #7
 8005b26:	3308      	adds	r3, #8
 8005b28:	9303      	str	r3, [sp, #12]
 8005b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2c:	444b      	add	r3, r9
 8005b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b30:	e76d      	b.n	8005a0e <_svfiprintf_r+0x4a>
 8005b32:	fb05 3202 	mla	r2, r5, r2, r3
 8005b36:	2001      	movs	r0, #1
 8005b38:	460f      	mov	r7, r1
 8005b3a:	e7a6      	b.n	8005a8a <_svfiprintf_r+0xc6>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	250a      	movs	r5, #10
 8005b40:	4619      	mov	r1, r3
 8005b42:	3701      	adds	r7, #1
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	4638      	mov	r0, r7
 8005b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b4c:	3a30      	subs	r2, #48	; 0x30
 8005b4e:	2a09      	cmp	r2, #9
 8005b50:	d903      	bls.n	8005b5a <_svfiprintf_r+0x196>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0c8      	beq.n	8005ae8 <_svfiprintf_r+0x124>
 8005b56:	9105      	str	r1, [sp, #20]
 8005b58:	e7c6      	b.n	8005ae8 <_svfiprintf_r+0x124>
 8005b5a:	fb05 2101 	mla	r1, r5, r1, r2
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4607      	mov	r7, r0
 8005b62:	e7f0      	b.n	8005b46 <_svfiprintf_r+0x182>
 8005b64:	ab03      	add	r3, sp, #12
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <_svfiprintf_r+0x1ec>)
 8005b6c:	a904      	add	r1, sp, #16
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f3af 8000 	nop.w
 8005b74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b78:	4681      	mov	r9, r0
 8005b7a:	d1d6      	bne.n	8005b2a <_svfiprintf_r+0x166>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	065b      	lsls	r3, r3, #25
 8005b80:	f53f af35 	bmi.w	80059ee <_svfiprintf_r+0x2a>
 8005b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b86:	b01d      	add	sp, #116	; 0x74
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8c:	ab03      	add	r3, sp, #12
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4622      	mov	r2, r4
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <_svfiprintf_r+0x1ec>)
 8005b94:	a904      	add	r1, sp, #16
 8005b96:	4640      	mov	r0, r8
 8005b98:	f000 f882 	bl	8005ca0 <_printf_i>
 8005b9c:	e7ea      	b.n	8005b74 <_svfiprintf_r+0x1b0>
 8005b9e:	bf00      	nop
 8005ba0:	080063d0 	.word	0x080063d0
 8005ba4:	080063d6 	.word	0x080063d6
 8005ba8:	080063da 	.word	0x080063da
 8005bac:	00000000 	.word	0x00000000
 8005bb0:	0800590f 	.word	0x0800590f

08005bb4 <_printf_common>:
 8005bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb8:	4691      	mov	r9, r2
 8005bba:	461f      	mov	r7, r3
 8005bbc:	688a      	ldr	r2, [r1, #8]
 8005bbe:	690b      	ldr	r3, [r1, #16]
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bfb8      	it	lt
 8005bc6:	4613      	movlt	r3, r2
 8005bc8:	f8c9 3000 	str.w	r3, [r9]
 8005bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd6:	b112      	cbz	r2, 8005bde <_printf_common+0x2a>
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f8c9 3000 	str.w	r3, [r9]
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	0699      	lsls	r1, r3, #26
 8005be2:	bf42      	ittt	mi
 8005be4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005be8:	3302      	addmi	r3, #2
 8005bea:	f8c9 3000 	strmi.w	r3, [r9]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	f015 0506 	ands.w	r5, r5, #6
 8005bf4:	d107      	bne.n	8005c06 <_printf_common+0x52>
 8005bf6:	f104 0a19 	add.w	sl, r4, #25
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	dc29      	bgt.n	8005c5a <_printf_common+0xa6>
 8005c06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	3300      	adds	r3, #0
 8005c0e:	bf18      	it	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	0692      	lsls	r2, r2, #26
 8005c14:	d42e      	bmi.n	8005c74 <_printf_common+0xc0>
 8005c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	47c0      	blx	r8
 8005c20:	3001      	adds	r0, #1
 8005c22:	d021      	beq.n	8005c68 <_printf_common+0xb4>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	68e5      	ldr	r5, [r4, #12]
 8005c28:	f003 0306 	and.w	r3, r3, #6
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	bf18      	it	ne
 8005c30:	2500      	movne	r5, #0
 8005c32:	f8d9 2000 	ldr.w	r2, [r9]
 8005c36:	f04f 0900 	mov.w	r9, #0
 8005c3a:	bf08      	it	eq
 8005c3c:	1aad      	subeq	r5, r5, r2
 8005c3e:	68a3      	ldr	r3, [r4, #8]
 8005c40:	6922      	ldr	r2, [r4, #16]
 8005c42:	bf08      	it	eq
 8005c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	bfc4      	itt	gt
 8005c4c:	1a9b      	subgt	r3, r3, r2
 8005c4e:	18ed      	addgt	r5, r5, r3
 8005c50:	341a      	adds	r4, #26
 8005c52:	454d      	cmp	r5, r9
 8005c54:	d11a      	bne.n	8005c8c <_printf_common+0xd8>
 8005c56:	2000      	movs	r0, #0
 8005c58:	e008      	b.n	8005c6c <_printf_common+0xb8>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	4639      	mov	r1, r7
 8005c60:	4630      	mov	r0, r6
 8005c62:	47c0      	blx	r8
 8005c64:	3001      	adds	r0, #1
 8005c66:	d103      	bne.n	8005c70 <_printf_common+0xbc>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c70:	3501      	adds	r5, #1
 8005c72:	e7c2      	b.n	8005bfa <_printf_common+0x46>
 8005c74:	2030      	movs	r0, #48	; 0x30
 8005c76:	18e1      	adds	r1, r4, r3
 8005c78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c82:	4422      	add	r2, r4
 8005c84:	3302      	adds	r3, #2
 8005c86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c8a:	e7c4      	b.n	8005c16 <_printf_common+0x62>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	4622      	mov	r2, r4
 8005c90:	4639      	mov	r1, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	47c0      	blx	r8
 8005c96:	3001      	adds	r0, #1
 8005c98:	d0e6      	beq.n	8005c68 <_printf_common+0xb4>
 8005c9a:	f109 0901 	add.w	r9, r9, #1
 8005c9e:	e7d8      	b.n	8005c52 <_printf_common+0x9e>

08005ca0 <_printf_i>:
 8005ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ca4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ca8:	460c      	mov	r4, r1
 8005caa:	7e09      	ldrb	r1, [r1, #24]
 8005cac:	b085      	sub	sp, #20
 8005cae:	296e      	cmp	r1, #110	; 0x6e
 8005cb0:	4617      	mov	r7, r2
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	4698      	mov	r8, r3
 8005cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cb8:	f000 80b3 	beq.w	8005e22 <_printf_i+0x182>
 8005cbc:	d822      	bhi.n	8005d04 <_printf_i+0x64>
 8005cbe:	2963      	cmp	r1, #99	; 0x63
 8005cc0:	d036      	beq.n	8005d30 <_printf_i+0x90>
 8005cc2:	d80a      	bhi.n	8005cda <_printf_i+0x3a>
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	f000 80b9 	beq.w	8005e3c <_printf_i+0x19c>
 8005cca:	2958      	cmp	r1, #88	; 0x58
 8005ccc:	f000 8083 	beq.w	8005dd6 <_printf_i+0x136>
 8005cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cd8:	e032      	b.n	8005d40 <_printf_i+0xa0>
 8005cda:	2964      	cmp	r1, #100	; 0x64
 8005cdc:	d001      	beq.n	8005ce2 <_printf_i+0x42>
 8005cde:	2969      	cmp	r1, #105	; 0x69
 8005ce0:	d1f6      	bne.n	8005cd0 <_printf_i+0x30>
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	0605      	lsls	r5, r0, #24
 8005ce8:	f103 0104 	add.w	r1, r3, #4
 8005cec:	d52a      	bpl.n	8005d44 <_printf_i+0xa4>
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6011      	str	r1, [r2, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da03      	bge.n	8005cfe <_printf_i+0x5e>
 8005cf6:	222d      	movs	r2, #45	; 0x2d
 8005cf8:	425b      	negs	r3, r3
 8005cfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cfe:	486f      	ldr	r0, [pc, #444]	; (8005ebc <_printf_i+0x21c>)
 8005d00:	220a      	movs	r2, #10
 8005d02:	e039      	b.n	8005d78 <_printf_i+0xd8>
 8005d04:	2973      	cmp	r1, #115	; 0x73
 8005d06:	f000 809d 	beq.w	8005e44 <_printf_i+0x1a4>
 8005d0a:	d808      	bhi.n	8005d1e <_printf_i+0x7e>
 8005d0c:	296f      	cmp	r1, #111	; 0x6f
 8005d0e:	d020      	beq.n	8005d52 <_printf_i+0xb2>
 8005d10:	2970      	cmp	r1, #112	; 0x70
 8005d12:	d1dd      	bne.n	8005cd0 <_printf_i+0x30>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	f043 0320 	orr.w	r3, r3, #32
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	e003      	b.n	8005d26 <_printf_i+0x86>
 8005d1e:	2975      	cmp	r1, #117	; 0x75
 8005d20:	d017      	beq.n	8005d52 <_printf_i+0xb2>
 8005d22:	2978      	cmp	r1, #120	; 0x78
 8005d24:	d1d4      	bne.n	8005cd0 <_printf_i+0x30>
 8005d26:	2378      	movs	r3, #120	; 0x78
 8005d28:	4865      	ldr	r0, [pc, #404]	; (8005ec0 <_printf_i+0x220>)
 8005d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d2e:	e055      	b.n	8005ddc <_printf_i+0x13c>
 8005d30:	6813      	ldr	r3, [r2, #0]
 8005d32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d36:	1d19      	adds	r1, r3, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6011      	str	r1, [r2, #0]
 8005d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d40:	2301      	movs	r3, #1
 8005d42:	e08c      	b.n	8005e5e <_printf_i+0x1be>
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d4a:	6011      	str	r1, [r2, #0]
 8005d4c:	bf18      	it	ne
 8005d4e:	b21b      	sxthne	r3, r3
 8005d50:	e7cf      	b.n	8005cf2 <_printf_i+0x52>
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	6825      	ldr	r5, [r4, #0]
 8005d56:	1d18      	adds	r0, r3, #4
 8005d58:	6010      	str	r0, [r2, #0]
 8005d5a:	0628      	lsls	r0, r5, #24
 8005d5c:	d501      	bpl.n	8005d62 <_printf_i+0xc2>
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	e002      	b.n	8005d68 <_printf_i+0xc8>
 8005d62:	0668      	lsls	r0, r5, #25
 8005d64:	d5fb      	bpl.n	8005d5e <_printf_i+0xbe>
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	296f      	cmp	r1, #111	; 0x6f
 8005d6a:	bf14      	ite	ne
 8005d6c:	220a      	movne	r2, #10
 8005d6e:	2208      	moveq	r2, #8
 8005d70:	4852      	ldr	r0, [pc, #328]	; (8005ebc <_printf_i+0x21c>)
 8005d72:	2100      	movs	r1, #0
 8005d74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d78:	6865      	ldr	r5, [r4, #4]
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	60a5      	str	r5, [r4, #8]
 8005d7e:	f2c0 8095 	blt.w	8005eac <_printf_i+0x20c>
 8005d82:	6821      	ldr	r1, [r4, #0]
 8005d84:	f021 0104 	bic.w	r1, r1, #4
 8005d88:	6021      	str	r1, [r4, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d13d      	bne.n	8005e0a <_printf_i+0x16a>
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f040 808e 	bne.w	8005eb0 <_printf_i+0x210>
 8005d94:	4665      	mov	r5, ip
 8005d96:	2a08      	cmp	r2, #8
 8005d98:	d10b      	bne.n	8005db2 <_printf_i+0x112>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	07db      	lsls	r3, r3, #31
 8005d9e:	d508      	bpl.n	8005db2 <_printf_i+0x112>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	6862      	ldr	r2, [r4, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	bfde      	ittt	le
 8005da8:	2330      	movle	r3, #48	; 0x30
 8005daa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005db2:	ebac 0305 	sub.w	r3, ip, r5
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	f8cd 8000 	str.w	r8, [sp]
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	aa03      	add	r2, sp, #12
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff fef6 	bl	8005bb4 <_printf_common>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d14d      	bne.n	8005e68 <_printf_i+0x1c8>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	b005      	add	sp, #20
 8005dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dd6:	4839      	ldr	r0, [pc, #228]	; (8005ebc <_printf_i+0x21c>)
 8005dd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ddc:	6813      	ldr	r3, [r2, #0]
 8005dde:	6821      	ldr	r1, [r4, #0]
 8005de0:	1d1d      	adds	r5, r3, #4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6015      	str	r5, [r2, #0]
 8005de6:	060a      	lsls	r2, r1, #24
 8005de8:	d50b      	bpl.n	8005e02 <_printf_i+0x162>
 8005dea:	07ca      	lsls	r2, r1, #31
 8005dec:	bf44      	itt	mi
 8005dee:	f041 0120 	orrmi.w	r1, r1, #32
 8005df2:	6021      	strmi	r1, [r4, #0]
 8005df4:	b91b      	cbnz	r3, 8005dfe <_printf_i+0x15e>
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	f022 0220 	bic.w	r2, r2, #32
 8005dfc:	6022      	str	r2, [r4, #0]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	e7b7      	b.n	8005d72 <_printf_i+0xd2>
 8005e02:	064d      	lsls	r5, r1, #25
 8005e04:	bf48      	it	mi
 8005e06:	b29b      	uxthmi	r3, r3
 8005e08:	e7ef      	b.n	8005dea <_printf_i+0x14a>
 8005e0a:	4665      	mov	r5, ip
 8005e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e10:	fb02 3311 	mls	r3, r2, r1, r3
 8005e14:	5cc3      	ldrb	r3, [r0, r3]
 8005e16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d1f5      	bne.n	8005e0c <_printf_i+0x16c>
 8005e20:	e7b9      	b.n	8005d96 <_printf_i+0xf6>
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	6825      	ldr	r5, [r4, #0]
 8005e26:	1d18      	adds	r0, r3, #4
 8005e28:	6961      	ldr	r1, [r4, #20]
 8005e2a:	6010      	str	r0, [r2, #0]
 8005e2c:	0628      	lsls	r0, r5, #24
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	d501      	bpl.n	8005e36 <_printf_i+0x196>
 8005e32:	6019      	str	r1, [r3, #0]
 8005e34:	e002      	b.n	8005e3c <_printf_i+0x19c>
 8005e36:	066a      	lsls	r2, r5, #25
 8005e38:	d5fb      	bpl.n	8005e32 <_printf_i+0x192>
 8005e3a:	8019      	strh	r1, [r3, #0]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4665      	mov	r5, ip
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	e7b9      	b.n	8005db8 <_printf_i+0x118>
 8005e44:	6813      	ldr	r3, [r2, #0]
 8005e46:	1d19      	adds	r1, r3, #4
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	681d      	ldr	r5, [r3, #0]
 8005e4c:	6862      	ldr	r2, [r4, #4]
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 f837 	bl	8005ec4 <memchr>
 8005e56:	b108      	cbz	r0, 8005e5c <_printf_i+0x1bc>
 8005e58:	1b40      	subs	r0, r0, r5
 8005e5a:	6060      	str	r0, [r4, #4]
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	2300      	movs	r3, #0
 8005e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e66:	e7a7      	b.n	8005db8 <_printf_i+0x118>
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	462a      	mov	r2, r5
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	4630      	mov	r0, r6
 8005e70:	47c0      	blx	r8
 8005e72:	3001      	adds	r0, #1
 8005e74:	d0aa      	beq.n	8005dcc <_printf_i+0x12c>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	079b      	lsls	r3, r3, #30
 8005e7a:	d413      	bmi.n	8005ea4 <_printf_i+0x204>
 8005e7c:	68e0      	ldr	r0, [r4, #12]
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	4298      	cmp	r0, r3
 8005e82:	bfb8      	it	lt
 8005e84:	4618      	movlt	r0, r3
 8005e86:	e7a3      	b.n	8005dd0 <_printf_i+0x130>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	464a      	mov	r2, r9
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4630      	mov	r0, r6
 8005e90:	47c0      	blx	r8
 8005e92:	3001      	adds	r0, #1
 8005e94:	d09a      	beq.n	8005dcc <_printf_i+0x12c>
 8005e96:	3501      	adds	r5, #1
 8005e98:	68e3      	ldr	r3, [r4, #12]
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	42ab      	cmp	r3, r5
 8005ea0:	dcf2      	bgt.n	8005e88 <_printf_i+0x1e8>
 8005ea2:	e7eb      	b.n	8005e7c <_printf_i+0x1dc>
 8005ea4:	2500      	movs	r5, #0
 8005ea6:	f104 0919 	add.w	r9, r4, #25
 8005eaa:	e7f5      	b.n	8005e98 <_printf_i+0x1f8>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ac      	bne.n	8005e0a <_printf_i+0x16a>
 8005eb0:	7803      	ldrb	r3, [r0, #0]
 8005eb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eba:	e76c      	b.n	8005d96 <_printf_i+0xf6>
 8005ebc:	080063e1 	.word	0x080063e1
 8005ec0:	080063f2 	.word	0x080063f2

08005ec4 <memchr>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	b2c9      	uxtb	r1, r1
 8005ec8:	4402      	add	r2, r0
 8005eca:	4290      	cmp	r0, r2
 8005ecc:	4603      	mov	r3, r0
 8005ece:	d101      	bne.n	8005ed4 <memchr+0x10>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e003      	b.n	8005edc <memchr+0x18>
 8005ed4:	781c      	ldrb	r4, [r3, #0]
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	428c      	cmp	r4, r1
 8005eda:	d1f6      	bne.n	8005eca <memchr+0x6>
 8005edc:	4618      	mov	r0, r3
 8005ede:	bd10      	pop	{r4, pc}

08005ee0 <memmove>:
 8005ee0:	4288      	cmp	r0, r1
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	eb01 0302 	add.w	r3, r1, r2
 8005ee8:	d807      	bhi.n	8005efa <memmove+0x1a>
 8005eea:	1e42      	subs	r2, r0, #1
 8005eec:	4299      	cmp	r1, r3
 8005eee:	d00a      	beq.n	8005f06 <memmove+0x26>
 8005ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ef4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ef8:	e7f8      	b.n	8005eec <memmove+0xc>
 8005efa:	4283      	cmp	r3, r0
 8005efc:	d9f5      	bls.n	8005eea <memmove+0xa>
 8005efe:	1881      	adds	r1, r0, r2
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	42d3      	cmn	r3, r2
 8005f04:	d100      	bne.n	8005f08 <memmove+0x28>
 8005f06:	bd10      	pop	{r4, pc}
 8005f08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f10:	e7f7      	b.n	8005f02 <memmove+0x22>
	...

08005f14 <_free_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4605      	mov	r5, r0
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	d043      	beq.n	8005fa4 <_free_r+0x90>
 8005f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f20:	1f0c      	subs	r4, r1, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bfb8      	it	lt
 8005f26:	18e4      	addlt	r4, r4, r3
 8005f28:	f000 f8d0 	bl	80060cc <__malloc_lock>
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <_free_r+0x94>)
 8005f2e:	6813      	ldr	r3, [r2, #0]
 8005f30:	4610      	mov	r0, r2
 8005f32:	b933      	cbnz	r3, 8005f42 <_free_r+0x2e>
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	6014      	str	r4, [r2, #0]
 8005f38:	4628      	mov	r0, r5
 8005f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f3e:	f000 b8c6 	b.w	80060ce <__malloc_unlock>
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	d90b      	bls.n	8005f5e <_free_r+0x4a>
 8005f46:	6821      	ldr	r1, [r4, #0]
 8005f48:	1862      	adds	r2, r4, r1
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	bf01      	itttt	eq
 8005f4e:	681a      	ldreq	r2, [r3, #0]
 8005f50:	685b      	ldreq	r3, [r3, #4]
 8005f52:	1852      	addeq	r2, r2, r1
 8005f54:	6022      	streq	r2, [r4, #0]
 8005f56:	6063      	str	r3, [r4, #4]
 8005f58:	6004      	str	r4, [r0, #0]
 8005f5a:	e7ed      	b.n	8005f38 <_free_r+0x24>
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	b10a      	cbz	r2, 8005f66 <_free_r+0x52>
 8005f62:	42a2      	cmp	r2, r4
 8005f64:	d9fa      	bls.n	8005f5c <_free_r+0x48>
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	1858      	adds	r0, r3, r1
 8005f6a:	42a0      	cmp	r0, r4
 8005f6c:	d10b      	bne.n	8005f86 <_free_r+0x72>
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	4401      	add	r1, r0
 8005f72:	1858      	adds	r0, r3, r1
 8005f74:	4282      	cmp	r2, r0
 8005f76:	6019      	str	r1, [r3, #0]
 8005f78:	d1de      	bne.n	8005f38 <_free_r+0x24>
 8005f7a:	6810      	ldr	r0, [r2, #0]
 8005f7c:	6852      	ldr	r2, [r2, #4]
 8005f7e:	4401      	add	r1, r0
 8005f80:	6019      	str	r1, [r3, #0]
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	e7d8      	b.n	8005f38 <_free_r+0x24>
 8005f86:	d902      	bls.n	8005f8e <_free_r+0x7a>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	e7d4      	b.n	8005f38 <_free_r+0x24>
 8005f8e:	6820      	ldr	r0, [r4, #0]
 8005f90:	1821      	adds	r1, r4, r0
 8005f92:	428a      	cmp	r2, r1
 8005f94:	bf01      	itttt	eq
 8005f96:	6811      	ldreq	r1, [r2, #0]
 8005f98:	6852      	ldreq	r2, [r2, #4]
 8005f9a:	1809      	addeq	r1, r1, r0
 8005f9c:	6021      	streq	r1, [r4, #0]
 8005f9e:	6062      	str	r2, [r4, #4]
 8005fa0:	605c      	str	r4, [r3, #4]
 8005fa2:	e7c9      	b.n	8005f38 <_free_r+0x24>
 8005fa4:	bd38      	pop	{r3, r4, r5, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200004d4 	.word	0x200004d4

08005fac <_malloc_r>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	1ccd      	adds	r5, r1, #3
 8005fb0:	f025 0503 	bic.w	r5, r5, #3
 8005fb4:	3508      	adds	r5, #8
 8005fb6:	2d0c      	cmp	r5, #12
 8005fb8:	bf38      	it	cc
 8005fba:	250c      	movcc	r5, #12
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	db01      	blt.n	8005fc6 <_malloc_r+0x1a>
 8005fc2:	42a9      	cmp	r1, r5
 8005fc4:	d903      	bls.n	8005fce <_malloc_r+0x22>
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	6033      	str	r3, [r6, #0]
 8005fca:	2000      	movs	r0, #0
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	f000 f87d 	bl	80060cc <__malloc_lock>
 8005fd2:	4a21      	ldr	r2, [pc, #132]	; (8006058 <_malloc_r+0xac>)
 8005fd4:	6814      	ldr	r4, [r2, #0]
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	b991      	cbnz	r1, 8006000 <_malloc_r+0x54>
 8005fda:	4c20      	ldr	r4, [pc, #128]	; (800605c <_malloc_r+0xb0>)
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	b91b      	cbnz	r3, 8005fe8 <_malloc_r+0x3c>
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 f863 	bl	80060ac <_sbrk_r>
 8005fe6:	6020      	str	r0, [r4, #0]
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4630      	mov	r0, r6
 8005fec:	f000 f85e 	bl	80060ac <_sbrk_r>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d124      	bne.n	800603e <_malloc_r+0x92>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	6033      	str	r3, [r6, #0]
 8005ffa:	f000 f868 	bl	80060ce <__malloc_unlock>
 8005ffe:	e7e4      	b.n	8005fca <_malloc_r+0x1e>
 8006000:	680b      	ldr	r3, [r1, #0]
 8006002:	1b5b      	subs	r3, r3, r5
 8006004:	d418      	bmi.n	8006038 <_malloc_r+0x8c>
 8006006:	2b0b      	cmp	r3, #11
 8006008:	d90f      	bls.n	800602a <_malloc_r+0x7e>
 800600a:	600b      	str	r3, [r1, #0]
 800600c:	18cc      	adds	r4, r1, r3
 800600e:	50cd      	str	r5, [r1, r3]
 8006010:	4630      	mov	r0, r6
 8006012:	f000 f85c 	bl	80060ce <__malloc_unlock>
 8006016:	f104 000b 	add.w	r0, r4, #11
 800601a:	1d23      	adds	r3, r4, #4
 800601c:	f020 0007 	bic.w	r0, r0, #7
 8006020:	1ac3      	subs	r3, r0, r3
 8006022:	d0d3      	beq.n	8005fcc <_malloc_r+0x20>
 8006024:	425a      	negs	r2, r3
 8006026:	50e2      	str	r2, [r4, r3]
 8006028:	e7d0      	b.n	8005fcc <_malloc_r+0x20>
 800602a:	684b      	ldr	r3, [r1, #4]
 800602c:	428c      	cmp	r4, r1
 800602e:	bf16      	itet	ne
 8006030:	6063      	strne	r3, [r4, #4]
 8006032:	6013      	streq	r3, [r2, #0]
 8006034:	460c      	movne	r4, r1
 8006036:	e7eb      	b.n	8006010 <_malloc_r+0x64>
 8006038:	460c      	mov	r4, r1
 800603a:	6849      	ldr	r1, [r1, #4]
 800603c:	e7cc      	b.n	8005fd8 <_malloc_r+0x2c>
 800603e:	1cc4      	adds	r4, r0, #3
 8006040:	f024 0403 	bic.w	r4, r4, #3
 8006044:	42a0      	cmp	r0, r4
 8006046:	d005      	beq.n	8006054 <_malloc_r+0xa8>
 8006048:	1a21      	subs	r1, r4, r0
 800604a:	4630      	mov	r0, r6
 800604c:	f000 f82e 	bl	80060ac <_sbrk_r>
 8006050:	3001      	adds	r0, #1
 8006052:	d0cf      	beq.n	8005ff4 <_malloc_r+0x48>
 8006054:	6025      	str	r5, [r4, #0]
 8006056:	e7db      	b.n	8006010 <_malloc_r+0x64>
 8006058:	200004d4 	.word	0x200004d4
 800605c:	200004d8 	.word	0x200004d8

08006060 <_realloc_r>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	4607      	mov	r7, r0
 8006064:	4614      	mov	r4, r2
 8006066:	460e      	mov	r6, r1
 8006068:	b921      	cbnz	r1, 8006074 <_realloc_r+0x14>
 800606a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800606e:	4611      	mov	r1, r2
 8006070:	f7ff bf9c 	b.w	8005fac <_malloc_r>
 8006074:	b922      	cbnz	r2, 8006080 <_realloc_r+0x20>
 8006076:	f7ff ff4d 	bl	8005f14 <_free_r>
 800607a:	4625      	mov	r5, r4
 800607c:	4628      	mov	r0, r5
 800607e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006080:	f000 f826 	bl	80060d0 <_malloc_usable_size_r>
 8006084:	42a0      	cmp	r0, r4
 8006086:	d20f      	bcs.n	80060a8 <_realloc_r+0x48>
 8006088:	4621      	mov	r1, r4
 800608a:	4638      	mov	r0, r7
 800608c:	f7ff ff8e 	bl	8005fac <_malloc_r>
 8006090:	4605      	mov	r5, r0
 8006092:	2800      	cmp	r0, #0
 8006094:	d0f2      	beq.n	800607c <_realloc_r+0x1c>
 8006096:	4631      	mov	r1, r6
 8006098:	4622      	mov	r2, r4
 800609a:	f7ff fbdd 	bl	8005858 <memcpy>
 800609e:	4631      	mov	r1, r6
 80060a0:	4638      	mov	r0, r7
 80060a2:	f7ff ff37 	bl	8005f14 <_free_r>
 80060a6:	e7e9      	b.n	800607c <_realloc_r+0x1c>
 80060a8:	4635      	mov	r5, r6
 80060aa:	e7e7      	b.n	800607c <_realloc_r+0x1c>

080060ac <_sbrk_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	2300      	movs	r3, #0
 80060b0:	4c05      	ldr	r4, [pc, #20]	; (80060c8 <_sbrk_r+0x1c>)
 80060b2:	4605      	mov	r5, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	f7fc f8c6 	bl	8002248 <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_sbrk_r+0x1a>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_sbrk_r+0x1a>
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20002e7c 	.word	0x20002e7c

080060cc <__malloc_lock>:
 80060cc:	4770      	bx	lr

080060ce <__malloc_unlock>:
 80060ce:	4770      	bx	lr

080060d0 <_malloc_usable_size_r>:
 80060d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d4:	1f18      	subs	r0, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bfbc      	itt	lt
 80060da:	580b      	ldrlt	r3, [r1, r0]
 80060dc:	18c0      	addlt	r0, r0, r3
 80060de:	4770      	bx	lr

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
