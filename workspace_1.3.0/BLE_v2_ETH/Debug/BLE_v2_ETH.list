
BLE_v2_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e060  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002378  0800e244  0800e244  0001e244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105bc  080105bc  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080105bc  080105bc  000205bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105c4  080105c4  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105c4  080105c4  000205c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105c8  080105c8  000205c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080105cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ff8  2000007c  08010648  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008074  08010648  00038074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025776  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b32  00000000  00000000  0005581b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  0005a350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  0005b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267f0  00000000  00000000  0005c108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018f1a  00000000  00000000  000828f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aec47  00000000  00000000  0009b812  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a459  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000429c  00000000  00000000  0014a4d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e22c 	.word	0x0800e22c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000080 	.word	0x20000080
 8000220:	0800e22c 	.word	0x0800e22c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 f9de 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f806 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f84e 	bl	80005d4 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000538:	f002 f87a 	bl	8002630 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x14>
	...

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	; 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f00c ff3a 	bl	800d3c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000576:	2300      	movs	r3, #0
 8000578:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6_5;
 800057a:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fb45 	bl	8001c18 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000594:	f000 f84c 	bl	8000630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2101      	movs	r1, #1
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fe47 	bl	8002244 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005bc:	f000 f838 	bl	8000630 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <SystemClock_Config+0x90>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	42420070 	.word	0x42420070

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_GPIO_Init+0x58>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_GPIO_Init+0x58>)
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_GPIO_Init+0x58>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_GPIO_Init+0x58>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <MX_GPIO_Init+0x58>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_GPIO_Init+0x58>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_GPIO_Init+0x58>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <MX_GPIO_Init+0x58>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <MX_GPIO_Init+0x58>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_MspInit+0x5c>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <HAL_MspInit+0x5c>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_MspInit+0x5c>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_MspInit+0x5c>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <HAL_MspInit+0x5c>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <HAL_MspInit+0x5c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_MspInit+0x60>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_MspInit+0x60>)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000
 800069c:	40010000 	.word	0x40010000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <HardFault_Handler+0x4>

080006b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <BusFault_Handler+0x4>

080006be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <UsageFault_Handler+0x4>

080006c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f944 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00a      	b.n	800071c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000706:	f3af 8000 	nop.w
 800070a:	4601      	mov	r1, r0
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf0      	blt.n	8000706 <_read+0x12>
	}

return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e009      	b.n	8000754 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf1      	blt.n	8000740 <_write+0x12>
	}
	return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_close>:

int _close(int file)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078c:	605a      	str	r2, [r3, #4]
	return 0;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <_isatty>:

int _isatty(int file)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	return 1;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
	return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <_sbrk+0x50>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <_sbrk+0x16>
		heap_end = &end;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <_sbrk+0x50>)
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <_sbrk+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <_sbrk+0x50>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <_sbrk+0x50>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	466a      	mov	r2, sp
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d905      	bls.n	80007fe <_sbrk+0x36>
	{
		errno = ENOMEM;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <_sbrk+0x58>)
 80007f4:	220c      	movs	r2, #12
 80007f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	e006      	b.n	800080c <_sbrk+0x44>
	}

	heap_end += incr;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <_sbrk+0x50>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <_sbrk+0x50>)
 8000808:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800080a:	68fb      	ldr	r3, [r7, #12]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000098 	.word	0x20000098
 800081c:	20008078 	.word	0x20008078
 8000820:	20008070 	.word	0x20008070

08000824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <SystemInit+0x70>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <SystemInit+0x70>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <SystemInit+0x70>)
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	4916      	ldr	r1, [pc, #88]	; (8000894 <SystemInit+0x70>)
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <SystemInit+0x74>)
 800083c:	4013      	ands	r3, r2
 800083e:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <SystemInit+0x70>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <SystemInit+0x70>)
 8000846:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800084a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <SystemInit+0x70>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <SystemInit+0x70>)
 8000856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <SystemInit+0x70>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <SystemInit+0x70>)
 8000862:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000866:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <SystemInit+0x70>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a09      	ldr	r2, [pc, #36]	; (8000894 <SystemInit+0x70>)
 800086e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000872:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <SystemInit+0x70>)
 8000876:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800087a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SystemInit+0x70>)
 800087e:	2200      	movs	r2, #0
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x78>)
 8000884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000888:	609a      	str	r2, [r3, #8]
#endif 
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	f0ff0000 	.word	0xf0ff0000
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008a2:	e003      	b.n	80008ac <LoopCopyDataInit>

080008a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008aa:	3104      	adds	r1, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008b4:	d3f6      	bcc.n	80008a4 <CopyDataInit>
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008b8:	e002      	b.n	80008c0 <LoopFillZerobss>

080008ba <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008bc:	f842 3b04 	str.w	r3, [r2], #4

080008c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008c4:	d3f9      	bcc.n	80008ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008c6:	f7ff ffad 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f00c fd3f 	bl	800d34c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fe2b 	bl	8000528 <main>
  bx lr
 80008d2:	4770      	bx	lr
  ldr r3, =_sidata
 80008d4:	080105cc 	.word	0x080105cc
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008dc:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80008e0:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80008e4:	20008074 	.word	0x20008074

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f929 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe98 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f933 	bl	8000ba2 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f909 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000008 	.word	0x20000008
 8000998:	20000220 	.word	0x20000220

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	20000220 	.word	0x20000220

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff0 	bl	800099c <HAL_GetTick>
 80009bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_Delay+0x40>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d6:	bf00      	nop
 80009d8:	f7ff ffe0 	bl	800099c <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff90 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff49 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff5e 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff90 	bl	8000aac <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5f 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffb0 	bl	8000b10 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000bcc:	4bac      	ldr	r3, [pc, #688]	; (8000e80 <HAL_ETH_Init+0x2c4>)
 8000bce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e14a      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d106      	bne.n	8000bfc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f001 fd5a 	bl	80026b0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8000bfc:	4ba1      	ldr	r3, [pc, #644]	; (8000e84 <HAL_ETH_Init+0x2c8>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4aa0      	ldr	r2, [pc, #640]	; (8000e84 <HAL_ETH_Init+0x2c8>)
 8000c02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c06:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 8000c08:	4b9e      	ldr	r3, [pc, #632]	; (8000e84 <HAL_ETH_Init+0x2c8>)
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	499c      	ldr	r1, [pc, #624]	; (8000e84 <HAL_ETH_Init+0x2c8>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0201 	orr.w	r2, r2, #1
 8000c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c2e:	f7ff feb5 	bl	800099c <HAL_GetTick>
 8000c32:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c34:	e011      	b.n	8000c5a <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000c36:	f7ff feb1 	bl	800099c <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c44:	d909      	bls.n	8000c5a <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2203      	movs	r2, #3
 8000c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e10e      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e4      	bne.n	8000c36 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f023 031c 	bic.w	r3, r3, #28
 8000c7a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000c7c:	f001 fcb0 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8000c80:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4a80      	ldr	r2, [pc, #512]	; (8000e88 <HAL_ETH_Init+0x2cc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d908      	bls.n	8000c9c <HAL_ETH_Init+0xe0>
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4a7f      	ldr	r2, [pc, #508]	; (8000e8c <HAL_ETH_Init+0x2d0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d804      	bhi.n	8000c9c <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e00b      	b.n	8000cb4 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	4a7b      	ldr	r2, [pc, #492]	; (8000e8c <HAL_ETH_Init+0x2d0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d907      	bls.n	8000cb4 <HAL_ETH_Init+0xf8>
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	4a7a      	ldr	r2, [pc, #488]	; (8000e90 <HAL_ETH_Init+0x2d4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d803      	bhi.n	8000cb4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f043 030c 	orr.w	r3, r3, #12
 8000cb2:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000cbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fb0c 	bl	80012e0 <HAL_ETH_WritePHYRegister>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000cd2:	6939      	ldr	r1, [r7, #16]
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 fb99 	bl	800140c <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e0c8      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000ce6:	20ff      	movs	r0, #255	; 0xff
 8000ce8:	f7ff fe62 	bl	80009b0 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 8096 	beq.w	8000e22 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000cf6:	f7ff fe51 	bl	800099c <HAL_GetTick>
 8000cfa:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	461a      	mov	r2, r3
 8000d02:	2101      	movs	r1, #1
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 fa83 	bl	8001210 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8000d0a:	f7ff fe47 	bl	800099c <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d90f      	bls.n	8000d3c <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000d20:	6939      	ldr	r1, [r7, #16]
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 fb72 	bl	800140c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e09d      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0da      	beq.n	8000cfc <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fac7 	bl	80012e0 <HAL_ETH_WritePHYRegister>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00b      	beq.n	8000d70 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 fb54 	bl	800140c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e083      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d70:	f7ff fe14 	bl	800099c <HAL_GetTick>
 8000d74:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fa46 	bl	8001210 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d84:	f7ff fe0a 	bl	800099c <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d90f      	bls.n	8000db6 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 fb35 	bl	800140c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e060      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0da      	beq.n	8000d76 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fa21 	bl	8001210 <HAL_ETH_ReadPHYRegister>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00b      	beq.n	8000dec <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000dd8:	6939      	ldr	r1, [r7, #16]
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 fb16 	bl	800140c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e045      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	e002      	b.n	8000e06 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	e026      	b.n	8000e66 <HAL_ETH_Init+0x2aa>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	e021      	b.n	8000e66 <HAL_ETH_Init+0x2aa>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 fa50 	bl	80012e0 <HAL_ETH_WritePHYRegister>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00b      	beq.n	8000e5e <HAL_ETH_Init+0x2a2>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000e4a:	6939      	ldr	r1, [r7, #16]
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 fadd 	bl	800140c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00c      	b.n	8000e78 <HAL_ETH_Init+0x2bc>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e5e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e62:	f7ff fda5 	bl	80009b0 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000e66:	6939      	ldr	r1, [r7, #16]
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 facf 	bl	800140c <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	03938700 	.word	0x03938700
 8000e84:	40010000 	.word	0x40010000
 8000e88:	01312cff 	.word	0x01312cff
 8000e8c:	02160ebf 	.word	0x02160ebf
 8000e90:	039386ff 	.word	0x039386ff

08000e94 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_ETH_DMATxDescListInit+0x20>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e052      	b.n	8000f5a <HAL_ETH_DMATxDescListInit+0xc6>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e030      	b.n	8000f32 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d208      	bcs.n	8000f26 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	e002      	b.n	8000f2c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3ca      	bcc.n	8000ed0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f44:	3310      	adds	r3, #16
 8000f46:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_ETH_DMARxDescListInit+0x20>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e056      	b.n	8001032 <HAL_ETH_DMARxDescListInit+0xce>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e034      	b.n	800100a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000fb8:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d105      	bne.n	8000fe2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d208      	bcs.n	8000ffe <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	e002      	b.n	8001004 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d3c6      	bcc.n	8000fa0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800101c:	330c      	adds	r3, #12
 800101e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_ETH_TransmitFrame+0x24>
 800105c:	2302      	movs	r3, #2
 800105e:	e0cd      	b.n	80011fc <HAL_ETH_TransmitFrame+0x1c0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0b8      	b.n	80011fc <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	da09      	bge.n	80010a8 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2212      	movs	r2, #18
 8001098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0a9      	b.n	80011fc <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d915      	bls.n	80010de <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	4a54      	ldr	r2, [pc, #336]	; (8001208 <HAL_ETH_TransmitFrame+0x1cc>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0a9b      	lsrs	r3, r3, #10
 80010bc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	4b51      	ldr	r3, [pc, #324]	; (8001208 <HAL_ETH_TransmitFrame+0x1cc>)
 80010c2:	fba3 1302 	umull	r1, r3, r3, r2
 80010c6:	0a9b      	lsrs	r3, r3, #10
 80010c8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80010cc:	fb01 f303 	mul.w	r3, r1, r3
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e001      	b.n	80010e2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80010de:	2301      	movs	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d11c      	bne.n	8001122 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80010f6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001102:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001112:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001120:	e04b      	b.n	80011ba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	e044      	b.n	80011b2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001136:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d107      	bne.n	800114e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001156:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3b01      	subs	r3, #1
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	429a      	cmp	r2, r3
 8001160:	d116      	bne.n	8001190 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001170:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4a25      	ldr	r2, [pc, #148]	; (800120c <HAL_ETH_TransmitFrame+0x1d0>)
 8001176:	fb02 f203 	mul.w	r2, r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001182:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800118e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800119e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	3301      	adds	r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3b6      	bcc.n	8001128 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c2:	3314      	adds	r3, #20
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00d      	beq.n	80011ea <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d6:	3314      	adds	r3, #20
 80011d8:	2204      	movs	r2, #4
 80011da:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e4:	3304      	adds	r3, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	ac02b00b 	.word	0xac02b00b
 800120c:	fffffa0c 	.word	0xfffffa0c

08001210 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	460b      	mov	r3, r1
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b82      	cmp	r3, #130	; 0x82
 8001230:	d101      	bne.n	8001236 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001232:	2302      	movs	r3, #2
 8001234:	e050      	b.n	80012d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2282      	movs	r2, #130	; 0x82
 800123a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 031c 	and.w	r3, r3, #28
 800124c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8a1b      	ldrh	r3, [r3, #16]
 8001252:	02db      	lsls	r3, r3, #11
 8001254:	b29b      	uxth	r3, r3
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4313      	orrs	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800125c:	897b      	ldrh	r3, [r7, #10]
 800125e:	019b      	lsls	r3, r3, #6
 8001260:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4313      	orrs	r3, r2
 8001268:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f023 0302 	bic.w	r3, r3, #2
 8001270:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001282:	f7ff fb8b 	bl	800099c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001288:	e015      	b.n	80012b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800128a:	f7ff fb87 	bl	800099c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d309      	bcc.n	80012ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e014      	b.n	80012d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e4      	bne.n	800128a <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	460b      	mov	r3, r1
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b42      	cmp	r3, #66	; 0x42
 8001300:	d101      	bne.n	8001306 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001302:	2302      	movs	r3, #2
 8001304:	e04e      	b.n	80013a4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2242      	movs	r2, #66	; 0x42
 800130a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 031c 	and.w	r3, r3, #28
 800131c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8a1b      	ldrh	r3, [r3, #16]
 8001322:	02db      	lsls	r3, r3, #11
 8001324:	b29b      	uxth	r3, r3
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800132c:	897b      	ldrh	r3, [r7, #10]
 800132e:	019b      	lsls	r3, r3, #6
 8001330:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4313      	orrs	r3, r2
 8001338:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	b29a      	uxth	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff fb1e 	bl	800099c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001362:	e015      	b.n	8001390 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001364:	f7ff fb1a 	bl	800099c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d309      	bcc.n	8001388 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e00d      	b.n	80013a4 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e4      	bne.n	8001364 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_Start+0x16>
 80013be:	2302      	movs	r3, #2
 80013c0:	e01f      	b.n	8001402 <HAL_ETH_Start+0x56>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fa16 	bl	8001804 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fa30 	bl	800183e <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fa78 	bl	80018d4 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fa47 	bl	8001878 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fa5b 	bl	80018a6 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0b0      	sub	sp, #192	; 0xc0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001428:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001430:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800143a:	2300      	movs	r3, #0
 800143c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001456:	663b      	str	r3, [r7, #96]	; 0x60
 8001458:	e001      	b.n	800145e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800145e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001462:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001468:	2300      	movs	r3, #0
 800146a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001478:	2340      	movs	r3, #64	; 0x40
 800147a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014e4:	4baa      	ldr	r3, [pc, #680]	; (8001790 <ETH_MACDMAConfig+0x384>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80014ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 80014ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80014f0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80014f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80014f4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80014f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80014f8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80014fe:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001502:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001506:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 800150c:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 800150e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001510:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001514:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001518:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800151a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 800151c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 800151e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001520:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001522:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001526:	4313      	orrs	r3, r2
 8001528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001534:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fa35 	bl	80009b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800154e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001550:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001554:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001558:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800155a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800155e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8001564:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800156a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800156c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001570:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001574:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800157c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800157e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff fa10 	bl	80009b0 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001598:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015a2:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015ac:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015bc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015c0:	4013      	ands	r3, r2
 80015c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80015c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015ca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80015cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80015d0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80015d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80015d6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 80015d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80015dc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80015de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 80015e2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80015e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80015e8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80015ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015fc:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff f9d1 	bl	80009b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001616:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001618:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 800161c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff f9bc 	bl	80009b0 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001640:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800164a:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001650:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001654:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001666:	2304      	movs	r3, #4
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800166a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800167a:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001682:	2300      	movs	r3, #0
 8001684:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001686:	2300      	movs	r3, #0
 8001688:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001692:	3318      	adds	r3, #24
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800169a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <ETH_MACDMAConfig+0x388>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80016a6:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 80016a8:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80016aa:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80016ac:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 80016ae:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80016b0:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 80016b2:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80016b4:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 80016b6:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80016b8:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 80016ba:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 80016be:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 80016c2:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 80016c6:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80016c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016cc:	4313      	orrs	r3, r2
 80016ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016da:	3318      	adds	r3, #24
 80016dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ea:	3318      	adds	r3, #24
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff f95c 	bl	80009b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001700:	3318      	adds	r3, #24
 8001702:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001706:	601a      	str	r2, [r3, #0]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 800170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800170c:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 8001710:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001714:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001718:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 800171a:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 800171c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800171e:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172c:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff f937 	bl	80009b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800174e:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10f      	bne.n	8001778 <ETH_MACDMAConfig+0x36c>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	331c      	adds	r3, #28
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800176c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	331c      	adds	r3, #28
 8001776:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	461a      	mov	r2, r3
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f809 	bl	8001798 <ETH_MACAddressConfig>
}
 8001786:	bf00      	nop
 8001788:	37c0      	adds	r7, #192	; 0xc0
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	ff20810f 	.word	0xff20810f
 8001794:	f8de3f23 	.word	0xf8de3f23

08001798 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3305      	adds	r3, #5
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	3204      	adds	r2, #4
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <ETH_MACAddressConfig+0x64>)
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	061a      	lsls	r2, r3, #24
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3302      	adds	r3, #2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4313      	orrs	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <ETH_MACAddressConfig+0x68>)
 80017ea:	4413      	add	r3, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40028040 	.word	0x40028040
 8001800:	40028044 	.word	0x40028044

08001804 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0208 	orr.w	r2, r2, #8
 800181e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001828:	2001      	movs	r0, #1
 800182a:	f000 f87d 	bl	8001928 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0204 	orr.w	r2, r2, #4
 8001858:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001862:	2001      	movs	r0, #1
 8001864:	f000 f860 	bl	8001928 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001888:	3318      	adds	r3, #24
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001898:	3318      	adds	r3, #24
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	3318      	adds	r3, #24
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0202 	orr.w	r2, r2, #2
 80018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c6:	3318      	adds	r3, #24
 80018c8:	601a      	str	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e8:	3318      	adds	r3, #24
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f8:	3318      	adds	r3, #24
 80018fa:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	3318      	adds	r3, #24
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800190a:	2001      	movs	r0, #1
 800190c:	f000 f80c 	bl	8001928 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	3318      	adds	r3, #24
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <ETH_Delay+0x34>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <ETH_Delay+0x38>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0a5b      	lsrs	r3, r3, #9
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001944:	bf00      	nop
  }
  while (Delay --);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1e5a      	subs	r2, r3, #1
 800194a:	60fa      	str	r2, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f9      	bne.n	8001944 <ETH_Delay+0x1c>
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000000 	.word	0x20000000
 8001960:	10624dd3 	.word	0x10624dd3

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e127      	b.n	8001bc8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8116 	bne.w	8001bc2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b12      	cmp	r3, #18
 800199c:	d034      	beq.n	8001a08 <HAL_GPIO_Init+0xa4>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d80d      	bhi.n	80019be <HAL_GPIO_Init+0x5a>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x9a>
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d804      	bhi.n	80019b4 <HAL_GPIO_Init+0x50>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d031      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d01c      	beq.n	80019ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e048      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d043      	beq.n	8001a40 <HAL_GPIO_Init+0xdc>
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d01b      	beq.n	80019f4 <HAL_GPIO_Init+0x90>
          break;
 80019bc:	e043      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019be:	4a89      	ldr	r2, [pc, #548]	; (8001be4 <HAL_GPIO_Init+0x280>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d026      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019c4:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <HAL_GPIO_Init+0x280>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d806      	bhi.n	80019d8 <HAL_GPIO_Init+0x74>
 80019ca:	4a87      	ldr	r2, [pc, #540]	; (8001be8 <HAL_GPIO_Init+0x284>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d020      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019d0:	4a86      	ldr	r2, [pc, #536]	; (8001bec <HAL_GPIO_Init+0x288>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01d      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
          break;
 80019d6:	e036      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d8:	4a85      	ldr	r2, [pc, #532]	; (8001bf0 <HAL_GPIO_Init+0x28c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019de:	4a85      	ldr	r2, [pc, #532]	; (8001bf4 <HAL_GPIO_Init+0x290>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d016      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019e4:	4a84      	ldr	r2, [pc, #528]	; (8001bf8 <HAL_GPIO_Init+0x294>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
          break;
 80019ea:	e02c      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e028      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	3304      	adds	r3, #4
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e023      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	3308      	adds	r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e01e      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e019      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e012      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	611a      	str	r2, [r3, #16]
          break;
 8001a32:	e008      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a34:	2308      	movs	r3, #8
 8001a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	615a      	str	r2, [r3, #20]
          break;
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d801      	bhi.n	8001a50 <HAL_GPIO_Init+0xec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	e001      	b.n	8001a54 <HAL_GPIO_Init+0xf0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d802      	bhi.n	8001a62 <HAL_GPIO_Init+0xfe>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x104>
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	3b08      	subs	r3, #8
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	210f      	movs	r1, #15
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	6a39      	ldr	r1, [r7, #32]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	431a      	orrs	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8096 	beq.w	8001bc2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a96:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_GPIO_Init+0x298>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_GPIO_Init+0x298>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x298>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aae:	4a54      	ldr	r2, [pc, #336]	; (8001c00 <HAL_GPIO_Init+0x29c>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4b      	ldr	r2, [pc, #300]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x19e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x19a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a49      	ldr	r2, [pc, #292]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x196>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a48      	ldr	r2, [pc, #288]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x192>
 8001af2:	2303      	movs	r3, #3
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001b02:	2300      	movs	r3, #0
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b14:	493a      	ldr	r1, [pc, #232]	; (8001c00 <HAL_GPIO_Init+0x29c>)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4938      	ldr	r1, [pc, #224]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b3c:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4933      	ldr	r1, [pc, #204]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	492e      	ldr	r1, [pc, #184]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	4929      	ldr	r1, [pc, #164]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	4924      	ldr	r1, [pc, #144]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
 8001b8a:	e006      	b.n	8001b9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	491f      	ldr	r1, [pc, #124]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	491a      	ldr	r1, [pc, #104]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60cb      	str	r3, [r1, #12]
 8001bb2:	e006      	b.n	8001bc2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4915      	ldr	r1, [pc, #84]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f47f aed0 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	372c      	adds	r7, #44	; 0x2c
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	10210000 	.word	0x10210000
 8001be8:	10110000 	.word	0x10110000
 8001bec:	10120000 	.word	0x10120000
 8001bf0:	10310000 	.word	0x10310000
 8001bf4:	10320000 	.word	0x10320000
 8001bf8:	10220000 	.word	0x10220000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40011400 	.word	0x40011400
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e304      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8087 	beq.w	8001d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c38:	4b92      	ldr	r3, [pc, #584]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d00c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c44:	4b8f      	ldr	r3, [pc, #572]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d112      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5e>
 8001c50:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d10b      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5e:	4b89      	ldr	r3, [pc, #548]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d06c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x12c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d168      	bne.n	8001d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e2de      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x76>
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a7f      	ldr	r2, [pc, #508]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e02e      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x98>
 8001c96:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7a      	ldr	r2, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xbc>
 8001cba:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a71      	ldr	r2, [pc, #452]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a67      	ldr	r2, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fe52 	bl	800099c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7fe fe4e 	bl	800099c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e292      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe4>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fe3e 	bl	800099c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7fe fe3a 	bl	800099c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e27e      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x10c>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d52:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d5e:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x18c>
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x176>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e252      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4939      	ldr	r1, [pc, #228]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	e03a      	b.n	8001e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7fe fdf3 	bl	800099c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7fe fdef 	bl	800099c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e233      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe fdd2 	bl	800099c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7fe fdce 	bl	800099c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e212      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d03a      	beq.n	8001e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d019      	beq.n	8001e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_RCC_OscConfig+0x274>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe fdb2 	bl	800099c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7fe fdae 	bl	800099c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1f2      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 fbca 	bl	80025f4 <RCC_Delay>
 8001e60:	e01c      	b.n	8001e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_RCC_OscConfig+0x274>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7fe fd98 	bl	800099c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6e:	e00f      	b.n	8001e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7fe fd94 	bl	800099c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d908      	bls.n	8001e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1d8      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	42420000 	.word	0x42420000
 8001e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b9b      	ldr	r3, [pc, #620]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e9      	bne.n	8001e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a6 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b94      	ldr	r3, [pc, #592]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b91      	ldr	r3, [pc, #580]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a90      	ldr	r2, [pc, #576]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b88      	ldr	r3, [pc, #544]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a87      	ldr	r2, [pc, #540]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7fe fd55 	bl	800099c <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7fe fd51 	bl	800099c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e195      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b7e      	ldr	r3, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x312>
 8001f1c:	4b78      	ldr	r3, [pc, #480]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a77      	ldr	r2, [pc, #476]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e02d      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x334>
 8001f32:	4b73      	ldr	r3, [pc, #460]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a72      	ldr	r2, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a6f      	ldr	r2, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x356>
 8001f54:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a69      	ldr	r2, [pc, #420]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a66      	ldr	r2, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f6e:	4b64      	ldr	r3, [pc, #400]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a60      	ldr	r2, [pc, #384]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7fe fd05 	bl	800099c <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7fe fd01 	bl	800099c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e143      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x37e>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7fe fcef 	bl	800099c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe fceb 	bl	800099c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e12d      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b45      	ldr	r3, [pc, #276]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a44      	ldr	r2, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 808c 	beq.w	8002118 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d10e      	bne.n	800202c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002016:	2b08      	cmp	r3, #8
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e103      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	2b02      	cmp	r3, #2
 8002032:	d14e      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0ef      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002054:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_RCC_OscConfig+0x4f0>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fc9f 	bl	800099c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002062:	f7fe fc9b 	bl	800099c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b64      	cmp	r3, #100	; 0x64
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0df      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	491c      	ldr	r1, [pc, #112]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4918      	ldr	r1, [pc, #96]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_RCC_OscConfig+0x4f0>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fc77 	bl	800099c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80020b2:	f7fe fc73 	bl	800099c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0b7      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x49a>
 80020d0:	e022      	b.n	8002118 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_RCC_OscConfig+0x4e8>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_RCC_OscConfig+0x4f0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe fc5a 	bl	800099c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80020ec:	f7fe fc56 	bl	800099c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d908      	bls.n	800210c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e09a      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800210c:	4b4b      	ldr	r3, [pc, #300]	; (800223c <HAL_RCC_OscConfig+0x624>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e9      	bne.n	80020ec <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8088 	beq.w	8002232 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x624>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d068      	beq.n	8002200 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d14d      	bne.n	80021d2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_RCC_OscConfig+0x628>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fc2e 	bl	800099c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe fc2a 	bl	800099c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e06e      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x624>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d10f      	bne.n	800218c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <HAL_RCC_OscConfig+0x624>)
 800216e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4931      	ldr	r1, [pc, #196]	; (800223c <HAL_RCC_OscConfig+0x624>)
 8002176:	4313      	orrs	r3, r2
 8002178:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_OscConfig+0x624>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f023 020f 	bic.w	r2, r3, #15
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	492d      	ldr	r1, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x624>)
 8002188:	4313      	orrs	r3, r2
 800218a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_OscConfig+0x624>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	430b      	orrs	r3, r1
 800219e:	4927      	ldr	r1, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x624>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x628>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fbf7 	bl	800099c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe fbf3 	bl	800099c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e037      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x624>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x59a>
 80021d0:	e02f      	b.n	8002232 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x628>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe fbe0 	bl	800099c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fbdc 	bl	800099c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e020      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RCC_OscConfig+0x624>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c8>
 80021fe:	e018      	b.n	8002232 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e013      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_OscConfig+0x624>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	429a      	cmp	r2, r3
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	42420060 	.word	0x42420060

08002244 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0d0      	b.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d910      	bls.n	8002288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b67      	ldr	r3, [pc, #412]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4965      	ldr	r1, [pc, #404]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0b8      	b.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a0:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a58      	ldr	r2, [pc, #352]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b8:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a52      	ldr	r2, [pc, #328]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b50      	ldr	r3, [pc, #320]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	494d      	ldr	r1, [pc, #308]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d040      	beq.n	8002364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d115      	bne.n	8002322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e07f      	b.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e073      	b.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e06b      	b.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f023 0203 	bic.w	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4936      	ldr	r1, [pc, #216]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002334:	f7fe fb32 	bl	800099c <HAL_GetTick>
 8002338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	e00a      	b.n	8002352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233c:	f7fe fb2e 	bl	800099c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e053      	b.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 020c 	and.w	r2, r3, #12
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	429a      	cmp	r2, r3
 8002362:	d1eb      	bne.n	800233c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d210      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4922      	ldr	r1, [pc, #136]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e032      	b.n	80023fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4916      	ldr	r1, [pc, #88]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	490e      	ldr	r1, [pc, #56]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d2:	f000 f821 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023d6:	4601      	mov	r1, r0
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_RCC_ClockConfig+0x1c8>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ea:	4a09      	ldr	r2, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1cc>)
 80023ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1d0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fa90 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40022000 	.word	0x40022000
 8002408:	40021000 	.word	0x40021000
 800240c:	0801041c 	.word	0x0801041c
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800241c:	b091      	sub	sp, #68	; 0x44
 800241e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002420:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_GetSysClockFreq+0x1b4>)
 8002422:	f107 0414 	add.w	r4, r7, #20
 8002426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002428:	c407      	stmia	r4!, {r0, r1, r2}
 800242a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800242e:	1d3c      	adds	r4, r7, #4
 8002430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	2300      	movs	r3, #0
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	2300      	movs	r3, #0
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002452:	4b60      	ldr	r3, [pc, #384]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d002      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x50>
 8002462:	2b08      	cmp	r3, #8
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x56>
 8002466:	e0a7      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002468:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800246c:	e0a7      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	0c9b      	lsrs	r3, r3, #18
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800247a:	4413      	add	r3, r2
 800247c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 808d 	beq.w	80025a8 <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800249a:	4413      	add	r3, r2
 800249c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80024a2:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d06a      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80024ae:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	3301      	adds	r3, #1
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80024bc:	4b45      	ldr	r3, [pc, #276]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3302      	adds	r3, #2
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	f04f 0400 	mov.w	r4, #0
 80024d8:	fb03 f502 	mul.w	r5, r3, r2
 80024dc:	fb01 f004 	mul.w	r0, r1, r4
 80024e0:	4428      	add	r0, r5
 80024e2:	fba1 5603 	umull	r5, r6, r1, r3
 80024e6:	1983      	adds	r3, r0, r6
 80024e8:	461e      	mov	r6, r3
 80024ea:	4629      	mov	r1, r5
 80024ec:	4632      	mov	r2, r6
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	0154      	lsls	r4, r2, #5
 80024f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024fc:	014b      	lsls	r3, r1, #5
 80024fe:	4619      	mov	r1, r3
 8002500:	4622      	mov	r2, r4
 8002502:	1b49      	subs	r1, r1, r5
 8002504:	eb62 0206 	sbc.w	r2, r2, r6
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	f04f 0400 	mov.w	r4, #0
 8002510:	0194      	lsls	r4, r2, #6
 8002512:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002516:	018b      	lsls	r3, r1, #6
 8002518:	1a5b      	subs	r3, r3, r1
 800251a:	eb64 0402 	sbc.w	r4, r4, r2
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	00e2      	lsls	r2, r4, #3
 8002528:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800252c:	00d9      	lsls	r1, r3, #3
 800252e:	460b      	mov	r3, r1
 8002530:	4614      	mov	r4, r2
 8002532:	195b      	adds	r3, r3, r5
 8002534:	eb44 0406 	adc.w	r4, r4, r6
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	0262      	lsls	r2, r4, #9
 8002542:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002546:	0259      	lsls	r1, r3, #9
 8002548:	460b      	mov	r3, r1
 800254a:	4614      	mov	r4, r2
 800254c:	4698      	mov	r8, r3
 800254e:	46a1      	mov	r9, r4
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	fb03 f502 	mul.w	r5, r3, r2
 8002562:	fb01 f004 	mul.w	r0, r1, r4
 8002566:	4428      	add	r0, r5
 8002568:	fba1 3403 	umull	r3, r4, r1, r3
 800256c:	1902      	adds	r2, r0, r4
 800256e:	4614      	mov	r4, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4623      	mov	r3, r4
 8002574:	4640      	mov	r0, r8
 8002576:	4649      	mov	r1, r9
 8002578:	f7fd fe54 	bl	8000224 <__aeabi_uldivmod>
 800257c:	4603      	mov	r3, r0
 800257e:	460c      	mov	r4, r1
 8002580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002582:	e007      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002588:	fb02 f203 	mul.w	r2, r2, r3
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002594:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002598:	461a      	mov	r2, r3
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	4293      	cmp	r3, r2
 800259e:	d108      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 80025a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a6:	e004      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1c4>)
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3744      	adds	r7, #68	; 0x44
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025ca:	bf00      	nop
 80025cc:	0800e244 	.word	0x0800e244
 80025d0:	0800e254 	.word	0x0800e254
 80025d4:	40021000 	.word	0x40021000
 80025d8:	007a1200 	.word	0x007a1200
 80025dc:	003d0900 	.word	0x003d0900

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b02      	ldr	r3, [pc, #8]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	20000000 	.word	0x20000000

080025f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <RCC_Delay+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <RCC_Delay+0x38>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002610:	bf00      	nop
  }
  while (Delay --);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60fa      	str	r2, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <RCC_Delay+0x1c>
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000000 	.word	0x20000000
 800262c:	10624dd3 	.word	0x10624dd3

08002630 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002636:	f000 fa7d 	bl	8002b34 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <MX_LWIP_Init+0x68>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <MX_LWIP_Init+0x6c>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <MX_LWIP_Init+0x70>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <MX_LWIP_Init+0x74>)
 800264e:	9302      	str	r3, [sp, #8]
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_LWIP_Init+0x78>)
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	2300      	movs	r3, #0
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_LWIP_Init+0x70>)
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <MX_LWIP_Init+0x6c>)
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <MX_LWIP_Init+0x68>)
 800265e:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_LWIP_Init+0x7c>)
 8002660:	f000 fe68 	bl	8003334 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002664:	4811      	ldr	r0, [pc, #68]	; (80026ac <MX_LWIP_Init+0x7c>)
 8002666:	f000 ff4b 	bl	8003500 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <MX_LWIP_Init+0x7c>)
 800266c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <MX_LWIP_Init+0x7c>)
 800267e:	f000 ff4d 	bl	800351c <netif_set_up>
 8002682:	e002      	b.n	800268a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002684:	4809      	ldr	r0, [pc, #36]	; (80026ac <MX_LWIP_Init+0x7c>)
 8002686:	f000 ff8d 	bl	80035a4 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <MX_LWIP_Init+0x7c>)
 800268c:	f007 f8a4 	bl	80097d8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000258 	.word	0x20000258
 800269c:	2000025c 	.word	0x2000025c
 80026a0:	20000260 	.word	0x20000260
 80026a4:	0800d195 	.word	0x0800d195
 80026a8:	08002a81 	.word	0x08002a81
 80026ac:	20000224 	.word	0x20000224

080026b0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0320 	add.w	r3, r7, #32
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a46      	ldr	r2, [pc, #280]	; (80027e4 <HAL_ETH_MspInit+0x134>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	f040 8085 	bne.w	80027dc <HAL_ETH_MspInit+0x12c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80026d2:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6153      	str	r3, [r2, #20]
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f4:	6153      	str	r3, [r2, #20]
 80026f6:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6153      	str	r3, [r2, #20]
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002720:	f043 0310 	orr.w	r3, r3, #16
 8002724:	6193      	str	r3, [r2, #24]
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6193      	str	r3, [r2, #24]
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002750:	f043 0308 	orr.w	r3, r3, #8
 8002754:	6193      	str	r3, [r2, #24]
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_ETH_MspInit+0x138>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276e:	f107 0320 	add.w	r3, r7, #32
 8002772:	4619      	mov	r1, r3
 8002774:	481d      	ldr	r0, [pc, #116]	; (80027ec <HAL_ETH_MspInit+0x13c>)
 8002776:	f7ff f8f5 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800277a:	2382      	movs	r3, #130	; 0x82
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	4619      	mov	r1, r3
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <HAL_ETH_MspInit+0x140>)
 800278e:	f7ff f8e9 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0320 	add.w	r3, r7, #32
 80027a2:	4619      	mov	r1, r3
 80027a4:	4812      	ldr	r0, [pc, #72]	; (80027f0 <HAL_ETH_MspInit+0x140>)
 80027a6:	f7ff f8dd 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027aa:	2330      	movs	r3, #48	; 0x30
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	4619      	mov	r1, r3
 80027bc:	480b      	ldr	r0, [pc, #44]	; (80027ec <HAL_ETH_MspInit+0x13c>)
 80027be:	f7ff f8d1 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80027c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0320 	add.w	r3, r7, #32
 80027d4:	4619      	mov	r1, r3
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <HAL_ETH_MspInit+0x144>)
 80027d8:	f7ff f8c4 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80027dc:	bf00      	nop
 80027de:	3730      	adds	r7, #48	; 0x30
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40028000 	.word	0x40028000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40010800 	.word	0x40010800
 80027f4:	40010c00 	.word	0x40010c00

080027f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002804:	4b49      	ldr	r3, [pc, #292]	; (800292c <low_level_init+0x134>)
 8002806:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <low_level_init+0x138>)
 8002808:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800280a:	4b48      	ldr	r3, [pc, #288]	; (800292c <low_level_init+0x134>)
 800280c:	2201      	movs	r2, #1
 800280e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002810:	4b46      	ldr	r3, [pc, #280]	; (800292c <low_level_init+0x134>)
 8002812:	2201      	movs	r2, #1
 8002814:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002816:	2300      	movs	r3, #0
 8002818:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800281e:	23e1      	movs	r3, #225	; 0xe1
 8002820:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800282a:	2300      	movs	r3, #0
 800282c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800282e:	4a3f      	ldr	r2, [pc, #252]	; (800292c <low_level_init+0x134>)
 8002830:	f107 0308 	add.w	r3, r7, #8
 8002834:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <low_level_init+0x134>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <low_level_init+0x134>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <low_level_init+0x134>)
 8002844:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002848:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800284a:	4838      	ldr	r0, [pc, #224]	; (800292c <low_level_init+0x134>)
 800284c:	f7fe f9b6 	bl	8000bbc <HAL_ETH_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	b2da      	uxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800286c:	2304      	movs	r3, #4
 800286e:	4a31      	ldr	r2, [pc, #196]	; (8002934 <low_level_init+0x13c>)
 8002870:	4931      	ldr	r1, [pc, #196]	; (8002938 <low_level_init+0x140>)
 8002872:	482e      	ldr	r0, [pc, #184]	; (800292c <low_level_init+0x134>)
 8002874:	f7fe fb0e 	bl	8000e94 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002878:	2308      	movs	r3, #8
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <low_level_init+0x144>)
 800287c:	4930      	ldr	r1, [pc, #192]	; (8002940 <low_level_init+0x148>)
 800287e:	482b      	ldr	r0, [pc, #172]	; (800292c <low_level_init+0x134>)
 8002880:	f7fe fb70 	bl	8000f64 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2206      	movs	r2, #6
 8002888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <low_level_init+0x134>)
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <low_level_init+0x134>)
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	785a      	ldrb	r2, [r3, #1]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <low_level_init+0x134>)
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	789a      	ldrb	r2, [r3, #2]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <low_level_init+0x134>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	78da      	ldrb	r2, [r3, #3]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <low_level_init+0x134>)
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	791a      	ldrb	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <low_level_init+0x134>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	795a      	ldrb	r2, [r3, #5]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028da:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80028e2:	f043 030a 	orr.w	r3, r3, #10
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80028ee:	480f      	ldr	r0, [pc, #60]	; (800292c <low_level_init+0x134>)
 80028f0:	f7fe fd5c 	bl	80013ac <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	461a      	mov	r2, r3
 80028fa:	210b      	movs	r1, #11
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <low_level_init+0x134>)
 80028fe:	f7fe fc87 	bl	8001210 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f043 030b 	orr.w	r3, r3, #11
 8002908:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	461a      	mov	r2, r3
 800290e:	210b      	movs	r1, #11
 8002910:	4806      	ldr	r0, [pc, #24]	; (800292c <low_level_init+0x134>)
 8002912:	f7fe fce5 	bl	80012e0 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	461a      	mov	r2, r3
 800291c:	210b      	movs	r1, #11
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <low_level_init+0x134>)
 8002920:	f7fe fc76 	bl	8001210 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200032c4 	.word	0x200032c4
 8002930:	40028000 	.word	0x40028000
 8002934:	2000330c 	.word	0x2000330c
 8002938:	20000264 	.word	0x20000264
 800293c:	200002a4 	.word	0x200002a4
 8002940:	20003244 	.word	0x20003244

08002944 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800294e:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <low_level_output+0x138>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002966:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <low_level_output+0x138>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	e05a      	b.n	8002a2c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	da03      	bge.n	8002986 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800297e:	23f8      	movs	r3, #248	; 0xf8
 8002980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8002984:	e05c      	b.n	8002a40 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	895b      	ldrh	r3, [r3, #10]
 800298a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002990:	e02f      	b.n	80029f2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	18d0      	adds	r0, r2, r3
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	18d1      	adds	r1, r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80029a6:	3304      	adds	r3, #4
 80029a8:	461a      	mov	r2, r3
 80029aa:	f00a fd02 	bl	800d3b2 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da03      	bge.n	80029c4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80029bc:	23f8      	movs	r3, #248	; 0xf8
 80029be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80029c2:	e03d      	b.n	8002a40 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80029d4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80029e0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80029ec:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d8c8      	bhi.n	8002992 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	18d0      	adds	r0, r2, r3
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f00a fcce 	bl	800d3b2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1a1      	bne.n	8002976 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8002a32:	6979      	ldr	r1, [r7, #20]
 8002a34:	4811      	ldr	r0, [pc, #68]	; (8002a7c <low_level_output+0x138>)
 8002a36:	f7fe fb01 	bl	800103c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <low_level_output+0x138>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a48:	3314      	adds	r3, #20
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <low_level_output+0x138>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	2220      	movs	r2, #32
 8002a60:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <low_level_output+0x138>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8002a70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200032c4 	.word	0x200032c4

08002a80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <ethernetif_init+0x1c>
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <ethernetif_init+0x48>)
 8002a90:	f240 220b 	movw	r2, #523	; 0x20b
 8002a94:	490d      	ldr	r1, [pc, #52]	; (8002acc <ethernetif_init+0x4c>)
 8002a96:	480e      	ldr	r0, [pc, #56]	; (8002ad0 <ethernetif_init+0x50>)
 8002a98:	f00a fc9e 	bl	800d3d8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2273      	movs	r2, #115	; 0x73
 8002aa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2274      	movs	r2, #116	; 0x74
 8002aa8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <ethernetif_init+0x54>)
 8002ab0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <ethernetif_init+0x58>)
 8002ab6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fe9d 	bl	80027f8 <low_level_init>

  return ERR_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	0800e264 	.word	0x0800e264
 8002acc:	0800e280 	.word	0x0800e280
 8002ad0:	0800e290 	.word	0x0800e290
 8002ad4:	0800b741 	.word	0x0800b741
 8002ad8:	08002945 	.word	0x08002945

08002adc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002ae0:	f7fd ff5c 	bl	800099c <HAL_GetTick>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	ba5b      	rev16	r3, r3
 8002af8:	b29b      	uxth	r3, r3
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	061a      	lsls	r2, r3, #24
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0e1b      	lsrs	r3, r3, #24
 8002b28:	4313      	orrs	r3, r2
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8002b3e:	f000 f8a7 	bl	8002c90 <mem_init>
  memp_init();
 8002b42:	f000 fb37 	bl	80031b4 <memp_init>
  pbuf_init();
  netif_init();
 8002b46:	f000 fbef 	bl	8003328 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8002b4a:	f005 ff9b 	bl	8008a84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8002b4e:	f001 fb41 	bl	80041d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8002b52:	f005 fecb 	bl	80088ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8002b68:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <plug_holes+0x10c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d206      	bcs.n	8002b80 <plug_holes+0x20>
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <plug_holes+0x110>)
 8002b74:	f240 125d 	movw	r2, #349	; 0x15d
 8002b78:	493e      	ldr	r1, [pc, #248]	; (8002c74 <plug_holes+0x114>)
 8002b7a:	483f      	ldr	r0, [pc, #252]	; (8002c78 <plug_holes+0x118>)
 8002b7c:	f00a fc2c 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8002b80:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <plug_holes+0x11c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d306      	bcc.n	8002b98 <plug_holes+0x38>
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <plug_holes+0x110>)
 8002b8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002b90:	493b      	ldr	r1, [pc, #236]	; (8002c80 <plug_holes+0x120>)
 8002b92:	4839      	ldr	r0, [pc, #228]	; (8002c78 <plug_holes+0x118>)
 8002b94:	f00a fc20 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	791b      	ldrb	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <plug_holes+0x4e>
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <plug_holes+0x110>)
 8002ba2:	f240 125f 	movw	r2, #351	; 0x15f
 8002ba6:	4937      	ldr	r1, [pc, #220]	; (8002c84 <plug_holes+0x124>)
 8002ba8:	4833      	ldr	r0, [pc, #204]	; (8002c78 <plug_holes+0x118>)
 8002baa:	f00a fc15 	bl	800d3d8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002bb6:	d906      	bls.n	8002bc6 <plug_holes+0x66>
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <plug_holes+0x110>)
 8002bba:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8002bbe:	4932      	ldr	r1, [pc, #200]	; (8002c88 <plug_holes+0x128>)
 8002bc0:	482d      	ldr	r0, [pc, #180]	; (8002c78 <plug_holes+0x118>)
 8002bc2:	f00a fc09 	bl	800d3d8 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <plug_holes+0x10c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d01f      	beq.n	8002c1a <plug_holes+0xba>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	791b      	ldrb	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11b      	bne.n	8002c1a <plug_holes+0xba>
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <plug_holes+0x11c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d016      	beq.n	8002c1a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <plug_holes+0x12c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d102      	bne.n	8002bfc <plug_holes+0x9c>
      lfree = mem;
 8002bf6:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <plug_holes+0x12c>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <plug_holes+0x10c>)
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	1a99      	subs	r1, r3, r2
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <plug_holes+0x10c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	8812      	ldrh	r2, [r2, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	b28a      	uxth	r2, r1
 8002c18:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <plug_holes+0x10c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	8852      	ldrh	r2, [r2, #2]
 8002c22:	4413      	add	r3, r2
 8002c24:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d01a      	beq.n	8002c64 <plug_holes+0x104>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	791b      	ldrb	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d116      	bne.n	8002c64 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <plug_holes+0x12c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d102      	bne.n	8002c46 <plug_holes+0xe6>
      lfree = pmem;
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <plug_holes+0x12c>)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <plug_holes+0x10c>)
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	1a99      	subs	r1, r3, r2
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <plug_holes+0x10c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	8812      	ldrh	r2, [r2, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	b28a      	uxth	r2, r1
 8002c62:	805a      	strh	r2, [r3, #2]
  }
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	2000009c 	.word	0x2000009c
 8002c70:	0800e2b8 	.word	0x0800e2b8
 8002c74:	0800e2e8 	.word	0x0800e2e8
 8002c78:	0800e300 	.word	0x0800e300
 8002c7c:	200000a0 	.word	0x200000a0
 8002c80:	0800e328 	.word	0x0800e328
 8002c84:	0800e344 	.word	0x0800e344
 8002c88:	0800e360 	.word	0x0800e360
 8002c8c:	200000a4 	.word	0x200000a4

08002c90 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <mem_init+0x68>)
 8002c98:	3303      	adds	r3, #3
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <mem_init+0x6c>)
 8002ca2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <mem_init+0x6c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002cb0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <mem_init+0x6c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <mem_init+0x70>)
 8002cc8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <mem_init+0x70>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <mem_init+0x70>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002cda:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <mem_init+0x70>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002ce4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <mem_init+0x6c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <mem_init+0x74>)
 8002cec:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20004af4 	.word	0x20004af4
 8002cfc:	2000009c 	.word	0x2000009c
 8002d00:	200000a0 	.word	0x200000a0
 8002d04:	200000a4 	.word	0x200000a4

08002d08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d043      	beq.n	8002d9e <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <mem_free+0x26>
 8002d20:	4b22      	ldr	r3, [pc, #136]	; (8002dac <mem_free+0xa4>)
 8002d22:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8002d26:	4922      	ldr	r1, [pc, #136]	; (8002db0 <mem_free+0xa8>)
 8002d28:	4822      	ldr	r0, [pc, #136]	; (8002db4 <mem_free+0xac>)
 8002d2a:	f00a fb55 	bl	800d3d8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <mem_free+0xb0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d304      	bcc.n	8002d42 <mem_free+0x3a>
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <mem_free+0xb4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d306      	bcc.n	8002d50 <mem_free+0x48>
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <mem_free+0xa4>)
 8002d44:	f240 12af 	movw	r2, #431	; 0x1af
 8002d48:	491d      	ldr	r1, [pc, #116]	; (8002dc0 <mem_free+0xb8>)
 8002d4a:	481a      	ldr	r0, [pc, #104]	; (8002db4 <mem_free+0xac>)
 8002d4c:	f00a fb44 	bl	800d3d8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <mem_free+0xb0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d323      	bcc.n	8002da2 <mem_free+0x9a>
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <mem_free+0xb4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d21e      	bcs.n	8002da2 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b08      	subs	r3, #8
 8002d68:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	791b      	ldrb	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <mem_free+0x78>
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <mem_free+0xa4>)
 8002d74:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002d78:	4912      	ldr	r1, [pc, #72]	; (8002dc4 <mem_free+0xbc>)
 8002d7a:	480e      	ldr	r0, [pc, #56]	; (8002db4 <mem_free+0xac>)
 8002d7c:	f00a fb2c 	bl	800d3d8 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <mem_free+0xc0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d202      	bcs.n	8002d96 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <mem_free+0xc0>)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff fee2 	bl	8002b60 <plug_holes>
 8002d9c:	e002      	b.n	8002da4 <mem_free+0x9c>
    return;
 8002d9e:	bf00      	nop
 8002da0:	e000      	b.n	8002da4 <mem_free+0x9c>
    return;
 8002da2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	0800e2b8 	.word	0x0800e2b8
 8002db0:	0800e38c 	.word	0x0800e38c
 8002db4:	0800e300 	.word	0x0800e300
 8002db8:	2000009c 	.word	0x2000009c
 8002dbc:	200000a0 	.word	0x200000a0
 8002dc0:	0800e3b0 	.word	0x0800e3b0
 8002dc4:	0800e3c8 	.word	0x0800e3c8
 8002dc8:	200000a4 	.word	0x200000a4

08002dcc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	3303      	adds	r3, #3
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	2b0b      	cmp	r3, #11
 8002de8:	d801      	bhi.n	8002dee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8002dea:	230c      	movs	r3, #12
 8002dec:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002df4:	d901      	bls.n	8002dfa <mem_trim+0x2e>
    return NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e0b1      	b.n	8002f5e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <mem_trim+0x19c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d304      	bcc.n	8002e0e <mem_trim+0x42>
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <mem_trim+0x1a0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d306      	bcc.n	8002e1c <mem_trim+0x50>
 8002e0e:	4b58      	ldr	r3, [pc, #352]	; (8002f70 <mem_trim+0x1a4>)
 8002e10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e14:	4957      	ldr	r1, [pc, #348]	; (8002f74 <mem_trim+0x1a8>)
 8002e16:	4858      	ldr	r0, [pc, #352]	; (8002f78 <mem_trim+0x1ac>)
 8002e18:	f00a fade 	bl	800d3d8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8002e1c:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <mem_trim+0x19c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d304      	bcc.n	8002e30 <mem_trim+0x64>
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <mem_trim+0x1a0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d301      	bcc.n	8002e34 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	e094      	b.n	8002f5e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b08      	subs	r3, #8
 8002e38:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	4a4a      	ldr	r2, [pc, #296]	; (8002f68 <mem_trim+0x19c>)
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	8a3b      	ldrh	r3, [r7, #16]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d906      	bls.n	8002e68 <mem_trim+0x9c>
 8002e5a:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <mem_trim+0x1a4>)
 8002e5c:	f240 2206 	movw	r2, #518	; 0x206
 8002e60:	4946      	ldr	r1, [pc, #280]	; (8002f7c <mem_trim+0x1b0>)
 8002e62:	4845      	ldr	r0, [pc, #276]	; (8002f78 <mem_trim+0x1ac>)
 8002e64:	f00a fab8 	bl	800d3d8 <iprintf>
  if (newsize > size) {
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	8a3b      	ldrh	r3, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d901      	bls.n	8002e74 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e074      	b.n	8002f5e <mem_trim+0x192>
  }
  if (newsize == size) {
 8002e74:	887a      	ldrh	r2, [r7, #2]
 8002e76:	8a3b      	ldrh	r3, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d101      	bne.n	8002e80 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	e06e      	b.n	8002f5e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <mem_trim+0x19c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	8812      	ldrh	r2, [r2, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	791b      	ldrb	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d131      	bne.n	8002ef8 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8002e9a:	8a7a      	ldrh	r2, [r7, #18]
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <mem_trim+0x1b4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d105      	bne.n	8002ebc <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <mem_trim+0x19c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	897b      	ldrh	r3, [r7, #10]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a31      	ldr	r2, [pc, #196]	; (8002f80 <mem_trim+0x1b4>)
 8002eba:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <mem_trim+0x19c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	897b      	ldrh	r3, [r7, #10]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	893a      	ldrh	r2, [r7, #8]
 8002ed0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8a7a      	ldrh	r2, [r7, #18]
 8002ed6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	897a      	ldrh	r2, [r7, #10]
 8002edc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002ee6:	d039      	beq.n	8002f5c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <mem_trim+0x19c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	8812      	ldrh	r2, [r2, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	897a      	ldrh	r2, [r7, #10]
 8002ef4:	805a      	strh	r2, [r3, #2]
 8002ef6:	e031      	b.n	8002f5c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	f103 0214 	add.w	r2, r3, #20
 8002efe:	8a3b      	ldrh	r3, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d82b      	bhi.n	8002f5c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8002f04:	8a7a      	ldrh	r2, [r7, #18]
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	4413      	add	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8002f10:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <mem_trim+0x19c>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	4413      	add	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <mem_trim+0x1b4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d202      	bcs.n	8002f2a <mem_trim+0x15e>
      lfree = mem2;
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <mem_trim+0x1b4>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	881a      	ldrh	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8a7a      	ldrh	r2, [r7, #18]
 8002f3c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	897a      	ldrh	r2, [r7, #10]
 8002f42:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002f4c:	d006      	beq.n	8002f5c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <mem_trim+0x19c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	8812      	ldrh	r2, [r2, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	897a      	ldrh	r2, [r7, #10]
 8002f5a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8002f5c:	687b      	ldr	r3, [r7, #4]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000009c 	.word	0x2000009c
 8002f6c:	200000a0 	.word	0x200000a0
 8002f70:	0800e2b8 	.word	0x0800e2b8
 8002f74:	0800e3dc 	.word	0x0800e3dc
 8002f78:	0800e300 	.word	0x0800e300
 8002f7c:	0800e3f4 	.word	0x0800e3f4
 8002f80:	200000a4 	.word	0x200000a4

08002f84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <mem_malloc+0x14>
    return NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e0c8      	b.n	800312a <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	3303      	adds	r3, #3
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b0b      	cmp	r3, #11
 8002fa8:	d801      	bhi.n	8002fae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8002faa:	230c      	movs	r3, #12
 8002fac:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002fb4:	d901      	bls.n	8002fba <mem_malloc+0x36>
    return NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e0b7      	b.n	800312a <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8002fba:	4b5e      	ldr	r3, [pc, #376]	; (8003134 <mem_malloc+0x1b0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <mem_malloc+0x1b4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	83fb      	strh	r3, [r7, #30]
 8002fc8:	e0a7      	b.n	800311a <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8002fca:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <mem_malloc+0x1b4>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	8bfb      	ldrh	r3, [r7, #30]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 8098 	bne.w	800310e <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	8bfb      	ldrh	r3, [r7, #30]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f1a3 0208 	sub.w	r2, r3, #8
 8002fec:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	f0c0 808d 	bcc.w	800310e <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	8bfb      	ldrh	r3, [r7, #30]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f1a3 0208 	sub.w	r2, r3, #8
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	3314      	adds	r3, #20
 8003006:	429a      	cmp	r2, r3
 8003008:	d327      	bcc.n	800305a <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800300a:	8bfa      	ldrh	r2, [r7, #30]
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	4413      	add	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	3308      	adds	r3, #8
 8003014:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8003016:	4b48      	ldr	r3, [pc, #288]	; (8003138 <mem_malloc+0x1b4>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	4413      	add	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	881a      	ldrh	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8bfa      	ldrh	r2, [r7, #30]
 8003032:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	8a7a      	ldrh	r2, [r7, #18]
 8003038:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2201      	movs	r2, #1
 800303e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003048:	d00a      	beq.n	8003060 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <mem_malloc+0x1b4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	4413      	add	r3, r2
 8003054:	8a7a      	ldrh	r2, [r7, #18]
 8003056:	805a      	strh	r2, [r3, #2]
 8003058:	e002      	b.n	8003060 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2201      	movs	r2, #1
 800305e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <mem_malloc+0x1b0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	429a      	cmp	r2, r3
 8003068:	d127      	bne.n	80030ba <mem_malloc+0x136>
          struct mem *cur = lfree;
 800306a:	4b32      	ldr	r3, [pc, #200]	; (8003134 <mem_malloc+0x1b0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003070:	e005      	b.n	800307e <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <mem_malloc+0x1b4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	4413      	add	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	791b      	ldrb	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <mem_malloc+0x10c>
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <mem_malloc+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	429a      	cmp	r2, r3
 800308e:	d1f0      	bne.n	8003072 <mem_malloc+0xee>
          }
          lfree = cur;
 8003090:	4a28      	ldr	r2, [pc, #160]	; (8003134 <mem_malloc+0x1b0>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <mem_malloc+0x1b0>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <mem_malloc+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d00b      	beq.n	80030ba <mem_malloc+0x136>
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <mem_malloc+0x1b0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <mem_malloc+0x136>
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <mem_malloc+0x1bc>)
 80030ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80030b2:	4924      	ldr	r1, [pc, #144]	; (8003144 <mem_malloc+0x1c0>)
 80030b4:	4824      	ldr	r0, [pc, #144]	; (8003148 <mem_malloc+0x1c4>)
 80030b6:	f00a f98f 	bl	800d3d8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4413      	add	r3, r2
 80030c0:	3308      	adds	r3, #8
 80030c2:	4a1e      	ldr	r2, [pc, #120]	; (800313c <mem_malloc+0x1b8>)
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d906      	bls.n	80030d8 <mem_malloc+0x154>
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <mem_malloc+0x1bc>)
 80030cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80030d0:	491e      	ldr	r1, [pc, #120]	; (800314c <mem_malloc+0x1c8>)
 80030d2:	481d      	ldr	r0, [pc, #116]	; (8003148 <mem_malloc+0x1c4>)
 80030d4:	f00a f980 	bl	800d3d8 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <mem_malloc+0x16c>
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <mem_malloc+0x1bc>)
 80030e4:	f240 22d6 	movw	r2, #726	; 0x2d6
 80030e8:	4919      	ldr	r1, [pc, #100]	; (8003150 <mem_malloc+0x1cc>)
 80030ea:	4817      	ldr	r0, [pc, #92]	; (8003148 <mem_malloc+0x1c4>)
 80030ec:	f00a f974 	bl	800d3d8 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <mem_malloc+0x184>
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <mem_malloc+0x1bc>)
 80030fc:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8003100:	4914      	ldr	r1, [pc, #80]	; (8003154 <mem_malloc+0x1d0>)
 8003102:	4811      	ldr	r0, [pc, #68]	; (8003148 <mem_malloc+0x1c4>)
 8003104:	f00a f968 	bl	800d3d8 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3308      	adds	r3, #8
 800310c:	e00d      	b.n	800312a <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <mem_malloc+0x1b4>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	8bfb      	ldrh	r3, [r7, #30]
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800311a:	8bfa      	ldrh	r2, [r7, #30]
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003122:	429a      	cmp	r2, r3
 8003124:	f4ff af51 	bcc.w	8002fca <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200000a4 	.word	0x200000a4
 8003138:	2000009c 	.word	0x2000009c
 800313c:	200000a0 	.word	0x200000a0
 8003140:	0800e2b8 	.word	0x0800e2b8
 8003144:	0800e414 	.word	0x0800e414
 8003148:	0800e300 	.word	0x0800e300
 800314c:	0800e430 	.word	0x0800e430
 8003150:	0800e460 	.word	0x0800e460
 8003154:	0800e490 	.word	0x0800e490

08003158 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	3303      	adds	r3, #3
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e011      	b.n	800319e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4413      	add	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	885b      	ldrh	r3, [r3, #2]
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	dbe7      	blt.n	800317a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80031ba:	2300      	movs	r3, #0
 80031bc:	80fb      	strh	r3, [r7, #6]
 80031be:	e009      	b.n	80031d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <memp_init+0x30>)
 80031c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ffc5 	bl	8003158 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	3301      	adds	r3, #1
 80031d2:	80fb      	strh	r3, [r7, #6]
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d9f2      	bls.n	80031c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	08010498 	.word	0x08010498

080031e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d012      	beq.n	8003224 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d006      	beq.n	8003220 <do_memp_malloc_pool+0x38>
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <do_memp_malloc_pool+0x48>)
 8003214:	f240 1249 	movw	r2, #329	; 0x149
 8003218:	4906      	ldr	r1, [pc, #24]	; (8003234 <do_memp_malloc_pool+0x4c>)
 800321a:	4807      	ldr	r0, [pc, #28]	; (8003238 <do_memp_malloc_pool+0x50>)
 800321c:	f00a f8dc 	bl	800d3d8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	e000      	b.n	8003226 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	0800e4b4 	.word	0x0800e4b4
 8003234:	0800e4e4 	.word	0x0800e4e4
 8003238:	0800e508 	.word	0x0800e508

0800323c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d908      	bls.n	800325e <memp_malloc+0x22>
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <memp_malloc+0x3c>)
 800324e:	f240 1287 	movw	r2, #391	; 0x187
 8003252:	490a      	ldr	r1, [pc, #40]	; (800327c <memp_malloc+0x40>)
 8003254:	480a      	ldr	r0, [pc, #40]	; (8003280 <memp_malloc+0x44>)
 8003256:	f00a f8bf 	bl	800d3d8 <iprintf>
 800325a:	2300      	movs	r3, #0
 800325c:	e008      	b.n	8003270 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	4a08      	ldr	r2, [pc, #32]	; (8003284 <memp_malloc+0x48>)
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ffbe 	bl	80031e8 <do_memp_malloc_pool>
 800326c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800e4b4 	.word	0x0800e4b4
 800327c:	0800e544 	.word	0x0800e544
 8003280:	0800e508 	.word	0x0800e508
 8003284:	08010498 	.word	0x08010498

08003288 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <do_memp_free_pool+0x22>
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <do_memp_free_pool+0x40>)
 800329e:	f240 129d 	movw	r2, #413	; 0x19d
 80032a2:	490a      	ldr	r1, [pc, #40]	; (80032cc <do_memp_free_pool+0x44>)
 80032a4:	480a      	ldr	r0, [pc, #40]	; (80032d0 <do_memp_free_pool+0x48>)
 80032a6:	f00a f897 	bl	800d3d8 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	0800e4b4 	.word	0x0800e4b4
 80032cc:	0800e564 	.word	0x0800e564
 80032d0:	0800e508 	.word	0x0800e508

080032d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d907      	bls.n	80032f6 <memp_free+0x22>
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <memp_free+0x44>)
 80032e8:	f240 12db 	movw	r2, #475	; 0x1db
 80032ec:	490b      	ldr	r1, [pc, #44]	; (800331c <memp_free+0x48>)
 80032ee:	480c      	ldr	r0, [pc, #48]	; (8003320 <memp_free+0x4c>)
 80032f0:	f00a f872 	bl	800d3d8 <iprintf>
 80032f4:	e00c      	b.n	8003310 <memp_free+0x3c>

  if (mem == NULL) {
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <memp_free+0x50>)
 8003300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003304:	6839      	ldr	r1, [r7, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ffbe 	bl	8003288 <do_memp_free_pool>
 800330c:	e000      	b.n	8003310 <memp_free+0x3c>
    return;
 800330e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	0800e4b4 	.word	0x0800e4b4
 800331c:	0800e584 	.word	0x0800e584
 8003320:	0800e508 	.word	0x0800e508
 8003324:	08010498 	.word	0x08010498

08003328 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <netif_add+0x20>
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <netif_add+0xa4>)
 800334a:	22fb      	movs	r2, #251	; 0xfb
 800334c:	4923      	ldr	r1, [pc, #140]	; (80033dc <netif_add+0xa8>)
 800334e:	4824      	ldr	r0, [pc, #144]	; (80033e0 <netif_add+0xac>)
 8003350:	f00a f842 	bl	800d3d8 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3320      	adds	r3, #32
 8003372:	2204      	movs	r2, #4
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f00a f826 	bl	800d3c8 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2203      	movs	r2, #3
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <netif_add+0xb0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	b2d1      	uxtb	r1, r2
 8003392:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <netif_add+0xb0>)
 8003394:	7011      	strb	r1, [r2, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a3a      	ldr	r2, [r7, #32]
 80033a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f81f 	bl	80033ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	4798      	blx	r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <netif_add+0x8a>
    return NULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e007      	b.n	80033ce <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <netif_add+0xb4>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <netif_add+0xb4>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80033cc:	68fb      	ldr	r3, [r7, #12]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	0800e5a0 	.word	0x0800e5a0
 80033dc:	0800e5d4 	.word	0x0800e5d4
 80033e0:	0800e5ec 	.word	0x0800e5ec
 80033e4:	200000cc 	.word	0x200000cc
 80033e8:	2000801c 	.word	0x2000801c

080033ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <netif_set_addr+0x1c>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10c      	bne.n	8003422 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f81a 	bl	8003444 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f861 	bl	80034da <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f84a 	bl	80034b4 <netif_set_gw>
 8003420:	e00b      	b.n	800343a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f858 	bl	80034da <netif_set_netmask>
    netif_set_gw(netif, gw);
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f841 	bl	80034b4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f805 	bl	8003444 <netif_set_ipaddr>
  }
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <netif_set_ipaddr+0x18>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e002      	b.n	8003462 <netif_set_ipaddr+0x1e>
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <netif_set_ipaddr+0x6c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d01c      	beq.n	80034a8 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	f107 020c 	add.w	r2, r7, #12
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f002 f835 	bl	80054e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	f107 020c 	add.w	r2, r7, #12
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f005 fe53 	bl	8009134 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <netif_set_ipaddr+0x56>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e000      	b.n	800349c <netif_set_ipaddr+0x58>
 800349a:	2300      	movs	r3, #0
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80034a0:	2101      	movs	r1, #1
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f85d 	bl	8003562 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	0801050c 	.word	0x0801050c

080034b4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <netif_set_gw+0x16>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e000      	b.n	80034cc <netif_set_gw+0x18>
 80034ca:	2300      	movs	r3, #0
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <netif_set_netmask+0x16>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e000      	b.n	80034f2 <netif_set_netmask+0x18>
 80034f0:	2300      	movs	r3, #0
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003508:	4a03      	ldr	r2, [pc, #12]	; (8003518 <netif_set_default+0x18>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	20008020 	.word	0x20008020

0800351c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d113      	bne.n	800355a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8003552:	2103      	movs	r1, #3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f804 	bl	8003562 <netif_issue_reports>
    }
  }
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d011      	beq.n	800359c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f008 fbb8 	bl	800bd0c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f007 ff58 	bl	800b490 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <pbuf_pool_is_empty+0x14>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20008024 	.word	0x20008024

08003600 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
 800360a:	460b      	mov	r3, r1
 800360c:	80bb      	strh	r3, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d81c      	bhi.n	8003652 <pbuf_alloc+0x52>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <pbuf_alloc+0x20>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003635 	.word	0x08003635
 8003624:	0800363b 	.word	0x0800363b
 8003628:	08003641 	.word	0x08003641
 800362c:	08003647 	.word	0x08003647
 8003630:	0800364d 	.word	0x0800364d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003634:	2336      	movs	r3, #54	; 0x36
 8003636:	82fb      	strh	r3, [r7, #22]
    break;
 8003638:	e014      	b.n	8003664 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800363a:	2322      	movs	r3, #34	; 0x22
 800363c:	82fb      	strh	r3, [r7, #22]
    break;
 800363e:	e011      	b.n	8003664 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003640:	230e      	movs	r3, #14
 8003642:	82fb      	strh	r3, [r7, #22]
    break;
 8003644:	e00e      	b.n	8003664 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8003646:	2300      	movs	r3, #0
 8003648:	82fb      	strh	r3, [r7, #22]
    break;
 800364a:	e00b      	b.n	8003664 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	82fb      	strh	r3, [r7, #22]
    break;
 8003650:	e008      	b.n	8003664 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8003652:	4ba5      	ldr	r3, [pc, #660]	; (80038e8 <pbuf_alloc+0x2e8>)
 8003654:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003658:	49a4      	ldr	r1, [pc, #656]	; (80038ec <pbuf_alloc+0x2ec>)
 800365a:	48a5      	ldr	r0, [pc, #660]	; (80038f0 <pbuf_alloc+0x2f0>)
 800365c:	f009 febc 	bl	800d3d8 <iprintf>
    return NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	e15d      	b.n	8003920 <pbuf_alloc+0x320>
  }

  switch (type) {
 8003664:	79bb      	ldrb	r3, [r7, #6]
 8003666:	2b03      	cmp	r3, #3
 8003668:	f200 8134 	bhi.w	80038d4 <pbuf_alloc+0x2d4>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <pbuf_alloc+0x74>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003815 	.word	0x08003815
 8003678:	080038a1 	.word	0x080038a1
 800367c:	080038a1 	.word	0x080038a1
 8003680:	08003685 	.word	0x08003685
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003684:	2008      	movs	r0, #8
 8003686:	f7ff fdd9 	bl	800323c <memp_malloc>
 800368a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8003692:	f7ff ffa9 	bl	80035e8 <pbuf_pool_is_empty>
      return NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	e142      	b.n	8003920 <pbuf_alloc+0x320>
    }
    p->type = type;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	79ba      	ldrb	r2, [r7, #6]
 800369e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80036a6:	8afb      	ldrh	r3, [r7, #22]
 80036a8:	3310      	adds	r3, #16
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	3303      	adds	r3, #3
 80036b0:	f023 0303 	bic.w	r3, r3, #3
 80036b4:	461a      	mov	r2, r3
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <pbuf_alloc+0xd4>
 80036c6:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <pbuf_alloc+0x2e8>)
 80036c8:	f240 1229 	movw	r2, #297	; 0x129
 80036cc:	4989      	ldr	r1, [pc, #548]	; (80038f4 <pbuf_alloc+0x2f4>)
 80036ce:	4888      	ldr	r0, [pc, #544]	; (80038f0 <pbuf_alloc+0x2f0>)
 80036d0:	f009 fe82 	bl	800d3d8 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	88ba      	ldrh	r2, [r7, #4]
 80036d8:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80036da:	8afb      	ldrh	r3, [r7, #22]
 80036dc:	3303      	adds	r3, #3
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bf28      	it	cs
 80036ec:	4613      	movcs	r3, r2
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	8952      	ldrh	r2, [r2, #10]
 80036fc:	441a      	add	r2, r3
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003704:	429a      	cmp	r2, r3
 8003706:	d906      	bls.n	8003716 <pbuf_alloc+0x116>
 8003708:	4b77      	ldr	r3, [pc, #476]	; (80038e8 <pbuf_alloc+0x2e8>)
 800370a:	f44f 7298 	mov.w	r2, #304	; 0x130
 800370e:	497a      	ldr	r1, [pc, #488]	; (80038f8 <pbuf_alloc+0x2f8>)
 8003710:	4877      	ldr	r0, [pc, #476]	; (80038f0 <pbuf_alloc+0x2f0>)
 8003712:	f009 fe61 	bl	800d3d8 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8003716:	8afb      	ldrh	r3, [r7, #22]
 8003718:	3303      	adds	r3, #3
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003722:	d106      	bne.n	8003732 <pbuf_alloc+0x132>
 8003724:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <pbuf_alloc+0x2e8>)
 8003726:	f44f 7299 	mov.w	r2, #306	; 0x132
 800372a:	4974      	ldr	r1, [pc, #464]	; (80038fc <pbuf_alloc+0x2fc>)
 800372c:	4870      	ldr	r0, [pc, #448]	; (80038f0 <pbuf_alloc+0x2f0>)
 800372e:	f009 fe53 	bl	800d3d8 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2201      	movs	r2, #1
 8003736:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800373c:	88bb      	ldrh	r3, [r7, #4]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	8952      	ldrh	r2, [r2, #10]
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8003746:	e061      	b.n	800380c <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003748:	2008      	movs	r0, #8
 800374a:	f7ff fd77 	bl	800323c <memp_malloc>
 800374e:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8003756:	f7ff ff47 	bl	80035e8 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800375a:	69f8      	ldr	r0, [r7, #28]
 800375c:	f000 fac2 	bl	8003ce4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	e0dd      	b.n	8003920 <pbuf_alloc+0x320>
      }
      q->type = type;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	79ba      	ldrb	r2, [r7, #6]
 8003768:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003782:	4293      	cmp	r3, r2
 8003784:	dd06      	ble.n	8003794 <pbuf_alloc+0x194>
 8003786:	4b58      	ldr	r3, [pc, #352]	; (80038e8 <pbuf_alloc+0x2e8>)
 8003788:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800378c:	495c      	ldr	r1, [pc, #368]	; (8003900 <pbuf_alloc+0x300>)
 800378e:	4858      	ldr	r0, [pc, #352]	; (80038f0 <pbuf_alloc+0x2f0>)
 8003790:	f009 fe22 	bl	800d3d8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80037a4:	bf28      	it	cs
 80037a6:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f103 0210 	add.w	r2, r3, #16
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <pbuf_alloc+0x1d4>
 80037c6:	4b48      	ldr	r3, [pc, #288]	; (80038e8 <pbuf_alloc+0x2e8>)
 80037c8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80037cc:	494d      	ldr	r1, [pc, #308]	; (8003904 <pbuf_alloc+0x304>)
 80037ce:	4848      	ldr	r0, [pc, #288]	; (80038f0 <pbuf_alloc+0x2f0>)
 80037d0:	f009 fe02 	bl	800d3d8 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	8952      	ldrh	r2, [r2, #10]
 80037dc:	441a      	add	r2, r3
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d906      	bls.n	80037f6 <pbuf_alloc+0x1f6>
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <pbuf_alloc+0x2e8>)
 80037ea:	f240 1255 	movw	r2, #341	; 0x155
 80037ee:	4942      	ldr	r1, [pc, #264]	; (80038f8 <pbuf_alloc+0x2f8>)
 80037f0:	483f      	ldr	r0, [pc, #252]	; (80038f0 <pbuf_alloc+0x2f0>)
 80037f2:	f009 fdf1 	bl	800d3d8 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	895b      	ldrh	r3, [r3, #10]
 8003800:	461a      	mov	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	dc9a      	bgt.n	8003748 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8003812:	e07e      	b.n	8003912 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8003814:	8afb      	ldrh	r3, [r7, #22]
 8003816:	3313      	adds	r3, #19
 8003818:	b29b      	uxth	r3, r3
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	b29a      	uxth	r2, r3
 8003820:	88bb      	ldrh	r3, [r7, #4]
 8003822:	3303      	adds	r3, #3
 8003824:	b29b      	uxth	r3, r3
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	b29b      	uxth	r3, r3
 800382c:	4413      	add	r3, r2
 800382e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8003830:	897a      	ldrh	r2, [r7, #10]
 8003832:	88bb      	ldrh	r3, [r7, #4]
 8003834:	3303      	adds	r3, #3
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	429a      	cmp	r2, r3
 800383c:	d201      	bcs.n	8003842 <pbuf_alloc+0x242>
        return NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	e06e      	b.n	8003920 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8003842:	897b      	ldrh	r3, [r7, #10]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fb9d 	bl	8002f84 <mem_malloc>
 800384a:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <pbuf_alloc+0x256>
      return NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	e064      	b.n	8003920 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003856:	8afb      	ldrh	r3, [r7, #22]
 8003858:	3310      	adds	r3, #16
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	3303      	adds	r3, #3
 8003860:	f023 0303 	bic.w	r3, r3, #3
 8003864:	461a      	mov	r2, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	88ba      	ldrh	r2, [r7, #4]
 800386e:	811a      	strh	r2, [r3, #8]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	891a      	ldrh	r2, [r3, #8]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
    p->type = type;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	79ba      	ldrb	r2, [r7, #6]
 8003882:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d03f      	beq.n	8003910 <pbuf_alloc+0x310>
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <pbuf_alloc+0x2e8>)
 8003892:	f240 1277 	movw	r2, #375	; 0x177
 8003896:	491c      	ldr	r1, [pc, #112]	; (8003908 <pbuf_alloc+0x308>)
 8003898:	4815      	ldr	r0, [pc, #84]	; (80038f0 <pbuf_alloc+0x2f0>)
 800389a:	f009 fd9d 	bl	800d3d8 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800389e:	e037      	b.n	8003910 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80038a0:	2007      	movs	r0, #7
 80038a2:	f7ff fccb 	bl	800323c <memp_malloc>
 80038a6:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e036      	b.n	8003920 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	88ba      	ldrh	r2, [r7, #4]
 80038bc:	811a      	strh	r2, [r3, #8]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	891a      	ldrh	r2, [r3, #8]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
    p->type = type;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	79ba      	ldrb	r2, [r7, #6]
 80038d0:	731a      	strb	r2, [r3, #12]
    break;
 80038d2:	e01e      	b.n	8003912 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <pbuf_alloc+0x2e8>)
 80038d6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80038da:	490c      	ldr	r1, [pc, #48]	; (800390c <pbuf_alloc+0x30c>)
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <pbuf_alloc+0x2f0>)
 80038de:	f009 fd7b 	bl	800d3d8 <iprintf>
    return NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e01c      	b.n	8003920 <pbuf_alloc+0x320>
 80038e6:	bf00      	nop
 80038e8:	0800e614 	.word	0x0800e614
 80038ec:	0800e644 	.word	0x0800e644
 80038f0:	0800e660 	.word	0x0800e660
 80038f4:	0800e688 	.word	0x0800e688
 80038f8:	0800e6b8 	.word	0x0800e6b8
 80038fc:	0800e6ec 	.word	0x0800e6ec
 8003900:	0800e720 	.word	0x0800e720
 8003904:	0800e734 	.word	0x0800e734
 8003908:	0800e764 	.word	0x0800e764
 800390c:	0800e790 	.word	0x0800e790
    break;
 8003910:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2201      	movs	r2, #1
 8003916:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2200      	movs	r2, #0
 800391c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800391e:	69fb      	ldr	r3, [r7, #28]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	71fb      	strb	r3, [r7, #7]
 8003934:	460b      	mov	r3, r1
 8003936:	80bb      	strh	r3, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d81b      	bhi.n	800397a <pbuf_alloced_custom+0x52>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <pbuf_alloced_custom+0x20>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800395d 	.word	0x0800395d
 800394c:	08003963 	.word	0x08003963
 8003950:	08003969 	.word	0x08003969
 8003954:	0800396f 	.word	0x0800396f
 8003958:	08003975 	.word	0x08003975
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800395c:	2336      	movs	r3, #54	; 0x36
 800395e:	81fb      	strh	r3, [r7, #14]
    break;
 8003960:	e014      	b.n	800398c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003962:	2322      	movs	r3, #34	; 0x22
 8003964:	81fb      	strh	r3, [r7, #14]
    break;
 8003966:	e011      	b.n	800398c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003968:	230e      	movs	r3, #14
 800396a:	81fb      	strh	r3, [r7, #14]
    break;
 800396c:	e00e      	b.n	800398c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800396e:	2300      	movs	r3, #0
 8003970:	81fb      	strh	r3, [r7, #14]
    break;
 8003972:	e00b      	b.n	800398c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	81fb      	strh	r3, [r7, #14]
    break;
 8003978:	e008      	b.n	800398c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <pbuf_alloced_custom+0xc8>)
 800397c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8003980:	491c      	ldr	r1, [pc, #112]	; (80039f4 <pbuf_alloced_custom+0xcc>)
 8003982:	481d      	ldr	r0, [pc, #116]	; (80039f8 <pbuf_alloced_custom+0xd0>)
 8003984:	f009 fd28 	bl	800d3d8 <iprintf>
    return NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	e02d      	b.n	80039e8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800398c:	89fb      	ldrh	r3, [r7, #14]
 800398e:	3303      	adds	r3, #3
 8003990:	f023 0203 	bic.w	r2, r3, #3
 8003994:	88bb      	ldrh	r3, [r7, #4]
 8003996:	441a      	add	r2, r3
 8003998:	8bbb      	ldrh	r3, [r7, #28]
 800399a:	429a      	cmp	r2, r3
 800399c:	d901      	bls.n	80039a2 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	e022      	b.n	80039e8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80039ae:	89fb      	ldrh	r3, [r7, #14]
 80039b0:	3303      	adds	r3, #3
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	441a      	add	r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	e002      	b.n	80039c6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2202      	movs	r2, #2
 80039ca:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	88ba      	ldrh	r2, [r7, #4]
 80039d0:	811a      	strh	r2, [r3, #8]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	891a      	ldrh	r2, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	79ba      	ldrb	r2, [r7, #6]
 80039de:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2201      	movs	r2, #1
 80039e4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80039e6:	683b      	ldr	r3, [r7, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	0800e614 	.word	0x0800e614
 80039f4:	0800e7ac 	.word	0x0800e7ac
 80039f8:	0800e660 	.word	0x0800e660

080039fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <pbuf_realloc+0x20>
 8003a0e:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <pbuf_realloc+0x140>)
 8003a10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003a14:	494a      	ldr	r1, [pc, #296]	; (8003b40 <pbuf_realloc+0x144>)
 8003a16:	484b      	ldr	r0, [pc, #300]	; (8003b44 <pbuf_realloc+0x148>)
 8003a18:	f009 fcde 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7b1b      	ldrb	r3, [r3, #12]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d012      	beq.n	8003a4a <pbuf_realloc+0x4e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7b1b      	ldrb	r3, [r3, #12]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d00e      	beq.n	8003a4a <pbuf_realloc+0x4e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7b1b      	ldrb	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <pbuf_realloc+0x4e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7b1b      	ldrb	r3, [r3, #12]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d006      	beq.n	8003a4a <pbuf_realloc+0x4e>
 8003a3c:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <pbuf_realloc+0x140>)
 8003a3e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8003a42:	4941      	ldr	r1, [pc, #260]	; (8003b48 <pbuf_realloc+0x14c>)
 8003a44:	483f      	ldr	r0, [pc, #252]	; (8003b44 <pbuf_realloc+0x148>)
 8003a46:	f009 fcc7 	bl	800d3d8 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	891b      	ldrh	r3, [r3, #8]
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d26f      	bcs.n	8003b34 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	8912      	ldrh	r2, [r2, #8]
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	827b      	strh	r3, [r7, #18]
  q = p;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8003a66:	e025      	b.n	8003ab4 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	895b      	ldrh	r3, [r3, #10]
 8003a6c:	8a7a      	ldrh	r2, [r7, #18]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	dd06      	ble.n	8003a8a <pbuf_realloc+0x8e>
 8003a7c:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <pbuf_realloc+0x140>)
 8003a7e:	f240 220b 	movw	r2, #523	; 0x20b
 8003a82:	4932      	ldr	r1, [pc, #200]	; (8003b4c <pbuf_realloc+0x150>)
 8003a84:	482f      	ldr	r0, [pc, #188]	; (8003b44 <pbuf_realloc+0x148>)
 8003a86:	f009 fca7 	bl	800d3d8 <iprintf>
    q->tot_len += (u16_t)grow;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	891a      	ldrh	r2, [r3, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <pbuf_realloc+0xb8>
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <pbuf_realloc+0x140>)
 8003aa8:	f240 220f 	movw	r2, #527	; 0x20f
 8003aac:	4928      	ldr	r1, [pc, #160]	; (8003b50 <pbuf_realloc+0x154>)
 8003aae:	4825      	ldr	r0, [pc, #148]	; (8003b44 <pbuf_realloc+0x148>)
 8003ab0:	f009 fc92 	bl	800d3d8 <iprintf>
  while (rem_len > q->len) {
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	895b      	ldrh	r3, [r3, #10]
 8003ab8:	8a7a      	ldrh	r2, [r7, #18]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d8d4      	bhi.n	8003a68 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	7b1b      	ldrb	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d122      	bne.n	8003b0c <pbuf_realloc+0x110>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	895b      	ldrh	r3, [r3, #10]
 8003aca:	8a7a      	ldrh	r2, [r7, #18]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d01d      	beq.n	8003b0c <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	7b5b      	ldrb	r3, [r3, #13]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d117      	bne.n	8003b0c <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	8a7b      	ldrh	r3, [r7, #18]
 8003aea:	4413      	add	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f7ff f96b 	bl	8002dcc <mem_trim>
 8003af6:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <pbuf_realloc+0x110>
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <pbuf_realloc+0x140>)
 8003b00:	f240 221d 	movw	r2, #541	; 0x21d
 8003b04:	4913      	ldr	r1, [pc, #76]	; (8003b54 <pbuf_realloc+0x158>)
 8003b06:	480f      	ldr	r0, [pc, #60]	; (8003b44 <pbuf_realloc+0x148>)
 8003b08:	f009 fc66 	bl	800d3d8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	8a7a      	ldrh	r2, [r7, #18]
 8003b10:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	895a      	ldrh	r2, [r3, #10]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f8dc 	bl	8003ce4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e000      	b.n	8003b36 <pbuf_realloc+0x13a>
    return;
 8003b34:	bf00      	nop

}
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	0800e614 	.word	0x0800e614
 8003b40:	0800e7d0 	.word	0x0800e7d0
 8003b44:	0800e660 	.word	0x0800e660
 8003b48:	0800e7e8 	.word	0x0800e7e8
 8003b4c:	0800e804 	.word	0x0800e804
 8003b50:	0800e818 	.word	0x0800e818
 8003b54:	0800e830 	.word	0x0800e830

08003b58 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	807b      	strh	r3, [r7, #2]
 8003b64:	4613      	mov	r3, r2
 8003b66:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <pbuf_header_impl+0x24>
 8003b6e:	4b46      	ldr	r3, [pc, #280]	; (8003c88 <pbuf_header_impl+0x130>)
 8003b70:	f240 223f 	movw	r2, #575	; 0x23f
 8003b74:	4945      	ldr	r1, [pc, #276]	; (8003c8c <pbuf_header_impl+0x134>)
 8003b76:	4846      	ldr	r0, [pc, #280]	; (8003c90 <pbuf_header_impl+0x138>)
 8003b78:	f009 fc2e 	bl	800d3d8 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8003b7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <pbuf_header_impl+0x32>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <pbuf_header_impl+0x36>
    return 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e078      	b.n	8003c80 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8003b8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da10      	bge.n	8003bb8 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	425b      	negs	r3, r3
 8003b9a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	895b      	ldrh	r3, [r3, #10]
 8003ba0:	89fa      	ldrh	r2, [r7, #14]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90a      	bls.n	8003bbc <pbuf_header_impl+0x64>
 8003ba6:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <pbuf_header_impl+0x130>)
 8003ba8:	f240 2247 	movw	r2, #583	; 0x247
 8003bac:	4939      	ldr	r1, [pc, #228]	; (8003c94 <pbuf_header_impl+0x13c>)
 8003bae:	4838      	ldr	r0, [pc, #224]	; (8003c90 <pbuf_header_impl+0x138>)
 8003bb0:	f009 fc12 	bl	800d3d8 <iprintf>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e063      	b.n	8003c80 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7b1b      	ldrb	r3, [r3, #12]
 8003bc0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8003bc8:	89bb      	ldrh	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <pbuf_header_impl+0x7c>
 8003bce:	89bb      	ldrh	r3, [r7, #12]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d112      	bne.n	8003bfa <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bdc:	425b      	negs	r3, r3
 8003bde:	441a      	add	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3310      	adds	r3, #16
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d238      	bcs.n	8003c62 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8003bfa:	89bb      	ldrh	r3, [r7, #12]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d002      	beq.n	8003c06 <pbuf_header_impl+0xae>
 8003c00:	89bb      	ldrh	r3, [r7, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d124      	bne.n	8003c50 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8003c06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	da0d      	bge.n	8003c2a <pbuf_header_impl+0xd2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	895b      	ldrh	r3, [r3, #10]
 8003c12:	89fa      	ldrh	r2, [r7, #14]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d808      	bhi.n	8003c2a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c20:	425b      	negs	r3, r3
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	e011      	b.n	8003c4e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8003c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	dd0b      	ble.n	8003c4a <pbuf_header_impl+0xf2>
 8003c32:	787b      	ldrb	r3, [r7, #1]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c40:	425b      	negs	r3, r3
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e001      	b.n	8003c4e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e018      	b.n	8003c80 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8003c4e:	e008      	b.n	8003c62 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <pbuf_header_impl+0x130>)
 8003c52:	f240 2277 	movw	r2, #631	; 0x277
 8003c56:	4910      	ldr	r1, [pc, #64]	; (8003c98 <pbuf_header_impl+0x140>)
 8003c58:	480d      	ldr	r0, [pc, #52]	; (8003c90 <pbuf_header_impl+0x138>)
 8003c5a:	f009 fbbd 	bl	800d3d8 <iprintf>
    return 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e00e      	b.n	8003c80 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	895a      	ldrh	r2, [r3, #10]
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	4413      	add	r3, r2
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	891a      	ldrh	r2, [r3, #8]
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	4413      	add	r3, r2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	0800e614 	.word	0x0800e614
 8003c8c:	0800e84c 	.word	0x0800e84c
 8003c90:	0800e660 	.word	0x0800e660
 8003c94:	0800e858 	.word	0x0800e858
 8003c98:	0800e878 	.word	0x0800e878

08003c9c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8003ca8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cac:	2200      	movs	r2, #0
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff51 	bl	8003b58 <pbuf_header_impl>
 8003cb6:	4603      	mov	r3, r0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8003ccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff3f 	bl	8003b58 <pbuf_header_impl>
 8003cda:	4603      	mov	r3, r0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <pbuf_free+0x22>
 8003cf8:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <pbuf_free+0x110>)
 8003cfa:	f240 22d2 	movw	r2, #722	; 0x2d2
 8003cfe:	493e      	ldr	r1, [pc, #248]	; (8003df8 <pbuf_free+0x114>)
 8003d00:	483e      	ldr	r0, [pc, #248]	; (8003dfc <pbuf_free+0x118>)
 8003d02:	f009 fb69 	bl	800d3d8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e070      	b.n	8003dec <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7b1b      	ldrb	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d012      	beq.n	8003d38 <pbuf_free+0x54>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7b1b      	ldrb	r3, [r3, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d00e      	beq.n	8003d38 <pbuf_free+0x54>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7b1b      	ldrb	r3, [r3, #12]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d00a      	beq.n	8003d38 <pbuf_free+0x54>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7b1b      	ldrb	r3, [r3, #12]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d006      	beq.n	8003d38 <pbuf_free+0x54>
 8003d2a:	4b32      	ldr	r3, [pc, #200]	; (8003df4 <pbuf_free+0x110>)
 8003d2c:	f240 22de 	movw	r2, #734	; 0x2de
 8003d30:	4933      	ldr	r1, [pc, #204]	; (8003e00 <pbuf_free+0x11c>)
 8003d32:	4832      	ldr	r0, [pc, #200]	; (8003dfc <pbuf_free+0x118>)
 8003d34:	f009 fb50 	bl	800d3d8 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8003d3c:	e052      	b.n	8003de4 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	89db      	ldrh	r3, [r3, #14]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <pbuf_free+0x70>
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <pbuf_free+0x110>)
 8003d48:	f240 22eb 	movw	r2, #747	; 0x2eb
 8003d4c:	492d      	ldr	r1, [pc, #180]	; (8003e04 <pbuf_free+0x120>)
 8003d4e:	482b      	ldr	r0, [pc, #172]	; (8003dfc <pbuf_free+0x118>)
 8003d50:	f009 fb42 	bl	800d3d8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	89db      	ldrh	r3, [r3, #14]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	81da      	strh	r2, [r3, #14]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	89db      	ldrh	r3, [r3, #14]
 8003d64:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8003d66:	8abb      	ldrh	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d139      	bne.n	8003de0 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7b1b      	ldrb	r3, [r3, #12]
 8003d76:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7b5b      	ldrb	r3, [r3, #13]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d011      	beq.n	8003da8 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <pbuf_free+0xba>
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <pbuf_free+0x110>)
 8003d92:	f240 22f9 	movw	r2, #761	; 0x2f9
 8003d96:	491c      	ldr	r1, [pc, #112]	; (8003e08 <pbuf_free+0x124>)
 8003d98:	4818      	ldr	r0, [pc, #96]	; (8003dfc <pbuf_free+0x118>)
 8003d9a:	f009 fb1d 	bl	800d3d8 <iprintf>
        pc->custom_free_function(p);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
 8003da6:	e015      	b.n	8003dd4 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8003da8:	89fb      	ldrh	r3, [r7, #14]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d104      	bne.n	8003db8 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	2008      	movs	r0, #8
 8003db2:	f7ff fa8f 	bl	80032d4 <memp_free>
 8003db6:	e00d      	b.n	8003dd4 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8003db8:	89fb      	ldrh	r3, [r7, #14]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d002      	beq.n	8003dc4 <pbuf_free+0xe0>
 8003dbe:	89fb      	ldrh	r3, [r7, #14]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d104      	bne.n	8003dce <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	2007      	movs	r0, #7
 8003dc8:	f7ff fa84 	bl	80032d4 <memp_free>
 8003dcc:	e002      	b.n	8003dd4 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fe ff9a 	bl	8002d08 <mem_free>
        }
      }
      count++;
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	e001      	b.n	8003de4 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1a9      	bne.n	8003d3e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	0800e614 	.word	0x0800e614
 8003df8:	0800e84c 	.word	0x0800e84c
 8003dfc:	0800e660 	.word	0x0800e660
 8003e00:	0800e888 	.word	0x0800e888
 8003e04:	0800e8a0 	.word	0x0800e8a0
 8003e08:	0800e8b8 	.word	0x0800e8b8

08003e0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8003e18:	e005      	b.n	8003e26 <pbuf_clen+0x1a>
    ++len;
 8003e1a:	89fb      	ldrh	r3, [r7, #14]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f6      	bne.n	8003e1a <pbuf_clen+0xe>
  }
  return len;
 8003e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	89db      	ldrh	r3, [r3, #14]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	89db      	ldrh	r3, [r3, #14]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <pbuf_ref+0x30>
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <pbuf_ref+0x38>)
 8003e5c:	f240 3239 	movw	r2, #825	; 0x339
 8003e60:	4904      	ldr	r1, [pc, #16]	; (8003e74 <pbuf_ref+0x3c>)
 8003e62:	4805      	ldr	r0, [pc, #20]	; (8003e78 <pbuf_ref+0x40>)
 8003e64:	f009 fab8 	bl	800d3d8 <iprintf>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	0800e614 	.word	0x0800e614
 8003e74:	0800e8dc 	.word	0x0800e8dc
 8003e78:	0800e660 	.word	0x0800e660

08003e7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <pbuf_cat+0x16>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d107      	bne.n	8003ea2 <pbuf_cat+0x26>
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <pbuf_cat+0x98>)
 8003e94:	f240 324d 	movw	r2, #845	; 0x34d
 8003e98:	491f      	ldr	r1, [pc, #124]	; (8003f18 <pbuf_cat+0x9c>)
 8003e9a:	4820      	ldr	r0, [pc, #128]	; (8003f1c <pbuf_cat+0xa0>)
 8003e9c:	f009 fa9c 	bl	800d3d8 <iprintf>
 8003ea0:	e034      	b.n	8003f0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e00a      	b.n	8003ebe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	891a      	ldrh	r2, [r3, #8]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	891b      	ldrh	r3, [r3, #8]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	891a      	ldrh	r2, [r3, #8]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	895b      	ldrh	r3, [r3, #10]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d006      	beq.n	8003ee0 <pbuf_cat+0x64>
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <pbuf_cat+0x98>)
 8003ed4:	f240 3255 	movw	r2, #853	; 0x355
 8003ed8:	4911      	ldr	r1, [pc, #68]	; (8003f20 <pbuf_cat+0xa4>)
 8003eda:	4810      	ldr	r0, [pc, #64]	; (8003f1c <pbuf_cat+0xa0>)
 8003edc:	f009 fa7c 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d006      	beq.n	8003ef6 <pbuf_cat+0x7a>
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <pbuf_cat+0x98>)
 8003eea:	f240 3256 	movw	r2, #854	; 0x356
 8003eee:	490d      	ldr	r1, [pc, #52]	; (8003f24 <pbuf_cat+0xa8>)
 8003ef0:	480a      	ldr	r0, [pc, #40]	; (8003f1c <pbuf_cat+0xa0>)
 8003ef2:	f009 fa71 	bl	800d3d8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	891a      	ldrh	r2, [r3, #8]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	891b      	ldrh	r3, [r3, #8]
 8003efe:	4413      	add	r3, r2
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	0800e614 	.word	0x0800e614
 8003f18:	0800e8f0 	.word	0x0800e8f0
 8003f1c:	0800e660 	.word	0x0800e660
 8003f20:	0800e928 	.word	0x0800e928
 8003f24:	0800e958 	.word	0x0800e958

08003f28 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ffa1 	bl	8003e7c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8003f3a:	6838      	ldr	r0, [r7, #0]
 8003f3c:	f7ff ff7c 	bl	8003e38 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8003f52:	2300      	movs	r3, #0
 8003f54:	81fb      	strh	r3, [r7, #14]
 8003f56:	2300      	movs	r3, #0
 8003f58:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <pbuf_copy+0x2a>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <pbuf_copy+0x2a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	891a      	ldrh	r2, [r3, #8]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	891b      	ldrh	r3, [r3, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d209      	bcs.n	8003f86 <pbuf_copy+0x3e>
 8003f72:	4b54      	ldr	r3, [pc, #336]	; (80040c4 <pbuf_copy+0x17c>)
 8003f74:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003f78:	4953      	ldr	r1, [pc, #332]	; (80040c8 <pbuf_copy+0x180>)
 8003f7a:	4854      	ldr	r0, [pc, #336]	; (80040cc <pbuf_copy+0x184>)
 8003f7c:	f009 fa2c 	bl	800d3d8 <iprintf>
 8003f80:	f06f 030f 	mvn.w	r3, #15
 8003f84:	e099      	b.n	80040ba <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	895b      	ldrh	r3, [r3, #10]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	89fb      	ldrh	r3, [r7, #14]
 8003f8e:	1ad2      	subs	r2, r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	895b      	ldrh	r3, [r3, #10]
 8003f94:	4619      	mov	r1, r3
 8003f96:	89bb      	ldrh	r3, [r7, #12]
 8003f98:	1acb      	subs	r3, r1, r3
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	db05      	blt.n	8003faa <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	895a      	ldrh	r2, [r3, #10]
 8003fa2:	89bb      	ldrh	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	817b      	strh	r3, [r7, #10]
 8003fa8:	e004      	b.n	8003fb4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	895a      	ldrh	r2, [r3, #10]
 8003fae:	89fb      	ldrh	r3, [r7, #14]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	89fb      	ldrh	r3, [r7, #14]
 8003fba:	18d0      	adds	r0, r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	89bb      	ldrh	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	897a      	ldrh	r2, [r7, #10]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f009 f9f3 	bl	800d3b2 <memcpy>
    offset_to += len;
 8003fcc:	89fa      	ldrh	r2, [r7, #14]
 8003fce:	897b      	ldrh	r3, [r7, #10]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8003fd4:	89ba      	ldrh	r2, [r7, #12]
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	4413      	add	r3, r2
 8003fda:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	895b      	ldrh	r3, [r3, #10]
 8003fe0:	89fa      	ldrh	r2, [r7, #14]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d906      	bls.n	8003ff4 <pbuf_copy+0xac>
 8003fe6:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <pbuf_copy+0x17c>)
 8003fe8:	f240 32cd 	movw	r2, #973	; 0x3cd
 8003fec:	4938      	ldr	r1, [pc, #224]	; (80040d0 <pbuf_copy+0x188>)
 8003fee:	4837      	ldr	r0, [pc, #220]	; (80040cc <pbuf_copy+0x184>)
 8003ff0:	f009 f9f2 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	895b      	ldrh	r3, [r3, #10]
 8003ff8:	89ba      	ldrh	r2, [r7, #12]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d906      	bls.n	800400c <pbuf_copy+0xc4>
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <pbuf_copy+0x17c>)
 8004000:	f240 32ce 	movw	r2, #974	; 0x3ce
 8004004:	4933      	ldr	r1, [pc, #204]	; (80040d4 <pbuf_copy+0x18c>)
 8004006:	4831      	ldr	r0, [pc, #196]	; (80040cc <pbuf_copy+0x184>)
 8004008:	f009 f9e6 	bl	800d3d8 <iprintf>
    if (offset_from >= p_from->len) {
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	895b      	ldrh	r3, [r3, #10]
 8004010:	89ba      	ldrh	r2, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d304      	bcc.n	8004020 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	895b      	ldrh	r3, [r3, #10]
 8004024:	89fa      	ldrh	r2, [r7, #14]
 8004026:	429a      	cmp	r2, r3
 8004028:	d114      	bne.n	8004054 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <pbuf_copy+0x10c>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <pbuf_copy+0x10c>
 8004040:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <pbuf_copy+0x17c>)
 8004042:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8004046:	4924      	ldr	r1, [pc, #144]	; (80040d8 <pbuf_copy+0x190>)
 8004048:	4820      	ldr	r0, [pc, #128]	; (80040cc <pbuf_copy+0x184>)
 800404a:	f009 f9c5 	bl	800d3d8 <iprintf>
 800404e:	f06f 030f 	mvn.w	r3, #15
 8004052:	e032      	b.n	80040ba <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d013      	beq.n	8004082 <pbuf_copy+0x13a>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	895a      	ldrh	r2, [r3, #10]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	891b      	ldrh	r3, [r3, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	d10d      	bne.n	8004082 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <pbuf_copy+0x13a>
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <pbuf_copy+0x17c>)
 8004070:	f240 32de 	movw	r2, #990	; 0x3de
 8004074:	4919      	ldr	r1, [pc, #100]	; (80040dc <pbuf_copy+0x194>)
 8004076:	4815      	ldr	r0, [pc, #84]	; (80040cc <pbuf_copy+0x184>)
 8004078:	f009 f9ae 	bl	800d3d8 <iprintf>
 800407c:	f06f 0305 	mvn.w	r3, #5
 8004080:	e01b      	b.n	80040ba <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <pbuf_copy+0x168>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	895a      	ldrh	r2, [r3, #10]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	891b      	ldrh	r3, [r3, #8]
 8004090:	429a      	cmp	r2, r3
 8004092:	d10d      	bne.n	80040b0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <pbuf_copy+0x168>
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <pbuf_copy+0x17c>)
 800409e:	f240 32e3 	movw	r2, #995	; 0x3e3
 80040a2:	490e      	ldr	r1, [pc, #56]	; (80040dc <pbuf_copy+0x194>)
 80040a4:	4809      	ldr	r0, [pc, #36]	; (80040cc <pbuf_copy+0x184>)
 80040a6:	f009 f997 	bl	800d3d8 <iprintf>
 80040aa:	f06f 0305 	mvn.w	r3, #5
 80040ae:	e004      	b.n	80040ba <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f47f af67 	bne.w	8003f86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	0800e614 	.word	0x0800e614
 80040c8:	0800e9a4 	.word	0x0800e9a4
 80040cc:	0800e660 	.word	0x0800e660
 80040d0:	0800e9d4 	.word	0x0800e9d4
 80040d4:	0800e9ec 	.word	0x0800e9ec
 80040d8:	0800ea08 	.word	0x0800ea08
 80040dc:	0800ea18 	.word	0x0800ea18

080040e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	460b      	mov	r3, r1
 80040f0:	80fb      	strh	r3, [r7, #6]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d108      	bne.n	8004112 <pbuf_copy_partial+0x32>
 8004100:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <pbuf_copy_partial+0xe4>)
 8004102:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004106:	4930      	ldr	r1, [pc, #192]	; (80041c8 <pbuf_copy_partial+0xe8>)
 8004108:	4830      	ldr	r0, [pc, #192]	; (80041cc <pbuf_copy_partial+0xec>)
 800410a:	f009 f965 	bl	800d3d8 <iprintf>
 800410e:	2300      	movs	r3, #0
 8004110:	e054      	b.n	80041bc <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <pbuf_copy_partial+0x4a>
 8004118:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <pbuf_copy_partial+0xe4>)
 800411a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800411e:	492c      	ldr	r1, [pc, #176]	; (80041d0 <pbuf_copy_partial+0xf0>)
 8004120:	482a      	ldr	r0, [pc, #168]	; (80041cc <pbuf_copy_partial+0xec>)
 8004122:	f009 f959 	bl	800d3d8 <iprintf>
 8004126:	2300      	movs	r3, #0
 8004128:	e048      	b.n	80041bc <pbuf_copy_partial+0xdc>

  left = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <pbuf_copy_partial+0x5a>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <pbuf_copy_partial+0x5e>
    return 0;
 800413a:	2300      	movs	r3, #0
 800413c:	e03e      	b.n	80041bc <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e034      	b.n	80041ae <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8004144:	88bb      	ldrh	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <pbuf_copy_partial+0x80>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	895b      	ldrh	r3, [r3, #10]
 800414e:	88ba      	ldrh	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d305      	bcc.n	8004160 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	895b      	ldrh	r3, [r3, #10]
 8004158:	88ba      	ldrh	r2, [r7, #4]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	80bb      	strh	r3, [r7, #4]
 800415e:	e023      	b.n	80041a8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	895a      	ldrh	r2, [r3, #10]
 8004164:	88bb      	ldrh	r3, [r7, #4]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800416a:	8b3a      	ldrh	r2, [r7, #24]
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	429a      	cmp	r2, r3
 8004170:	d901      	bls.n	8004176 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004176:	8b7b      	ldrh	r3, [r7, #26]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	18d0      	adds	r0, r2, r3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	88bb      	ldrh	r3, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	8b3a      	ldrh	r2, [r7, #24]
 8004186:	4619      	mov	r1, r3
 8004188:	f009 f913 	bl	800d3b2 <memcpy>
      copied_total += buf_copy_len;
 800418c:	8afa      	ldrh	r2, [r7, #22]
 800418e:	8b3b      	ldrh	r3, [r7, #24]
 8004190:	4413      	add	r3, r2
 8004192:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8004194:	8b7a      	ldrh	r2, [r7, #26]
 8004196:	8b3b      	ldrh	r3, [r7, #24]
 8004198:	4413      	add	r3, r2
 800419a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	8b3b      	ldrh	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <pbuf_copy_partial+0xda>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1c4      	bne.n	8004144 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80041ba:	8afb      	ldrh	r3, [r7, #22]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	0800e614 	.word	0x0800e614
 80041c8:	0800ea44 	.word	0x0800ea44
 80041cc:	0800e660 	.word	0x0800e660
 80041d0:	0800ea64 	.word	0x0800ea64

080041d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80041e4:	f000 fdf0 	bl	8004dc8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <tcp_tmr+0x28>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <tcp_tmr+0x28>)
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <tcp_tmr+0x28>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004200:	f000 fb22 	bl	8004848 <tcp_slowtmr>
  }
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200000cd 	.word	0x200000cd

0800420c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e00a      	b.n	8004232 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d102      	bne.n	800422c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f1      	bne.n	800421c <tcp_remove_listener+0x10>
      }
   }
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
	...

08004244 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <tcp_listen_closed+0x1a>
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <tcp_listen_closed+0x5c>)
 8004254:	22c0      	movs	r2, #192	; 0xc0
 8004256:	4913      	ldr	r1, [pc, #76]	; (80042a4 <tcp_listen_closed+0x60>)
 8004258:	4813      	ldr	r0, [pc, #76]	; (80042a8 <tcp_listen_closed+0x64>)
 800425a:	f009 f8bd 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7d1b      	ldrb	r3, [r3, #20]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d005      	beq.n	8004272 <tcp_listen_closed+0x2e>
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <tcp_listen_closed+0x5c>)
 8004268:	22c1      	movs	r2, #193	; 0xc1
 800426a:	4910      	ldr	r1, [pc, #64]	; (80042ac <tcp_listen_closed+0x68>)
 800426c:	480e      	ldr	r0, [pc, #56]	; (80042a8 <tcp_listen_closed+0x64>)
 800426e:	f009 f8b3 	bl	800d3d8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004272:	2301      	movs	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e00b      	b.n	8004290 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8004278:	4a0d      	ldr	r2, [pc, #52]	; (80042b0 <tcp_listen_closed+0x6c>)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ffc1 	bl	800420c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d9f0      	bls.n	8004278 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	0800eb98 	.word	0x0800eb98
 80042a4:	0800ebc8 	.word	0x0800ebc8
 80042a8:	0800ebd4 	.word	0x0800ebd4
 80042ac:	0800ebfc 	.word	0x0800ebfc
 80042b0:	080104d4 	.word	0x080104d4

080042b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <tcp_close_shutdown+0xfe>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7d1b      	ldrb	r3, [r3, #20]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d003      	beq.n	80042d6 <tcp_close_shutdown+0x22>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7d1b      	ldrb	r3, [r3, #20]
 80042d2:	2b07      	cmp	r3, #7
 80042d4:	d16d      	bne.n	80043b2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <tcp_close_shutdown+0x34>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80042e6:	d064      	beq.n	80043b2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7e9b      	ldrb	r3, [r3, #26]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <tcp_close_shutdown+0x4e>
 80042f4:	4b59      	ldr	r3, [pc, #356]	; (800445c <tcp_close_shutdown+0x1a8>)
 80042f6:	f240 120f 	movw	r2, #271	; 0x10f
 80042fa:	4959      	ldr	r1, [pc, #356]	; (8004460 <tcp_close_shutdown+0x1ac>)
 80042fc:	4859      	ldr	r0, [pc, #356]	; (8004464 <tcp_close_shutdown+0x1b0>)
 80042fe:	f009 f86b 	bl	800d3d8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800430a:	687c      	ldr	r4, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1d1d      	adds	r5, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8adb      	ldrh	r3, [r3, #22]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	8b12      	ldrh	r2, [r2, #24]
 8004318:	9201      	str	r2, [sp, #4]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	462b      	mov	r3, r5
 800431e:	4622      	mov	r2, r4
 8004320:	f004 f85e 	bl	80083e0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 ffc5 	bl	80052b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800432a:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <tcp_close_shutdown+0x1b4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d105      	bne.n	8004340 <tcp_close_shutdown+0x8c>
 8004334:	4b4c      	ldr	r3, [pc, #304]	; (8004468 <tcp_close_shutdown+0x1b4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4a4b      	ldr	r2, [pc, #300]	; (8004468 <tcp_close_shutdown+0x1b4>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e013      	b.n	8004368 <tcp_close_shutdown+0xb4>
 8004340:	4b49      	ldr	r3, [pc, #292]	; (8004468 <tcp_close_shutdown+0x1b4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e00c      	b.n	8004362 <tcp_close_shutdown+0xae>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d104      	bne.n	800435c <tcp_close_shutdown+0xa8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	e005      	b.n	8004368 <tcp_close_shutdown+0xb4>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1ef      	bne.n	8004348 <tcp_close_shutdown+0x94>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <tcp_close_shutdown+0x1b8>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7d1b      	ldrb	r3, [r3, #20]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d10c      	bne.n	8004396 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	220a      	movs	r2, #10
 8004380:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8004382:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <tcp_close_shutdown+0x1bc>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	4a39      	ldr	r2, [pc, #228]	; (8004470 <tcp_close_shutdown+0x1bc>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	f004 fa76 	bl	8008880 <tcp_timer_needed>
 8004394:	e00b      	b.n	80043ae <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <tcp_close_shutdown+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d102      	bne.n	80043a6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80043a0:	f003 fae8 	bl	8007974 <tcp_trigger_input_pcb_close>
 80043a4:	e003      	b.n	80043ae <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	2001      	movs	r0, #1
 80043aa:	f7fe ff93 	bl	80032d4 <memp_free>
        }
      }
      return ERR_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e050      	b.n	8004454 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	7d1b      	ldrb	r3, [r3, #20]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d02e      	beq.n	8004418 <tcp_close_shutdown+0x164>
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d038      	beq.n	8004430 <tcp_close_shutdown+0x17c>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d142      	bne.n	8004448 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8adb      	ldrh	r3, [r3, #22]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d021      	beq.n	800440e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80043ca:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <tcp_close_shutdown+0x1c4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d105      	bne.n	80043e0 <tcp_close_shutdown+0x12c>
 80043d4:	4b28      	ldr	r3, [pc, #160]	; (8004478 <tcp_close_shutdown+0x1c4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	4a27      	ldr	r2, [pc, #156]	; (8004478 <tcp_close_shutdown+0x1c4>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e013      	b.n	8004408 <tcp_close_shutdown+0x154>
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <tcp_close_shutdown+0x1c4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	e00c      	b.n	8004402 <tcp_close_shutdown+0x14e>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d104      	bne.n	80043fc <tcp_close_shutdown+0x148>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e005      	b.n	8004408 <tcp_close_shutdown+0x154>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ef      	bne.n	80043e8 <tcp_close_shutdown+0x134>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	2001      	movs	r0, #1
 8004412:	f7fe ff5f 	bl	80032d4 <memp_free>
    break;
 8004416:	e01c      	b.n	8004452 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff13 	bl	8004244 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4816      	ldr	r0, [pc, #88]	; (800447c <tcp_close_shutdown+0x1c8>)
 8004422:	f000 ff89 	bl	8005338 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	2002      	movs	r0, #2
 800442a:	f7fe ff53 	bl	80032d4 <memp_free>
    break;
 800442e:	e010      	b.n	8004452 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	480d      	ldr	r0, [pc, #52]	; (8004468 <tcp_close_shutdown+0x1b4>)
 8004434:	f000 ff80 	bl	8005338 <tcp_pcb_remove>
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <tcp_close_shutdown+0x1b8>)
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	2001      	movs	r0, #1
 8004442:	f7fe ff47 	bl	80032d4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8004446:	e004      	b.n	8004452 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f819 	bl	8004480 <tcp_close_shutdown_fin>
 800444e:	4603      	mov	r3, r0
 8004450:	e000      	b.n	8004454 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bdb0      	pop	{r4, r5, r7, pc}
 800445c:	0800eb98 	.word	0x0800eb98
 8004460:	0800ec14 	.word	0x0800ec14
 8004464:	0800ebd4 	.word	0x0800ebd4
 8004468:	2000802c 	.word	0x2000802c
 800446c:	20008028 	.word	0x20008028
 8004470:	2000803c 	.word	0x2000803c
 8004474:	20008040 	.word	0x20008040
 8004478:	20008038 	.word	0x20008038
 800447c:	20008034 	.word	0x20008034

08004480 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <tcp_close_shutdown_fin+0x1c>
 800448e:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <tcp_close_shutdown_fin+0xc0>)
 8004490:	f240 124d 	movw	r2, #333	; 0x14d
 8004494:	492b      	ldr	r1, [pc, #172]	; (8004544 <tcp_close_shutdown_fin+0xc4>)
 8004496:	482c      	ldr	r0, [pc, #176]	; (8004548 <tcp_close_shutdown_fin+0xc8>)
 8004498:	f008 ff9e 	bl	800d3d8 <iprintf>

  switch (pcb->state) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7d1b      	ldrb	r3, [r3, #20]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d010      	beq.n	80044c6 <tcp_close_shutdown_fin+0x46>
 80044a4:	2b07      	cmp	r3, #7
 80044a6:	d01b      	beq.n	80044e0 <tcp_close_shutdown_fin+0x60>
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d126      	bne.n	80044fa <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f003 faed 	bl	8007a8c <tcp_send_fin>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80044b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11f      	bne.n	80044fe <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2205      	movs	r2, #5
 80044c2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80044c4:	e01b      	b.n	80044fe <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f003 fae0 	bl	8007a8c <tcp_send_fin>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80044d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d114      	bne.n	8004502 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2205      	movs	r2, #5
 80044dc:	751a      	strb	r2, [r3, #20]
    }
    break;
 80044de:	e010      	b.n	8004502 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f003 fad3 	bl	8007a8c <tcp_send_fin>
 80044e6:	4603      	mov	r3, r0
 80044e8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80044ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2209      	movs	r2, #9
 80044f6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80044f8:	e005      	b.n	8004506 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e01c      	b.n	8004538 <tcp_close_shutdown_fin+0xb8>
    break;
 80044fe:	bf00      	nop
 8004500:	e002      	b.n	8004508 <tcp_close_shutdown_fin+0x88>
    break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <tcp_close_shutdown_fin+0x88>
    break;
 8004506:	bf00      	nop
  }

  if (err == ERR_OK) {
 8004508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f003 fcdb 	bl	8007ecc <tcp_output>
 8004516:	e00d      	b.n	8004534 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8004518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d108      	bne.n	8004534 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	7e9b      	ldrb	r3, [r3, #26]
 8004526:	f043 0308 	orr.w	r3, r3, #8
 800452a:	b2da      	uxtb	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e001      	b.n	8004538 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8004534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	0800eb98 	.word	0x0800eb98
 8004544:	0800ebc8 	.word	0x0800ebc8
 8004548:	0800ebd4 	.word	0x0800ebd4

0800454c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7d1b      	ldrb	r3, [r3, #20]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d006      	beq.n	800456a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7e9b      	ldrb	r3, [r3, #26]
 8004560:	f043 0310 	orr.w	r3, r3, #16
 8004564:	b2da      	uxtb	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800456a:	2101      	movs	r1, #1
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fea1 	bl	80042b4 <tcp_close_shutdown>
 8004572:	4603      	mov	r3, r0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	; 0x30
 8004580:	af02      	add	r7, sp, #8
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7d1b      	ldrb	r3, [r3, #20]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d106      	bne.n	800459c <tcp_abandon+0x20>
 800458e:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <tcp_abandon+0x148>)
 8004590:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004594:	494c      	ldr	r1, [pc, #304]	; (80046c8 <tcp_abandon+0x14c>)
 8004596:	484d      	ldr	r0, [pc, #308]	; (80046cc <tcp_abandon+0x150>)
 8004598:	f008 ff1e 	bl	800d3d8 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7d1b      	ldrb	r3, [r3, #20]
 80045a0:	2b0a      	cmp	r3, #10
 80045a2:	d108      	bne.n	80045b6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	484a      	ldr	r0, [pc, #296]	; (80046d0 <tcp_abandon+0x154>)
 80045a8:	f000 fec6 	bl	8005338 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	2001      	movs	r0, #1
 80045b0:	f7fe fe90 	bl	80032d4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80045b4:	e081      	b.n	80046ba <tcp_abandon+0x13e>
    int send_rst = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d0:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	7d1b      	ldrb	r3, [r3, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d126      	bne.n	800462e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8adb      	ldrh	r3, [r3, #22]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d02e      	beq.n	8004646 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80045e8:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <tcp_abandon+0x158>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d105      	bne.n	80045fe <tcp_abandon+0x82>
 80045f2:	4b38      	ldr	r3, [pc, #224]	; (80046d4 <tcp_abandon+0x158>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a36      	ldr	r2, [pc, #216]	; (80046d4 <tcp_abandon+0x158>)
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	e013      	b.n	8004626 <tcp_abandon+0xaa>
 80045fe:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <tcp_abandon+0x158>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e00c      	b.n	8004620 <tcp_abandon+0xa4>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d104      	bne.n	800461a <tcp_abandon+0x9e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e005      	b.n	8004626 <tcp_abandon+0xaa>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ef      	bne.n	8004606 <tcp_abandon+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	e00b      	b.n	8004646 <tcp_abandon+0xca>
      send_rst = reset;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8adb      	ldrh	r3, [r3, #22]
 8004636:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4827      	ldr	r0, [pc, #156]	; (80046d8 <tcp_abandon+0x15c>)
 800463c:	f000 fe7c 	bl	8005338 <tcp_pcb_remove>
 8004640:	4b26      	ldr	r3, [pc, #152]	; (80046dc <tcp_abandon+0x160>)
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fc85 	bl	8004f62 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fc7c 	bl	8004f62 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	2b00      	cmp	r3, #0
 8004670:	d004      	beq.n	800467c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fc73 	bl	8004f62 <tcp_segs_free>
    if (send_rst) {
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	1d19      	adds	r1, r3, #4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8b1b      	ldrh	r3, [r3, #24]
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	460b      	mov	r3, r1
 8004694:	6979      	ldr	r1, [r7, #20]
 8004696:	69b8      	ldr	r0, [r7, #24]
 8004698:	f003 fea2 	bl	80083e0 <tcp_rst>
    last_state = pcb->state;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7d1b      	ldrb	r3, [r3, #20]
 80046a0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	2001      	movs	r0, #1
 80046a6:	f7fe fe15 	bl	80032d4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <tcp_abandon+0x13e>
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f06f 010c 	mvn.w	r1, #12
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	4798      	blx	r3
}
 80046ba:	bf00      	nop
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	0800eb98 	.word	0x0800eb98
 80046c8:	0800ec30 	.word	0x0800ec30
 80046cc:	0800ebd4 	.word	0x0800ebd4
 80046d0:	2000803c 	.word	0x2000803c
 80046d4:	20008038 	.word	0x20008038
 80046d8:	2000802c 	.word	0x2000802c
 80046dc:	20008028 	.word	0x20008028

080046e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80046e8:	2101      	movs	r1, #1
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ff46 	bl	800457c <tcp_abandon>
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004708:	4413      	add	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004714:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004718:	bf28      	it	cs
 800471a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800471e:	b292      	uxth	r2, r2
 8004720:	4413      	add	r3, r2
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	db08      	blt.n	800473c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	e020      	b.n	800477e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	dd03      	ble.n	8004752 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004750:	e014      	b.n	800477c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d306      	bcc.n	8004774 <tcp_update_rcv_ann_wnd+0x7c>
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <tcp_update_rcv_ann_wnd+0x90>)
 8004768:	f44f 7242 	mov.w	r2, #776	; 0x308
 800476c:	4907      	ldr	r1, [pc, #28]	; (800478c <tcp_update_rcv_ann_wnd+0x94>)
 800476e:	4808      	ldr	r0, [pc, #32]	; (8004790 <tcp_update_rcv_ann_wnd+0x98>)
 8004770:	f008 fe32 	bl	800d3d8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800477c:	2300      	movs	r3, #0
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	0800eb98 	.word	0x0800eb98
 800478c:	0800ecb0 	.word	0x0800ecb0
 8004790:	0800ebd4 	.word	0x0800ebd4

08004794 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7d1b      	ldrb	r3, [r3, #20]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d106      	bne.n	80047b6 <tcp_recved+0x22>
 80047a8:	4b23      	ldr	r3, [pc, #140]	; (8004838 <tcp_recved+0xa4>)
 80047aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80047ae:	4923      	ldr	r1, [pc, #140]	; (800483c <tcp_recved+0xa8>)
 80047b0:	4823      	ldr	r0, [pc, #140]	; (8004840 <tcp_recved+0xac>)
 80047b2:	f008 fe11 	bl	800d3d8 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80047ba:	887b      	ldrh	r3, [r7, #2]
 80047bc:	4413      	add	r3, r2
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80047cc:	d904      	bls.n	80047d8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80047d4:	851a      	strh	r2, [r3, #40]	; 0x28
 80047d6:	e017      	b.n	8004808 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d113      	bne.n	8004808 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7d1b      	ldrb	r3, [r3, #20]
 80047e4:	2b07      	cmp	r3, #7
 80047e6:	d003      	beq.n	80047f0 <tcp_recved+0x5c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7d1b      	ldrb	r3, [r3, #20]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d104      	bne.n	80047fa <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
 80047f8:	e006      	b.n	8004808 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <tcp_recved+0xa4>)
 80047fc:	f240 322d 	movw	r2, #813	; 0x32d
 8004800:	4910      	ldr	r1, [pc, #64]	; (8004844 <tcp_recved+0xb0>)
 8004802:	480f      	ldr	r0, [pc, #60]	; (8004840 <tcp_recved+0xac>)
 8004804:	f008 fde8 	bl	800d3d8 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff75 	bl	80046f8 <tcp_update_rcv_ann_wnd>
 800480e:	4603      	mov	r3, r0
 8004810:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8004818:	db09      	blt.n	800482e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7e9b      	ldrb	r3, [r3, #26]
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	b2da      	uxtb	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f003 fb4f 	bl	8007ecc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	0800eb98 	.word	0x0800eb98
 800483c:	0800eccc 	.word	0x0800eccc
 8004840:	0800ebd4 	.word	0x0800ebd4
 8004844:	0800ecf4 	.word	0x0800ecf4

08004848 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b08c      	sub	sp, #48	; 0x30
 800484c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8004852:	4b97      	ldr	r3, [pc, #604]	; (8004ab0 <tcp_slowtmr+0x268>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	4a95      	ldr	r2, [pc, #596]	; (8004ab0 <tcp_slowtmr+0x268>)
 800485a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800485c:	4b95      	ldr	r3, [pc, #596]	; (8004ab4 <tcp_slowtmr+0x26c>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	4b93      	ldr	r3, [pc, #588]	; (8004ab4 <tcp_slowtmr+0x26c>)
 8004866:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800486c:	4b92      	ldr	r3, [pc, #584]	; (8004ab8 <tcp_slowtmr+0x270>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8004872:	e227      	b.n	8004cc4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	7d1b      	ldrb	r3, [r3, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <tcp_slowtmr+0x42>
 800487c:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <tcp_slowtmr+0x274>)
 800487e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004882:	498f      	ldr	r1, [pc, #572]	; (8004ac0 <tcp_slowtmr+0x278>)
 8004884:	488f      	ldr	r0, [pc, #572]	; (8004ac4 <tcp_slowtmr+0x27c>)
 8004886:	f008 fda7 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	7d1b      	ldrb	r3, [r3, #20]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d106      	bne.n	80048a0 <tcp_slowtmr+0x58>
 8004892:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <tcp_slowtmr+0x274>)
 8004894:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8004898:	498b      	ldr	r1, [pc, #556]	; (8004ac8 <tcp_slowtmr+0x280>)
 800489a:	488a      	ldr	r0, [pc, #552]	; (8004ac4 <tcp_slowtmr+0x27c>)
 800489c:	f008 fd9c 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	7d1b      	ldrb	r3, [r3, #20]
 80048a4:	2b0a      	cmp	r3, #10
 80048a6:	d106      	bne.n	80048b6 <tcp_slowtmr+0x6e>
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <tcp_slowtmr+0x274>)
 80048aa:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80048ae:	4987      	ldr	r1, [pc, #540]	; (8004acc <tcp_slowtmr+0x284>)
 80048b0:	4884      	ldr	r0, [pc, #528]	; (8004ac4 <tcp_slowtmr+0x27c>)
 80048b2:	f008 fd91 	bl	800d3d8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	7f5a      	ldrb	r2, [r3, #29]
 80048ba:	4b7e      	ldr	r3, [pc, #504]	; (8004ab4 <tcp_slowtmr+0x26c>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d103      	bne.n	80048ca <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80048c8:	e1fc      	b.n	8004cc4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80048ca:	4b7a      	ldr	r3, [pc, #488]	; (8004ab4 <tcp_slowtmr+0x26c>)
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	7d1b      	ldrb	r3, [r3, #20]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d108      	bne.n	80048f4 <tcp_slowtmr+0xac>
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d903      	bls.n	80048f4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80048ec:	7ffb      	ldrb	r3, [r7, #31]
 80048ee:	3301      	adds	r3, #1
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e0a2      	b.n	8004a3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048fa:	2b0b      	cmp	r3, #11
 80048fc:	d903      	bls.n	8004906 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	3301      	adds	r3, #1
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e099      	b.n	8004a3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800490c:	2b00      	cmp	r3, #0
 800490e:	d032      	beq.n	8004976 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004916:	3b01      	subs	r3, #1
 8004918:	4a6d      	ldr	r2, [pc, #436]	; (8004ad0 <tcp_slowtmr+0x288>)
 800491a:	5cd3      	ldrb	r3, [r2, r3]
 800491c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004924:	7cfa      	ldrb	r2, [r7, #19]
 8004926:	429a      	cmp	r2, r3
 8004928:	d907      	bls.n	800493a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004930:	3301      	adds	r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004940:	7cfa      	ldrb	r2, [r7, #19]
 8004942:	429a      	cmp	r2, r3
 8004944:	d879      	bhi.n	8004a3a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8004946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004948:	f003 feda 	bl	8008700 <tcp_zero_window_probe>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d173      	bne.n	8004a3a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004960:	2b06      	cmp	r3, #6
 8004962:	d86a      	bhi.n	8004a3a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800496a:	3301      	adds	r3, #1
 800496c:	b2da      	uxtb	r2, r3
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8004974:	e061      	b.n	8004a3a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800497c:	2b00      	cmp	r3, #0
 800497e:	db08      	blt.n	8004992 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004986:	b29b      	uxth	r3, r3
 8004988:	3301      	adds	r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	b21a      	sxth	r2, r3
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04f      	beq.n	8004a3a <tcp_slowtmr+0x1f2>
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80049a6:	429a      	cmp	r2, r3
 80049a8:	db47      	blt.n	8004a3a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	7d1b      	ldrb	r3, [r3, #20]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d018      	beq.n	80049e4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	bf28      	it	cs
 80049bc:	230c      	movcs	r3, #12
 80049be:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80049c6:	10db      	asrs	r3, r3, #3
 80049c8:	b21b      	sxth	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80049d2:	4413      	add	r3, r2
 80049d4:	7dfa      	ldrb	r2, [r7, #23]
 80049d6:	493f      	ldr	r1, [pc, #252]	; (8004ad4 <tcp_slowtmr+0x28c>)
 80049d8:	5c8a      	ldrb	r2, [r1, r2]
 80049da:	4093      	lsls	r3, r2
 80049dc:	b21a      	sxth	r2, r3
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	2200      	movs	r2, #0
 80049e8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bf28      	it	cs
 80049fa:	4613      	movcs	r3, r2
 80049fc:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80049fe:	8abb      	ldrh	r3, [r7, #20]
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d206      	bcs.n	8004a2a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8004a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a36:	f003 fd49 	bl	80084cc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	7d1b      	ldrb	r3, [r3, #20]
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d10f      	bne.n	8004a62 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	7e9b      	ldrb	r3, [r3, #26]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <tcp_slowtmr+0x268>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b28      	cmp	r3, #40	; 0x28
 8004a5a:	d902      	bls.n	8004a62 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8004a5c:	7ffb      	ldrb	r3, [r7, #31]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	7a1b      	ldrb	r3, [r3, #8]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d05d      	beq.n	8004b2a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d003      	beq.n	8004a7e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8004a7a:	2b07      	cmp	r3, #7
 8004a7c:	d155      	bne.n	8004b2a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <tcp_slowtmr+0x268>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8004a92:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8004a96:	4910      	ldr	r1, [pc, #64]	; (8004ad8 <tcp_slowtmr+0x290>)
 8004a98:	fba1 1303 	umull	r1, r3, r1, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d91c      	bls.n	8004adc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8004aa2:	7ffb      	ldrb	r3, [r7, #31]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8004aa8:	7fbb      	ldrb	r3, [r7, #30]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	77bb      	strb	r3, [r7, #30]
 8004aae:	e03c      	b.n	8004b2a <tcp_slowtmr+0x2e2>
 8004ab0:	20008030 	.word	0x20008030
 8004ab4:	200000ce 	.word	0x200000ce
 8004ab8:	2000802c 	.word	0x2000802c
 8004abc:	0800eb98 	.word	0x0800eb98
 8004ac0:	0800ed48 	.word	0x0800ed48
 8004ac4:	0800ebd4 	.word	0x0800ebd4
 8004ac8:	0800ed74 	.word	0x0800ed74
 8004acc:	0800eda0 	.word	0x0800eda0
 8004ad0:	080104cc 	.word	0x080104cc
 8004ad4:	080104bc 	.word	0x080104bc
 8004ad8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004adc:	4b97      	ldr	r3, [pc, #604]	; (8004d3c <tcp_slowtmr+0x4f4>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004af2:	4618      	mov	r0, r3
 8004af4:	4b92      	ldr	r3, [pc, #584]	; (8004d40 <tcp_slowtmr+0x4f8>)
 8004af6:	fb03 f300 	mul.w	r3, r3, r0
 8004afa:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8004afc:	4991      	ldr	r1, [pc, #580]	; (8004d44 <tcp_slowtmr+0x4fc>)
 8004afe:	fba1 1303 	umull	r1, r3, r1, r3
 8004b02:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d910      	bls.n	8004b2a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8004b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b0a:	f003 fdbc 	bl	8008686 <tcp_keepalive>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8004b12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004b20:	3301      	adds	r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8004b32:	4b82      	ldr	r3, [pc, #520]	; (8004d3c <tcp_slowtmr+0x4f4>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8004b42:	4619      	mov	r1, r3
 8004b44:	460b      	mov	r3, r1
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	440b      	add	r3, r1
 8004b4a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d307      	bcc.n	8004b60 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa04 	bl	8004f62 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	7d1b      	ldrb	r3, [r3, #20]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d109      	bne.n	8004b7c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b68:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <tcp_slowtmr+0x4f4>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b28      	cmp	r3, #40	; 0x28
 8004b74:	d902      	bls.n	8004b7c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	7d1b      	ldrb	r3, [r3, #20]
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	d109      	bne.n	8004b98 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004b84:	4b6d      	ldr	r3, [pc, #436]	; (8004d3c <tcp_slowtmr+0x4f4>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2bf0      	cmp	r3, #240	; 0xf0
 8004b90:	d902      	bls.n	8004b98 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
 8004b94:	3301      	adds	r3, #1
 8004b96:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8004b98:	7ffb      	ldrb	r3, [r7, #31]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d05d      	beq.n	8004c5a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8004ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ba8:	f000 fb84 	bl	80052b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8004bb2:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <tcp_slowtmr+0x500>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d106      	bne.n	8004bca <tcp_slowtmr+0x382>
 8004bbc:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <tcp_slowtmr+0x504>)
 8004bbe:	f240 4289 	movw	r2, #1161	; 0x489
 8004bc2:	4963      	ldr	r1, [pc, #396]	; (8004d50 <tcp_slowtmr+0x508>)
 8004bc4:	4863      	ldr	r0, [pc, #396]	; (8004d54 <tcp_slowtmr+0x50c>)
 8004bc6:	f008 fc07 	bl	800d3d8 <iprintf>
        prev->next = pcb->next;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	e00f      	b.n	8004bf4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8004bd4:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <tcp_slowtmr+0x500>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d006      	beq.n	8004bec <tcp_slowtmr+0x3a4>
 8004bde:	4b5b      	ldr	r3, [pc, #364]	; (8004d4c <tcp_slowtmr+0x504>)
 8004be0:	f240 428d 	movw	r2, #1165	; 0x48d
 8004be4:	495c      	ldr	r1, [pc, #368]	; (8004d58 <tcp_slowtmr+0x510>)
 8004be6:	485b      	ldr	r0, [pc, #364]	; (8004d54 <tcp_slowtmr+0x50c>)
 8004be8:	f008 fbf6 	bl	800d3d8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a55      	ldr	r2, [pc, #340]	; (8004d48 <tcp_slowtmr+0x500>)
 8004bf2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8004bf4:	7fbb      	ldrb	r3, [r7, #30]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d010      	beq.n	8004c1c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c02:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	1d1d      	adds	r5, r3, #4
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	8adb      	ldrh	r3, [r3, #22]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0e:	8b12      	ldrh	r2, [r2, #24]
 8004c10:	9201      	str	r2, [sp, #4]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	462b      	mov	r3, r5
 8004c16:	4622      	mov	r2, r4
 8004c18:	f003 fbe2 	bl	80083e0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	7d1b      	ldrb	r3, [r3, #20]
 8004c26:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	2001      	movs	r0, #1
 8004c36:	f7fe fb4d 	bl	80032d4 <memp_free>

      tcp_active_pcbs_changed = 0;
 8004c3a:	4b48      	ldr	r3, [pc, #288]	; (8004d5c <tcp_slowtmr+0x514>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <tcp_slowtmr+0x408>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f06f 010c 	mvn.w	r1, #12
 8004c4c:	68b8      	ldr	r0, [r7, #8]
 8004c4e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8004c50:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <tcp_slowtmr+0x514>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d035      	beq.n	8004cc4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8004c58:	e606      	b.n	8004868 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	7edb      	ldrb	r3, [r3, #27]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	7eda      	ldrb	r2, [r3, #27]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	7f1b      	ldrb	r3, [r3, #28]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d323      	bcc.n	8004cc4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8004c82:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <tcp_slowtmr+0x514>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <tcp_slowtmr+0x460>
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	6912      	ldr	r2, [r2, #16]
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4798      	blx	r3
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	777b      	strb	r3, [r7, #29]
 8004ca6:	e001      	b.n	8004cac <tcp_slowtmr+0x464>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <tcp_slowtmr+0x514>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d000      	beq.n	8004cb6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8004cb4:	e5d8      	b.n	8004868 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8004cb6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8004cbe:	6a38      	ldr	r0, [r7, #32]
 8004cc0:	f003 f904 	bl	8007ecc <tcp_output>
  while (pcb != NULL) {
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f47f add4 	bne.w	8004874 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <tcp_slowtmr+0x518>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8004cd6:	e068      	b.n	8004daa <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	7d1b      	ldrb	r3, [r3, #20]
 8004cdc:	2b0a      	cmp	r3, #10
 8004cde:	d006      	beq.n	8004cee <tcp_slowtmr+0x4a6>
 8004ce0:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <tcp_slowtmr+0x504>)
 8004ce2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8004ce6:	491f      	ldr	r1, [pc, #124]	; (8004d64 <tcp_slowtmr+0x51c>)
 8004ce8:	481a      	ldr	r0, [pc, #104]	; (8004d54 <tcp_slowtmr+0x50c>)
 8004cea:	f008 fb75 	bl	800d3d8 <iprintf>
    pcb_remove = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <tcp_slowtmr+0x4f4>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2bf0      	cmp	r3, #240	; 0xf0
 8004cfe:	d902      	bls.n	8004d06 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	3301      	adds	r3, #1
 8004d04:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d049      	beq.n	8004da0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8004d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d0e:	f000 fad1 	bl	80052b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d029      	beq.n	8004d6c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <tcp_slowtmr+0x518>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d106      	bne.n	8004d30 <tcp_slowtmr+0x4e8>
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <tcp_slowtmr+0x504>)
 8004d24:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004d28:	490f      	ldr	r1, [pc, #60]	; (8004d68 <tcp_slowtmr+0x520>)
 8004d2a:	480a      	ldr	r0, [pc, #40]	; (8004d54 <tcp_slowtmr+0x50c>)
 8004d2c:	f008 fb54 	bl	800d3d8 <iprintf>
        prev->next = pcb->next;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e028      	b.n	8004d8c <tcp_slowtmr+0x544>
 8004d3a:	bf00      	nop
 8004d3c:	20008030 	.word	0x20008030
 8004d40:	000124f8 	.word	0x000124f8
 8004d44:	10624dd3 	.word	0x10624dd3
 8004d48:	2000802c 	.word	0x2000802c
 8004d4c:	0800eb98 	.word	0x0800eb98
 8004d50:	0800edd0 	.word	0x0800edd0
 8004d54:	0800ebd4 	.word	0x0800ebd4
 8004d58:	0800edfc 	.word	0x0800edfc
 8004d5c:	20008028 	.word	0x20008028
 8004d60:	2000803c 	.word	0x2000803c
 8004d64:	0800ee28 	.word	0x0800ee28
 8004d68:	0800ee58 	.word	0x0800ee58
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <tcp_slowtmr+0x570>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d006      	beq.n	8004d84 <tcp_slowtmr+0x53c>
 8004d76:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <tcp_slowtmr+0x574>)
 8004d78:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8004d7c:	4910      	ldr	r1, [pc, #64]	; (8004dc0 <tcp_slowtmr+0x578>)
 8004d7e:	4811      	ldr	r0, [pc, #68]	; (8004dc4 <tcp_slowtmr+0x57c>)
 8004d80:	f008 fb2a 	bl	800d3d8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <tcp_slowtmr+0x570>)
 8004d8a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	2001      	movs	r0, #1
 8004d9a:	f7fe fa9b 	bl	80032d4 <memp_free>
 8004d9e:	e004      	b.n	8004daa <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d193      	bne.n	8004cd8 <tcp_slowtmr+0x490>
    }
  }
}
 8004db0:	bf00      	nop
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bdb0      	pop	{r4, r5, r7, pc}
 8004db8:	2000803c 	.word	0x2000803c
 8004dbc:	0800eb98 	.word	0x0800eb98
 8004dc0:	0800ee80 	.word	0x0800ee80
 8004dc4:	0800ebd4 	.word	0x0800ebd4

08004dc8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8004dce:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <tcp_fasttmr+0xbc>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <tcp_fasttmr+0xbc>)
 8004dd8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <tcp_fasttmr+0xc0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8004de0:	e048      	b.n	8004e74 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7f5a      	ldrb	r2, [r3, #29]
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <tcp_fasttmr+0xbc>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d03f      	beq.n	8004e6e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <tcp_fasttmr+0xbc>)
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7e9b      	ldrb	r3, [r3, #26]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7e9b      	ldrb	r3, [r3, #26]
 8004e06:	f043 0302 	orr.w	r3, r3, #2
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f003 f85b 	bl	8007ecc <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7e9b      	ldrb	r3, [r3, #26]
 8004e1a:	f023 0303 	bic.w	r3, r3, #3
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7e9b      	ldrb	r3, [r3, #26]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7e9b      	ldrb	r3, [r3, #26]
 8004e34:	f023 0308 	bic.w	r3, r3, #8
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fb1e 	bl	8004480 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <tcp_fasttmr+0xc4>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f819 	bl	8004e90 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <tcp_fasttmr+0xc4>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d000      	beq.n	8004e68 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8004e66:	e7b8      	b.n	8004dda <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	e002      	b.n	8004e74 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1b3      	bne.n	8004de2 <tcp_fasttmr+0x1a>
    }
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200000ce 	.word	0x200000ce
 8004e88:	2000802c 	.word	0x2000802c
 8004e8c:	20008028 	.word	0x20008028

08004e90 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9c:	7b5b      	ldrb	r3, [r3, #13]
 8004e9e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <tcp_process_refused_data+0x3e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6918      	ldr	r0, [r3, #16]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	47a0      	blx	r4
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]
 8004ecc:	e007      	b.n	8004ede <tcp_process_refused_data+0x4e>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f000 f88c 	bl	8004ff2 <tcp_recv_null>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d12a      	bne.n	8004f3c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8004ee6:	7bbb      	ldrb	r3, [r7, #14]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d033      	beq.n	8004f58 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8004ef8:	d005      	beq.n	8004f06 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	3301      	adds	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <tcp_process_refused_data+0x98>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6918      	ldr	r0, [r3, #16]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	47a0      	blx	r4
 8004f22:	4603      	mov	r3, r0
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	e001      	b.n	8004f2c <tcp_process_refused_data+0x9c>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8004f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f30:	f113 0f0d 	cmn.w	r3, #13
 8004f34:	d110      	bne.n	8004f58 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8004f36:	f06f 030c 	mvn.w	r3, #12
 8004f3a:	e00e      	b.n	8004f5a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8004f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f40:	f113 0f0d 	cmn.w	r3, #13
 8004f44:	d102      	bne.n	8004f4c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8004f46:	f06f 030c 	mvn.w	r3, #12
 8004f4a:	e006      	b.n	8004f5a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8004f52:	f06f 0304 	mvn.w	r3, #4
 8004f56:	e000      	b.n	8004f5a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd90      	pop	{r4, r7, pc}

08004f62 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8004f6a:	e007      	b.n	8004f7c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f809 	bl	8004f8a <tcp_seg_free>
    seg = next;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f4      	bne.n	8004f6c <tcp_segs_free+0xa>
  }
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe fe9d 	bl	8003ce4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	2003      	movs	r0, #3
 8004fae:	f7fe f991 	bl	80032d4 <memp_free>
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8004fc2:	2003      	movs	r0, #3
 8004fc4:	f7fe f93a 	bl	800323c <memp_malloc>
 8004fc8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <tcp_seg_copy+0x1a>
    return NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e00a      	b.n	8004fea <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8004fd4:	2210      	movs	r2, #16
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f008 f9ea 	bl	800d3b2 <memcpy>
  pbuf_ref(cseg->p);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe ff28 	bl	8003e38 <pbuf_ref>
  return cseg;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	891b      	ldrh	r3, [r3, #8]
 800500a:	4619      	mov	r1, r3
 800500c:	68b8      	ldr	r0, [r7, #8]
 800500e:	f7ff fbc1 	bl	8004794 <tcp_recved>
    pbuf_free(p);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fe fe66 	bl	8003ce4 <pbuf_free>
 8005018:	e008      	b.n	800502c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800501a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8005022:	68b8      	ldr	r0, [r7, #8]
 8005024:	f7ff fa92 	bl	800454c <tcp_close>
 8005028:	4603      	mov	r3, r0
 800502a:	e000      	b.n	800502e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	2b00      	cmp	r3, #0
 8005048:	db01      	blt.n	800504e <tcp_kill_prio+0x16>
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	e000      	b.n	8005050 <tcp_kill_prio+0x18>
 800504e:	237f      	movs	r3, #127	; 0x7f
 8005050:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800505a:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <tcp_kill_prio+0x7c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	e01a      	b.n	8005098 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	7d5b      	ldrb	r3, [r3, #21]
 8005066:	7afa      	ldrb	r2, [r7, #11]
 8005068:	429a      	cmp	r2, r3
 800506a:	d312      	bcc.n	8005092 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800506c:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <tcp_kill_prio+0x80>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d80a      	bhi.n	8005092 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <tcp_kill_prio+0x80>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	7d5b      	ldrb	r3, [r3, #21]
 8005090:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e1      	bne.n	8005062 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80050a4:	6938      	ldr	r0, [r7, #16]
 80050a6:	f7ff fb1b 	bl	80046e0 <tcp_abort>
  }
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	2000802c 	.word	0x2000802c
 80050b8:	20008030 	.word	0x20008030

080050bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d009      	beq.n	80050e0 <tcp_kill_state+0x24>
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	2b09      	cmp	r3, #9
 80050d0:	d006      	beq.n	80050e0 <tcp_kill_state+0x24>
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <tcp_kill_state+0x80>)
 80050d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80050d8:	4919      	ldr	r1, [pc, #100]	; (8005140 <tcp_kill_state+0x84>)
 80050da:	481a      	ldr	r0, [pc, #104]	; (8005144 <tcp_kill_state+0x88>)
 80050dc:	f008 f97c 	bl	800d3d8 <iprintf>

  inactivity = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <tcp_kill_state+0x8c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e017      	b.n	8005120 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	7d1b      	ldrb	r3, [r3, #20]
 80050f4:	79fa      	ldrb	r2, [r7, #7]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d10f      	bne.n	800511a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <tcp_kill_state+0x90>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	429a      	cmp	r2, r3
 8005108:	d807      	bhi.n	800511a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <tcp_kill_state+0x90>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e4      	bne.n	80050f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800512c:	2100      	movs	r1, #0
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f7ff fa24 	bl	800457c <tcp_abandon>
  }
}
 8005134:	bf00      	nop
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	0800eb98 	.word	0x0800eb98
 8005140:	0800eea8 	.word	0x0800eea8
 8005144:	0800ebd4 	.word	0x0800ebd4
 8005148:	2000802c 	.word	0x2000802c
 800514c:	20008030 	.word	0x20008030

08005150 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <tcp_kill_timewait+0x58>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e012      	b.n	800518c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005166:	4b11      	ldr	r3, [pc, #68]	; (80051ac <tcp_kill_timewait+0x5c>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	429a      	cmp	r2, r3
 8005174:	d807      	bhi.n	8005186 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8005176:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <tcp_kill_timewait+0x5c>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e9      	bne.n	8005166 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005198:	68b8      	ldr	r0, [r7, #8]
 800519a:	f7ff faa1 	bl	80046e0 <tcp_abort>
  }
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	2000803c 	.word	0x2000803c
 80051ac:	20008030 	.word	0x20008030

080051b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80051ba:	2001      	movs	r0, #1
 80051bc:	f7fe f83e 	bl	800323c <memp_malloc>
 80051c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d124      	bne.n	8005212 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80051c8:	f7ff ffc2 	bl	8005150 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80051cc:	2001      	movs	r0, #1
 80051ce:	f7fe f835 	bl	800323c <memp_malloc>
 80051d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11b      	bne.n	8005212 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80051da:	2009      	movs	r0, #9
 80051dc:	f7ff ff6e 	bl	80050bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80051e0:	2001      	movs	r0, #1
 80051e2:	f7fe f82b 	bl	800323c <memp_malloc>
 80051e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d111      	bne.n	8005212 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80051ee:	2008      	movs	r0, #8
 80051f0:	f7ff ff64 	bl	80050bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80051f4:	2001      	movs	r0, #1
 80051f6:	f7fe f821 	bl	800323c <memp_malloc>
 80051fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff17 	bl	8005038 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800520a:	2001      	movs	r0, #1
 800520c:	f7fe f816 	bl	800323c <memp_malloc>
 8005210:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d03f      	beq.n	8005298 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8005218:	2298      	movs	r2, #152	; 0x98
 800521a:	2100      	movs	r1, #0
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f008 f8d3 	bl	800d3c8 <memset>
    pcb->prio = prio;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	79fa      	ldrb	r2, [r7, #7]
 8005226:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800522e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800524e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2206      	movs	r2, #6
 8005254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2206      	movs	r2, #6
 800525c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005264:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <tcp_alloc+0xf4>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <tcp_alloc+0xf8>)
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005284:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <tcp_alloc+0xfc>)
 800528c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <tcp_alloc+0x100>)
 8005294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8005298:	68fb      	ldr	r3, [r7, #12]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20008030 	.word	0x20008030
 80052a8:	200000ce 	.word	0x200000ce
 80052ac:	08004ff3 	.word	0x08004ff3
 80052b0:	006ddd00 	.word	0x006ddd00

080052b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7d1b      	ldrb	r3, [r3, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d034      	beq.n	800532e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80052c8:	2b0a      	cmp	r3, #10
 80052ca:	d030      	beq.n	800532e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d02c      	beq.n	800532e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe fcff 	bl	8003ce4 <pbuf_free>
      pcb->refused_data = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fe36 	bl	8004f62 <tcp_segs_free>
    pcb->ooseq = NULL;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005302:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fe2a 	bl	8004f62 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fe25 	bl	8004f62 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	669a      	str	r2, [r3, #104]	; 0x68
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d105      	bne.n	8005358 <tcp_pcb_remove+0x20>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e013      	b.n	8005380 <tcp_pcb_remove+0x48>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e00c      	b.n	800537a <tcp_pcb_remove+0x42>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d104      	bne.n	8005374 <tcp_pcb_remove+0x3c>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	e005      	b.n	8005380 <tcp_pcb_remove+0x48>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ef      	bne.n	8005360 <tcp_pcb_remove+0x28>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8005386:	6838      	ldr	r0, [r7, #0]
 8005388:	f7ff ff94 	bl	80052b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	7d1b      	ldrb	r3, [r3, #20]
 8005390:	2b0a      	cmp	r3, #10
 8005392:	d013      	beq.n	80053bc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8005398:	2b01      	cmp	r3, #1
 800539a:	d00f      	beq.n	80053bc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	7e9b      	ldrb	r3, [r3, #26]
 80053a0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	7e9b      	ldrb	r3, [r3, #26]
 80053ac:	f043 0302 	orr.w	r3, r3, #2
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80053b6:	6838      	ldr	r0, [r7, #0]
 80053b8:	f002 fd88 	bl	8007ecc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	7d1b      	ldrb	r3, [r3, #20]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d020      	beq.n	8005406 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d006      	beq.n	80053da <tcp_pcb_remove+0xa2>
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <tcp_pcb_remove+0xe4>)
 80053ce:	f240 7253 	movw	r2, #1875	; 0x753
 80053d2:	4913      	ldr	r1, [pc, #76]	; (8005420 <tcp_pcb_remove+0xe8>)
 80053d4:	4813      	ldr	r0, [pc, #76]	; (8005424 <tcp_pcb_remove+0xec>)
 80053d6:	f007 ffff 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <tcp_pcb_remove+0xb8>
 80053e2:	4b0e      	ldr	r3, [pc, #56]	; (800541c <tcp_pcb_remove+0xe4>)
 80053e4:	f240 7254 	movw	r2, #1876	; 0x754
 80053e8:	490f      	ldr	r1, [pc, #60]	; (8005428 <tcp_pcb_remove+0xf0>)
 80053ea:	480e      	ldr	r0, [pc, #56]	; (8005424 <tcp_pcb_remove+0xec>)
 80053ec:	f007 fff4 	bl	800d3d8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <tcp_pcb_remove+0xce>
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <tcp_pcb_remove+0xe4>)
 80053fa:	f240 7256 	movw	r2, #1878	; 0x756
 80053fe:	490b      	ldr	r1, [pc, #44]	; (800542c <tcp_pcb_remove+0xf4>)
 8005400:	4808      	ldr	r0, [pc, #32]	; (8005424 <tcp_pcb_remove+0xec>)
 8005402:	f007 ffe9 	bl	800d3d8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2200      	movs	r2, #0
 800540a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	0800eb98 	.word	0x0800eb98
 8005420:	0800ef50 	.word	0x0800ef50
 8005424:	0800ebd4 	.word	0x0800ebd4
 8005428:	0800ef68 	.word	0x0800ef68
 800542c:	0800ef84 	.word	0x0800ef84

08005430 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <tcp_next_iss+0x24>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <tcp_next_iss+0x28>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4413      	add	r3, r2
 8005442:	4a04      	ldr	r2, [pc, #16]	; (8005454 <tcp_next_iss+0x24>)
 8005444:	6013      	str	r3, [r2, #0]
  return iss;
 8005446:	4b03      	ldr	r3, [pc, #12]	; (8005454 <tcp_next_iss+0x24>)
 8005448:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	2000000c 	.word	0x2000000c
 8005458:	20008030 	.word	0x20008030

0800545c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	f006 fdef 	bl	800c04c <ip4_route>
 800546e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	e010      	b.n	800549c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800547e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005480:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8005488:	897b      	ldrh	r3, [r7, #10]
 800548a:	3b28      	subs	r3, #40	; 0x28
 800548c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800548e:	893a      	ldrh	r2, [r7, #8]
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	4293      	cmp	r3, r2
 8005494:	bf28      	it	cs
 8005496:	4613      	movcs	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800549a:	88fb      	ldrh	r3, [r7, #6]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80054b2:	e011      	b.n	80054d8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d108      	bne.n	80054d2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff f90a 	bl	80046e0 <tcp_abort>
      pcb = next;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e002      	b.n	80054d8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1ea      	bne.n	80054b4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02c      	beq.n	8005552 <tcp_netif_ip_addr_changed+0x6a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d028      	beq.n	8005552 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005500:	4b16      	ldr	r3, [pc, #88]	; (800555c <tcp_netif_ip_addr_changed+0x74>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff ffcc 	bl	80054a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <tcp_netif_ip_addr_changed+0x78>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ffc6 	bl	80054a4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <tcp_netif_ip_addr_changed+0x6a>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d015      	beq.n	8005552 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005526:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <tcp_netif_ip_addr_changed+0x7c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e00e      	b.n	800554c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d103      	bne.n	8005548 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1ed      	bne.n	800552e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	2000802c 	.word	0x2000802c
 8005560:	20008038 	.word	0x20008038
 8005564:	20008034 	.word	0x20008034

08005568 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b08b      	sub	sp, #44	; 0x2c
 800556c:	af02      	add	r7, sp, #8
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4a82      	ldr	r2, [pc, #520]	; (8005780 <tcp_input+0x218>)
 8005578:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	895b      	ldrh	r3, [r3, #10]
 800557e:	2b13      	cmp	r3, #19
 8005580:	f240 838a 	bls.w	8005c98 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005584:	4b7f      	ldr	r3, [pc, #508]	; (8005784 <tcp_input+0x21c>)
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	4b7e      	ldr	r3, [pc, #504]	; (8005784 <tcp_input+0x21c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f006 fff4 	bl	800c57c <ip4_addr_isbroadcast_u32>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	f040 8380 	bne.w	8005c9c <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800559c:	4b79      	ldr	r3, [pc, #484]	; (8005784 <tcp_input+0x21c>)
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80055a4:	2be0      	cmp	r3, #224	; 0xe0
 80055a6:	f000 8379 	beq.w	8005c9c <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80055aa:	4b75      	ldr	r3, [pc, #468]	; (8005780 <tcp_input+0x218>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	899b      	ldrh	r3, [r3, #12]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fd fa99 	bl	8002aea <lwip_htons>
 80055b8:	4603      	mov	r3, r0
 80055ba:	0b1b      	lsrs	r3, r3, #12
 80055bc:	b29b      	uxth	r3, r3
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80055c4:	7cbb      	ldrb	r3, [r7, #18]
 80055c6:	2b13      	cmp	r3, #19
 80055c8:	f240 8368 	bls.w	8005c9c <tcp_input+0x734>
 80055cc:	7cbb      	ldrb	r3, [r7, #18]
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	891b      	ldrh	r3, [r3, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	f200 8361 	bhi.w	8005c9c <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80055da:	7cbb      	ldrb	r3, [r7, #18]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b14      	subs	r3, #20
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	4b69      	ldr	r3, [pc, #420]	; (8005788 <tcp_input+0x220>)
 80055e4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80055e6:	4b69      	ldr	r3, [pc, #420]	; (800578c <tcp_input+0x224>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	895a      	ldrh	r2, [r3, #10]
 80055f0:	7cbb      	ldrb	r3, [r7, #18]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d30d      	bcc.n	8005614 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80055f8:	4b63      	ldr	r3, [pc, #396]	; (8005788 <tcp_input+0x220>)
 80055fa:	881a      	ldrh	r2, [r3, #0]
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <tcp_input+0x228>)
 80055fe:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005600:	7cbb      	ldrb	r3, [r7, #18]
 8005602:	b29b      	uxth	r3, r3
 8005604:	425b      	negs	r3, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	b21b      	sxth	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fe fb45 	bl	8003c9c <pbuf_header>
 8005612:	e055      	b.n	80056c0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <tcp_input+0xc0>
 800561c:	4b5d      	ldr	r3, [pc, #372]	; (8005794 <tcp_input+0x22c>)
 800561e:	22b2      	movs	r2, #178	; 0xb2
 8005620:	495d      	ldr	r1, [pc, #372]	; (8005798 <tcp_input+0x230>)
 8005622:	485e      	ldr	r0, [pc, #376]	; (800579c <tcp_input+0x234>)
 8005624:	f007 fed8 	bl	800d3d8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8005628:	f06f 0113 	mvn.w	r1, #19
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fe fb35 	bl	8003c9c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	895a      	ldrh	r2, [r3, #10]
 8005636:	4b56      	ldr	r3, [pc, #344]	; (8005790 <tcp_input+0x228>)
 8005638:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800563a:	4b53      	ldr	r3, [pc, #332]	; (8005788 <tcp_input+0x220>)
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	4b54      	ldr	r3, [pc, #336]	; (8005790 <tcp_input+0x228>)
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8005646:	4b52      	ldr	r3, [pc, #328]	; (8005790 <tcp_input+0x228>)
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	425b      	negs	r3, r3
 800564c:	b29b      	uxth	r3, r3
 800564e:	b21b      	sxth	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fe fb22 	bl	8003c9c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	895b      	ldrh	r3, [r3, #10]
 800565e:	8a3a      	ldrh	r2, [r7, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	f200 831d 	bhi.w	8005ca0 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a47      	ldr	r2, [pc, #284]	; (800578c <tcp_input+0x224>)
 800566e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	8a3b      	ldrh	r3, [r7, #16]
 8005676:	425b      	negs	r3, r3
 8005678:	b29b      	uxth	r3, r3
 800567a:	b21b      	sxth	r3, r3
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7fe fb0c 	bl	8003c9c <pbuf_header>
    p->tot_len -= opt2len;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	891a      	ldrh	r2, [r3, #8]
 8005688:	8a3b      	ldrh	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	895b      	ldrh	r3, [r3, #10]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <tcp_input+0x13e>
 800569a:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <tcp_input+0x22c>)
 800569c:	22cf      	movs	r2, #207	; 0xcf
 800569e:	4940      	ldr	r1, [pc, #256]	; (80057a0 <tcp_input+0x238>)
 80056a0:	483e      	ldr	r0, [pc, #248]	; (800579c <tcp_input+0x234>)
 80056a2:	f007 fe99 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	891a      	ldrh	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	891b      	ldrh	r3, [r3, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d005      	beq.n	80056c0 <tcp_input+0x158>
 80056b4:	4b37      	ldr	r3, [pc, #220]	; (8005794 <tcp_input+0x22c>)
 80056b6:	22d0      	movs	r2, #208	; 0xd0
 80056b8:	493a      	ldr	r1, [pc, #232]	; (80057a4 <tcp_input+0x23c>)
 80056ba:	4838      	ldr	r0, [pc, #224]	; (800579c <tcp_input+0x234>)
 80056bc:	f007 fe8c 	bl	800d3d8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80056c0:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <tcp_input+0x218>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	4b2d      	ldr	r3, [pc, #180]	; (8005780 <tcp_input+0x218>)
 80056ca:	681c      	ldr	r4, [r3, #0]
 80056cc:	4610      	mov	r0, r2
 80056ce:	f7fd fa0c 	bl	8002aea <lwip_htons>
 80056d2:	4603      	mov	r3, r0
 80056d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80056d6:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <tcp_input+0x218>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	885b      	ldrh	r3, [r3, #2]
 80056dc:	b29a      	uxth	r2, r3
 80056de:	4b28      	ldr	r3, [pc, #160]	; (8005780 <tcp_input+0x218>)
 80056e0:	681c      	ldr	r4, [r3, #0]
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fd fa01 	bl	8002aea <lwip_htons>
 80056e8:	4603      	mov	r3, r0
 80056ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80056ec:	4b24      	ldr	r3, [pc, #144]	; (8005780 <tcp_input+0x218>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	4b23      	ldr	r3, [pc, #140]	; (8005780 <tcp_input+0x218>)
 80056f4:	681c      	ldr	r4, [r3, #0]
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7fd fa04 	bl	8002b04 <lwip_htonl>
 80056fc:	4603      	mov	r3, r0
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <tcp_input+0x240>)
 8005704:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005706:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <tcp_input+0x218>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <tcp_input+0x218>)
 800570e:	681c      	ldr	r4, [r3, #0]
 8005710:	4610      	mov	r0, r2
 8005712:	f7fd f9f7 	bl	8002b04 <lwip_htonl>
 8005716:	4603      	mov	r3, r0
 8005718:	60a3      	str	r3, [r4, #8]
 800571a:	68a3      	ldr	r3, [r4, #8]
 800571c:	4a23      	ldr	r2, [pc, #140]	; (80057ac <tcp_input+0x244>)
 800571e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <tcp_input+0x218>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	89db      	ldrh	r3, [r3, #14]
 8005726:	b29a      	uxth	r2, r3
 8005728:	4b15      	ldr	r3, [pc, #84]	; (8005780 <tcp_input+0x218>)
 800572a:	681c      	ldr	r4, [r3, #0]
 800572c:	4610      	mov	r0, r2
 800572e:	f7fd f9dc 	bl	8002aea <lwip_htons>
 8005732:	4603      	mov	r3, r0
 8005734:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <tcp_input+0x218>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	899b      	ldrh	r3, [r3, #12]
 800573c:	b29b      	uxth	r3, r3
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd f9d3 	bl	8002aea <lwip_htons>
 8005744:	4603      	mov	r3, r0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <tcp_input+0x248>)
 8005750:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	891a      	ldrh	r2, [r3, #8]
 8005756:	4b16      	ldr	r3, [pc, #88]	; (80057b0 <tcp_input+0x248>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	b29b      	uxth	r3, r3
 800576a:	4413      	add	r3, r2
 800576c:	b29a      	uxth	r2, r3
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <tcp_input+0x24c>)
 8005770:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <tcp_input+0x250>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	e082      	b.n	8005884 <tcp_input+0x31c>
 800577e:	bf00      	nop
 8005780:	200000e0 	.word	0x200000e0
 8005784:	20004adc 	.word	0x20004adc
 8005788:	200000e4 	.word	0x200000e4
 800578c:	200000e8 	.word	0x200000e8
 8005790:	200000e6 	.word	0x200000e6
 8005794:	0800ef9c 	.word	0x0800ef9c
 8005798:	0800efd0 	.word	0x0800efd0
 800579c:	0800efe0 	.word	0x0800efe0
 80057a0:	0800f008 	.word	0x0800f008
 80057a4:	0800f014 	.word	0x0800f014
 80057a8:	200000f0 	.word	0x200000f0
 80057ac:	200000f4 	.word	0x200000f4
 80057b0:	200000fc 	.word	0x200000fc
 80057b4:	200000fa 	.word	0x200000fa
 80057b8:	2000802c 	.word	0x2000802c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	7d1b      	ldrb	r3, [r3, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <tcp_input+0x268>
 80057c4:	4b8f      	ldr	r3, [pc, #572]	; (8005a04 <tcp_input+0x49c>)
 80057c6:	22e2      	movs	r2, #226	; 0xe2
 80057c8:	498f      	ldr	r1, [pc, #572]	; (8005a08 <tcp_input+0x4a0>)
 80057ca:	4890      	ldr	r0, [pc, #576]	; (8005a0c <tcp_input+0x4a4>)
 80057cc:	f007 fe04 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	7d1b      	ldrb	r3, [r3, #20]
 80057d4:	2b0a      	cmp	r3, #10
 80057d6:	d105      	bne.n	80057e4 <tcp_input+0x27c>
 80057d8:	4b8a      	ldr	r3, [pc, #552]	; (8005a04 <tcp_input+0x49c>)
 80057da:	22e3      	movs	r2, #227	; 0xe3
 80057dc:	498c      	ldr	r1, [pc, #560]	; (8005a10 <tcp_input+0x4a8>)
 80057de:	488b      	ldr	r0, [pc, #556]	; (8005a0c <tcp_input+0x4a4>)
 80057e0:	f007 fdfa 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	7d1b      	ldrb	r3, [r3, #20]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <tcp_input+0x290>
 80057ec:	4b85      	ldr	r3, [pc, #532]	; (8005a04 <tcp_input+0x49c>)
 80057ee:	22e4      	movs	r2, #228	; 0xe4
 80057f0:	4988      	ldr	r1, [pc, #544]	; (8005a14 <tcp_input+0x4ac>)
 80057f2:	4886      	ldr	r0, [pc, #536]	; (8005a0c <tcp_input+0x4a4>)
 80057f4:	f007 fdf0 	bl	800d3d8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	8b1a      	ldrh	r2, [r3, #24]
 80057fc:	4b86      	ldr	r3, [pc, #536]	; (8005a18 <tcp_input+0x4b0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	429a      	cmp	r2, r3
 8005806:	d138      	bne.n	800587a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	8ada      	ldrh	r2, [r3, #22]
 800580c:	4b82      	ldr	r3, [pc, #520]	; (8005a18 <tcp_input+0x4b0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	885b      	ldrh	r3, [r3, #2]
 8005812:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8005814:	429a      	cmp	r2, r3
 8005816:	d130      	bne.n	800587a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	4b7f      	ldr	r3, [pc, #508]	; (8005a1c <tcp_input+0x4b4>)
 800581e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8005820:	429a      	cmp	r2, r3
 8005822:	d12a      	bne.n	800587a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b7c      	ldr	r3, [pc, #496]	; (8005a1c <tcp_input+0x4b4>)
 800582a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800582c:	429a      	cmp	r2, r3
 800582e:	d124      	bne.n	800587a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	429a      	cmp	r2, r3
 8005838:	d105      	bne.n	8005846 <tcp_input+0x2de>
 800583a:	4b72      	ldr	r3, [pc, #456]	; (8005a04 <tcp_input+0x49c>)
 800583c:	22ec      	movs	r2, #236	; 0xec
 800583e:	4978      	ldr	r1, [pc, #480]	; (8005a20 <tcp_input+0x4b8>)
 8005840:	4872      	ldr	r0, [pc, #456]	; (8005a0c <tcp_input+0x4a4>)
 8005842:	f007 fdc9 	bl	800d3d8 <iprintf>
      if (prev != NULL) {
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8005854:	4b73      	ldr	r3, [pc, #460]	; (8005a24 <tcp_input+0x4bc>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800585c:	4a71      	ldr	r2, [pc, #452]	; (8005a24 <tcp_input+0x4bc>)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	429a      	cmp	r2, r3
 800586a:	d10f      	bne.n	800588c <tcp_input+0x324>
 800586c:	4b65      	ldr	r3, [pc, #404]	; (8005a04 <tcp_input+0x49c>)
 800586e:	22f4      	movs	r2, #244	; 0xf4
 8005870:	496d      	ldr	r1, [pc, #436]	; (8005a28 <tcp_input+0x4c0>)
 8005872:	4866      	ldr	r0, [pc, #408]	; (8005a0c <tcp_input+0x4a4>)
 8005874:	f007 fdb0 	bl	800d3d8 <iprintf>
      break;
 8005878:	e008      	b.n	800588c <tcp_input+0x324>
    }
    prev = pcb;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d198      	bne.n	80057bc <tcp_input+0x254>
 800588a:	e000      	b.n	800588e <tcp_input+0x326>
      break;
 800588c:	bf00      	nop
  }

  if (pcb == NULL) {
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d173      	bne.n	800597c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005894:	4b65      	ldr	r3, [pc, #404]	; (8005a2c <tcp_input+0x4c4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	e02f      	b.n	80058fc <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	7d1b      	ldrb	r3, [r3, #20]
 80058a0:	2b0a      	cmp	r3, #10
 80058a2:	d005      	beq.n	80058b0 <tcp_input+0x348>
 80058a4:	4b57      	ldr	r3, [pc, #348]	; (8005a04 <tcp_input+0x49c>)
 80058a6:	22fe      	movs	r2, #254	; 0xfe
 80058a8:	4961      	ldr	r1, [pc, #388]	; (8005a30 <tcp_input+0x4c8>)
 80058aa:	4858      	ldr	r0, [pc, #352]	; (8005a0c <tcp_input+0x4a4>)
 80058ac:	f007 fd94 	bl	800d3d8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	8b1a      	ldrh	r2, [r3, #24]
 80058b4:	4b58      	ldr	r3, [pc, #352]	; (8005a18 <tcp_input+0x4b0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	429a      	cmp	r2, r3
 80058be:	d11a      	bne.n	80058f6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	8ada      	ldrh	r2, [r3, #22]
 80058c4:	4b54      	ldr	r3, [pc, #336]	; (8005a18 <tcp_input+0x4b0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	885b      	ldrh	r3, [r3, #2]
 80058ca:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d112      	bne.n	80058f6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4b51      	ldr	r3, [pc, #324]	; (8005a1c <tcp_input+0x4b4>)
 80058d6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80058d8:	429a      	cmp	r2, r3
 80058da:	d10c      	bne.n	80058f6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b4e      	ldr	r3, [pc, #312]	; (8005a1c <tcp_input+0x4b4>)
 80058e2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d106      	bne.n	80058f6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80058e8:	69f8      	ldr	r0, [r7, #28]
 80058ea:	f000 fb15 	bl	8005f18 <tcp_timewait_input>
        pbuf_free(p);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fe f9f8 	bl	8003ce4 <pbuf_free>
        return;
 80058f4:	e1da      	b.n	8005cac <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1cc      	bne.n	800589c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005906:	4b4b      	ldr	r3, [pc, #300]	; (8005a34 <tcp_input+0x4cc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e019      	b.n	8005942 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	8ada      	ldrh	r2, [r3, #22]
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <tcp_input+0x4b0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	885b      	ldrh	r3, [r3, #2]
 8005918:	b29b      	uxth	r3, r3
 800591a:	429a      	cmp	r2, r3
 800591c:	d10c      	bne.n	8005938 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b3e      	ldr	r3, [pc, #248]	; (8005a1c <tcp_input+0x4b4>)
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	429a      	cmp	r2, r3
 8005928:	d00f      	beq.n	800594a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00d      	beq.n	800594c <tcp_input+0x3e4>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e2      	bne.n	800590e <tcp_input+0x3a6>
 8005948:	e000      	b.n	800594c <tcp_input+0x3e4>
            break;
 800594a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d014      	beq.n	800597c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <tcp_input+0x4cc>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8005968:	4a32      	ldr	r2, [pc, #200]	; (8005a34 <tcp_input+0x4cc>)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800596e:	6978      	ldr	r0, [r7, #20]
 8005970:	f000 f9f0 	bl	8005d54 <tcp_listen_input>
      pbuf_free(p);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7fe f9b5 	bl	8003ce4 <pbuf_free>
      return;
 800597a:	e197      	b.n	8005cac <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8164 	beq.w	8005c4c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8005984:	4b2c      	ldr	r3, [pc, #176]	; (8005a38 <tcp_input+0x4d0>)
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	891a      	ldrh	r2, [r3, #8]
 800598e:	4b2a      	ldr	r3, [pc, #168]	; (8005a38 <tcp_input+0x4d0>)
 8005990:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8005992:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <tcp_input+0x4d0>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8005998:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <tcp_input+0x4b0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <tcp_input+0x4d0>)
 800599e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80059a0:	4b26      	ldr	r3, [pc, #152]	; (8005a3c <tcp_input+0x4d4>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <tcp_input+0x4d8>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80059ac:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <tcp_input+0x4dc>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80059b2:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <tcp_input+0x4e0>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d006      	beq.n	80059cc <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	7b5b      	ldrb	r3, [r3, #13]
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d03d      	beq.n	8005a50 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80059d4:	69f8      	ldr	r0, [r7, #28]
 80059d6:	f7ff fa5b 	bl	8004e90 <tcp_process_refused_data>
 80059da:	4603      	mov	r3, r0
 80059dc:	f113 0f0d 	cmn.w	r3, #13
 80059e0:	d007      	beq.n	80059f2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d032      	beq.n	8005a50 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80059ea:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <tcp_input+0x4e4>)
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02e      	beq.n	8005a50 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 8108 	bne.w	8005c0c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80059fc:	69f8      	ldr	r0, [r7, #28]
 80059fe:	f002 fa09 	bl	8007e14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8005a02:	e103      	b.n	8005c0c <tcp_input+0x6a4>
 8005a04:	0800ef9c 	.word	0x0800ef9c
 8005a08:	0800f034 	.word	0x0800f034
 8005a0c:	0800efe0 	.word	0x0800efe0
 8005a10:	0800f05c 	.word	0x0800f05c
 8005a14:	0800f088 	.word	0x0800f088
 8005a18:	200000e0 	.word	0x200000e0
 8005a1c:	20004adc 	.word	0x20004adc
 8005a20:	0800f0b0 	.word	0x0800f0b0
 8005a24:	2000802c 	.word	0x2000802c
 8005a28:	0800f0dc 	.word	0x0800f0dc
 8005a2c:	2000803c 	.word	0x2000803c
 8005a30:	0800f108 	.word	0x0800f108
 8005a34:	20008034 	.word	0x20008034
 8005a38:	200000d0 	.word	0x200000d0
 8005a3c:	20000100 	.word	0x20000100
 8005a40:	200000fd 	.word	0x200000fd
 8005a44:	200000f8 	.word	0x200000f8
 8005a48:	200000fc 	.word	0x200000fc
 8005a4c:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8005a50:	4a98      	ldr	r2, [pc, #608]	; (8005cb4 <tcp_input+0x74c>)
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8005a56:	69f8      	ldr	r0, [r7, #28]
 8005a58:	f000 fac6 	bl	8005fe8 <tcp_process>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8005a60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a64:	f113 0f0d 	cmn.w	r3, #13
 8005a68:	f000 80d2 	beq.w	8005c10 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8005a6c:	4b92      	ldr	r3, [pc, #584]	; (8005cb8 <tcp_input+0x750>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d016      	beq.n	8005aa6 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <tcp_input+0x52c>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	6912      	ldr	r2, [r2, #16]
 8005a8c:	f06f 010d 	mvn.w	r1, #13
 8005a90:	4610      	mov	r0, r2
 8005a92:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	4889      	ldr	r0, [pc, #548]	; (8005cbc <tcp_input+0x754>)
 8005a98:	f7ff fc4e 	bl	8005338 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8005a9c:	69f9      	ldr	r1, [r7, #28]
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	f7fd fc18 	bl	80032d4 <memp_free>
 8005aa4:	e0bf      	b.n	8005c26 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8005aaa:	4b85      	ldr	r3, [pc, #532]	; (8005cc0 <tcp_input+0x758>)
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01b      	beq.n	8005aea <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8005ab2:	4b83      	ldr	r3, [pc, #524]	; (8005cc0 <tcp_input+0x758>)
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <tcp_input+0x56c>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	6910      	ldr	r0, [r2, #16]
 8005ac8:	89fa      	ldrh	r2, [r7, #14]
 8005aca:	69f9      	ldr	r1, [r7, #28]
 8005acc:	4798      	blx	r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	74fb      	strb	r3, [r7, #19]
 8005ad2:	e001      	b.n	8005ad8 <tcp_input+0x570>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005ad8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005adc:	f113 0f0d 	cmn.w	r3, #13
 8005ae0:	f000 8098 	beq.w	8005c14 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8005ae4:	4b76      	ldr	r3, [pc, #472]	; (8005cc0 <tcp_input+0x758>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8005aea:	69f8      	ldr	r0, [r7, #28]
 8005aec:	f000 f900 	bl	8005cf0 <tcp_input_delayed_close>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f040 8090 	bne.w	8005c18 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8005af8:	4b72      	ldr	r3, [pc, #456]	; (8005cc4 <tcp_input+0x75c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d041      	beq.n	8005b84 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d006      	beq.n	8005b16 <tcp_input+0x5ae>
 8005b08:	4b6f      	ldr	r3, [pc, #444]	; (8005cc8 <tcp_input+0x760>)
 8005b0a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8005b0e:	496f      	ldr	r1, [pc, #444]	; (8005ccc <tcp_input+0x764>)
 8005b10:	486f      	ldr	r0, [pc, #444]	; (8005cd0 <tcp_input+0x768>)
 8005b12:	f007 fc61 	bl	800d3d8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	7e9b      	ldrb	r3, [r3, #26]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8005b22:	4b68      	ldr	r3, [pc, #416]	; (8005cc4 <tcp_input+0x75c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe f8dc 	bl	8003ce4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8005b2c:	69f8      	ldr	r0, [r7, #28]
 8005b2e:	f7fe fdd7 	bl	80046e0 <tcp_abort>
            goto aborted;
 8005b32:	e078      	b.n	8005c26 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <tcp_input+0x5f0>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	6918      	ldr	r0, [r3, #16]
 8005b48:	4b5e      	ldr	r3, [pc, #376]	; (8005cc4 <tcp_input+0x75c>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	69f9      	ldr	r1, [r7, #28]
 8005b50:	47a0      	blx	r4
 8005b52:	4603      	mov	r3, r0
 8005b54:	74fb      	strb	r3, [r7, #19]
 8005b56:	e008      	b.n	8005b6a <tcp_input+0x602>
 8005b58:	4b5a      	ldr	r3, [pc, #360]	; (8005cc4 <tcp_input+0x75c>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	2000      	movs	r0, #0
 8005b62:	f7ff fa46 	bl	8004ff2 <tcp_recv_null>
 8005b66:	4603      	mov	r3, r0
 8005b68:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8005b6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005b6e:	f113 0f0d 	cmn.w	r3, #13
 8005b72:	d053      	beq.n	8005c1c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8005b74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8005b7c:	4b51      	ldr	r3, [pc, #324]	; (8005cc4 <tcp_input+0x75c>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8005b84:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <tcp_input+0x750>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d030      	beq.n	8005bf2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9c:	7b5a      	ldrb	r2, [r3, #13]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba2:	f042 0220 	orr.w	r2, r2, #32
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	735a      	strb	r2, [r3, #13]
 8005baa:	e022      	b.n	8005bf2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005bb4:	d005      	beq.n	8005bc2 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	3301      	adds	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <tcp_input+0x67c>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	6918      	ldr	r0, [r3, #16]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2200      	movs	r2, #0
 8005bda:	69f9      	ldr	r1, [r7, #28]
 8005bdc:	47a0      	blx	r4
 8005bde:	4603      	mov	r3, r0
 8005be0:	74fb      	strb	r3, [r7, #19]
 8005be2:	e001      	b.n	8005be8 <tcp_input+0x680>
 8005be4:	2300      	movs	r3, #0
 8005be6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005be8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bec:	f113 0f0d 	cmn.w	r3, #13
 8005bf0:	d016      	beq.n	8005c20 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8005bf2:	4b30      	ldr	r3, [pc, #192]	; (8005cb4 <tcp_input+0x74c>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8005bf8:	69f8      	ldr	r0, [r7, #28]
 8005bfa:	f000 f879 	bl	8005cf0 <tcp_input_delayed_close>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10f      	bne.n	8005c24 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8005c04:	69f8      	ldr	r0, [r7, #28]
 8005c06:	f002 f961 	bl	8007ecc <tcp_output>
 8005c0a:	e00c      	b.n	8005c26 <tcp_input+0x6be>
        goto aborted;
 8005c0c:	bf00      	nop
 8005c0e:	e00a      	b.n	8005c26 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8005c10:	bf00      	nop
 8005c12:	e008      	b.n	8005c26 <tcp_input+0x6be>
              goto aborted;
 8005c14:	bf00      	nop
 8005c16:	e006      	b.n	8005c26 <tcp_input+0x6be>
          goto aborted;
 8005c18:	bf00      	nop
 8005c1a:	e004      	b.n	8005c26 <tcp_input+0x6be>
            goto aborted;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <tcp_input+0x6be>
              goto aborted;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <tcp_input+0x6be>
          goto aborted;
 8005c24:	bf00      	nop
    tcp_input_pcb = NULL;
 8005c26:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <tcp_input+0x74c>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <tcp_input+0x75c>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8005c32:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <tcp_input+0x76c>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d037      	beq.n	8005caa <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <tcp_input+0x76c>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe f850 	bl	8003ce4 <pbuf_free>
      inseg.p = NULL;
 8005c44:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <tcp_input+0x76c>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8005c4a:	e02e      	b.n	8005caa <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8005c4c:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <tcp_input+0x770>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	899b      	ldrh	r3, [r3, #12]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fc ff48 	bl	8002aea <lwip_htons>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d115      	bne.n	8005c90 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005c64:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <tcp_input+0x774>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <tcp_input+0x778>)
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <tcp_input+0x77c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005c74:	4b18      	ldr	r3, [pc, #96]	; (8005cd8 <tcp_input+0x770>)
 8005c76:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005c78:	885b      	ldrh	r3, [r3, #2]
 8005c7a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <tcp_input+0x770>)
 8005c7e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005c80:	8812      	ldrh	r2, [r2, #0]
 8005c82:	b292      	uxth	r2, r2
 8005c84:	9201      	str	r2, [sp, #4]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <tcp_input+0x780>)
 8005c8a:	4a18      	ldr	r2, [pc, #96]	; (8005cec <tcp_input+0x784>)
 8005c8c:	f002 fba8 	bl	80083e0 <tcp_rst>
    pbuf_free(p);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fe f827 	bl	8003ce4 <pbuf_free>
  return;
 8005c96:	e008      	b.n	8005caa <tcp_input+0x742>
    goto dropped;
 8005c98:	bf00      	nop
 8005c9a:	e002      	b.n	8005ca2 <tcp_input+0x73a>
dropped:
 8005c9c:	bf00      	nop
 8005c9e:	e000      	b.n	8005ca2 <tcp_input+0x73a>
      goto dropped;
 8005ca0:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fe f81e 	bl	8003ce4 <pbuf_free>
 8005ca8:	e000      	b.n	8005cac <tcp_input+0x744>
  return;
 8005caa:	bf00      	nop
}
 8005cac:	3724      	adds	r7, #36	; 0x24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd90      	pop	{r4, r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20008040 	.word	0x20008040
 8005cb8:	200000fd 	.word	0x200000fd
 8005cbc:	2000802c 	.word	0x2000802c
 8005cc0:	200000f8 	.word	0x200000f8
 8005cc4:	20000100 	.word	0x20000100
 8005cc8:	0800ef9c 	.word	0x0800ef9c
 8005ccc:	0800f138 	.word	0x0800f138
 8005cd0:	0800efe0 	.word	0x0800efe0
 8005cd4:	200000d0 	.word	0x200000d0
 8005cd8:	200000e0 	.word	0x200000e0
 8005cdc:	200000f4 	.word	0x200000f4
 8005ce0:	200000fa 	.word	0x200000fa
 8005ce4:	200000f0 	.word	0x200000f0
 8005ce8:	20004aec 	.word	0x20004aec
 8005cec:	20004af0 	.word	0x20004af0

08005cf0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <tcp_input_delayed_close+0x5c>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01d      	beq.n	8005d40 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7e9b      	ldrb	r3, [r3, #26]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10d      	bne.n	8005d2c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <tcp_input_delayed_close+0x3c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6912      	ldr	r2, [r2, #16]
 8005d24:	f06f 010e 	mvn.w	r1, #14
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4808      	ldr	r0, [pc, #32]	; (8005d50 <tcp_input_delayed_close+0x60>)
 8005d30:	f7ff fb02 	bl	8005338 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	2001      	movs	r0, #1
 8005d38:	f7fd facc 	bl	80032d4 <memp_free>
    return 1;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200000fd 	.word	0x200000fd
 8005d50:	2000802c 	.word	0x2000802c

08005d54 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8005d5c:	4b64      	ldr	r3, [pc, #400]	; (8005ef0 <tcp_listen_input+0x19c>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f040 80bc 	bne.w	8005ee2 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8005d6a:	4b61      	ldr	r3, [pc, #388]	; (8005ef0 <tcp_listen_input+0x19c>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005d76:	4b5f      	ldr	r3, [pc, #380]	; (8005ef4 <tcp_listen_input+0x1a0>)
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	4b5f      	ldr	r3, [pc, #380]	; (8005ef8 <tcp_listen_input+0x1a4>)
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4b5e      	ldr	r3, [pc, #376]	; (8005efc <tcp_listen_input+0x1a8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005d86:	4b5e      	ldr	r3, [pc, #376]	; (8005f00 <tcp_listen_input+0x1ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005d8a:	885b      	ldrh	r3, [r3, #2]
 8005d8c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005d8e:	4a5c      	ldr	r2, [pc, #368]	; (8005f00 <tcp_listen_input+0x1ac>)
 8005d90:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005d92:	8812      	ldrh	r2, [r2, #0]
 8005d94:	b292      	uxth	r2, r2
 8005d96:	9201      	str	r2, [sp, #4]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	4b5a      	ldr	r3, [pc, #360]	; (8005f04 <tcp_listen_input+0x1b0>)
 8005d9c:	4a5a      	ldr	r2, [pc, #360]	; (8005f08 <tcp_listen_input+0x1b4>)
 8005d9e:	f002 fb1f 	bl	80083e0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8005da2:	e0a0      	b.n	8005ee6 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8005da4:	4b52      	ldr	r3, [pc, #328]	; (8005ef0 <tcp_listen_input+0x19c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 809a 	beq.w	8005ee6 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7d5b      	ldrb	r3, [r3, #21]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff f9fa 	bl	80051b0 <tcp_alloc>
 8005dbc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d111      	bne.n	8005de8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <tcp_listen_input+0x8e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6910      	ldr	r0, [r2, #16]
 8005dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4798      	blx	r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73bb      	strb	r3, [r7, #14]
      return;
 8005de0:	e082      	b.n	8005ee8 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8005de2:	23f0      	movs	r3, #240	; 0xf0
 8005de4:	73bb      	strb	r3, [r7, #14]
      return;
 8005de6:	e07f      	b.n	8005ee8 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8005de8:	4b48      	ldr	r3, [pc, #288]	; (8005f0c <tcp_listen_input+0x1b8>)
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8005df0:	4b46      	ldr	r3, [pc, #280]	; (8005f0c <tcp_listen_input+0x1b8>)
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8ada      	ldrh	r2, [r3, #22]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <tcp_listen_input+0x1ac>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2203      	movs	r2, #3
 8005e10:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8005e12:	4b3a      	ldr	r3, [pc, #232]	; (8005efc <tcp_listen_input+0x1a8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8005e24:	6978      	ldr	r0, [r7, #20]
 8005e26:	f7ff fb03 	bl	8005430 <tcp_next_iss>
 8005e2a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8005e44:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <tcp_listen_input+0x1a8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7a1b      	ldrb	r3, [r3, #8]
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8005e6a:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <tcp_listen_input+0x1bc>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	4a27      	ldr	r2, [pc, #156]	; (8005f10 <tcp_listen_input+0x1bc>)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	f002 fd02 	bl	8008880 <tcp_timer_needed>
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <tcp_listen_input+0x1c0>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8005e82:	6978      	ldr	r0, [r7, #20]
 8005e84:	f001 fd12 	bl	80078ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8005e88:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <tcp_listen_input+0x1ac>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	89db      	ldrh	r3, [r3, #14]
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7ff fad5 	bl	800545c <tcp_eff_send_mss_impl>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8005eba:	2112      	movs	r1, #18
 8005ebc:	6978      	ldr	r0, [r7, #20]
 8005ebe:	f001 fead 	bl	8007c1c <tcp_enqueue_flags>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8005ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8005ece:	2100      	movs	r1, #0
 8005ed0:	6978      	ldr	r0, [r7, #20]
 8005ed2:	f7fe fb53 	bl	800457c <tcp_abandon>
      return;
 8005ed6:	e007      	b.n	8005ee8 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8005ed8:	6978      	ldr	r0, [r7, #20]
 8005eda:	f001 fff7 	bl	8007ecc <tcp_output>
  return;
 8005ede:	bf00      	nop
 8005ee0:	e001      	b.n	8005ee6 <tcp_listen_input+0x192>
    return;
 8005ee2:	bf00      	nop
 8005ee4:	e000      	b.n	8005ee8 <tcp_listen_input+0x194>
  return;
 8005ee6:	bf00      	nop
}
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200000fc 	.word	0x200000fc
 8005ef4:	200000f4 	.word	0x200000f4
 8005ef8:	200000fa 	.word	0x200000fa
 8005efc:	200000f0 	.word	0x200000f0
 8005f00:	200000e0 	.word	0x200000e0
 8005f04:	20004aec 	.word	0x20004aec
 8005f08:	20004af0 	.word	0x20004af0
 8005f0c:	20004adc 	.word	0x20004adc
 8005f10:	2000802c 	.word	0x2000802c
 8005f14:	20008028 	.word	0x20008028

08005f18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8005f20:	4b29      	ldr	r3, [pc, #164]	; (8005fc8 <tcp_timewait_input+0xb0>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d147      	bne.n	8005fbc <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8005f2c:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <tcp_timewait_input+0xb0>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d027      	beq.n	8005f88 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8005f38:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <tcp_timewait_input+0xb4>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	db2a      	blt.n	8005f9c <tcp_timewait_input+0x84>
 8005f46:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <tcp_timewait_input+0xb4>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8005f52:	440b      	add	r3, r1
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	dc20      	bgt.n	8005f9c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <tcp_timewait_input+0xb8>)
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <tcp_timewait_input+0xbc>)
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <tcp_timewait_input+0xb4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <tcp_timewait_input+0xc0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005f6e:	885b      	ldrh	r3, [r3, #2]
 8005f70:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005f72:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <tcp_timewait_input+0xc0>)
 8005f74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005f76:	8812      	ldrh	r2, [r2, #0]
 8005f78:	b292      	uxth	r2, r2
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <tcp_timewait_input+0xc4>)
 8005f80:	4a17      	ldr	r2, [pc, #92]	; (8005fe0 <tcp_timewait_input+0xc8>)
 8005f82:	f002 fa2d 	bl	80083e0 <tcp_rst>
      return;
 8005f86:	e01c      	b.n	8005fc2 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <tcp_timewait_input+0xb0>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8005f94:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <tcp_timewait_input+0xcc>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8005f9c:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <tcp_timewait_input+0xbc>)
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00d      	beq.n	8005fc0 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	7e9b      	ldrb	r3, [r3, #26]
 8005fa8:	f043 0302 	orr.w	r3, r3, #2
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 ff8a 	bl	8007ecc <tcp_output>
  }
  return;
 8005fb8:	bf00      	nop
 8005fba:	e001      	b.n	8005fc0 <tcp_timewait_input+0xa8>
    return;
 8005fbc:	bf00      	nop
 8005fbe:	e000      	b.n	8005fc2 <tcp_timewait_input+0xaa>
  return;
 8005fc0:	bf00      	nop
}
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	200000fc 	.word	0x200000fc
 8005fcc:	200000f0 	.word	0x200000f0
 8005fd0:	200000f4 	.word	0x200000f4
 8005fd4:	200000fa 	.word	0x200000fa
 8005fd8:	200000e0 	.word	0x200000e0
 8005fdc:	20004aec 	.word	0x20004aec
 8005fe0:	20004af0 	.word	0x20004af0
 8005fe4:	20008030 	.word	0x20008030

08005fe8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8005ff8:	4ba4      	ldr	r3, [pc, #656]	; (800628c <tcp_process+0x2a4>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d04e      	beq.n	80060a2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7d1b      	ldrb	r3, [r3, #20]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d108      	bne.n	800601e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006010:	4b9f      	ldr	r3, [pc, #636]	; (8006290 <tcp_process+0x2a8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d123      	bne.n	8006060 <tcp_process+0x78>
        acceptable = 1;
 8006018:	2301      	movs	r3, #1
 800601a:	76fb      	strb	r3, [r7, #27]
 800601c:	e020      	b.n	8006060 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006022:	4b9c      	ldr	r3, [pc, #624]	; (8006294 <tcp_process+0x2ac>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d102      	bne.n	8006030 <tcp_process+0x48>
        acceptable = 1;
 800602a:	2301      	movs	r3, #1
 800602c:	76fb      	strb	r3, [r7, #27]
 800602e:	e017      	b.n	8006060 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006030:	4b98      	ldr	r3, [pc, #608]	; (8006294 <tcp_process+0x2ac>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	db10      	blt.n	8006060 <tcp_process+0x78>
 800603e:	4b95      	ldr	r3, [pc, #596]	; (8006294 <tcp_process+0x2ac>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800604a:	440b      	add	r3, r1
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	dc06      	bgt.n	8006060 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7e9b      	ldrb	r3, [r3, #26]
 8006056:	f043 0302 	orr.w	r3, r3, #2
 800605a:	b2da      	uxtb	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006060:	7efb      	ldrb	r3, [r7, #27]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7d1b      	ldrb	r3, [r3, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <tcp_process+0x94>
 800606e:	4b8a      	ldr	r3, [pc, #552]	; (8006298 <tcp_process+0x2b0>)
 8006070:	f240 22e7 	movw	r2, #743	; 0x2e7
 8006074:	4989      	ldr	r1, [pc, #548]	; (800629c <tcp_process+0x2b4>)
 8006076:	488a      	ldr	r0, [pc, #552]	; (80062a0 <tcp_process+0x2b8>)
 8006078:	f007 f9ae 	bl	800d3d8 <iprintf>
      recv_flags |= TF_RESET;
 800607c:	4b89      	ldr	r3, [pc, #548]	; (80062a4 <tcp_process+0x2bc>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	b2da      	uxtb	r2, r3
 8006086:	4b87      	ldr	r3, [pc, #540]	; (80062a4 <tcp_process+0x2bc>)
 8006088:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7e9b      	ldrb	r3, [r3, #26]
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8006098:	f06f 030d 	mvn.w	r3, #13
 800609c:	e34d      	b.n	800673a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e34b      	b.n	800673a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80060a2:	4b7a      	ldr	r3, [pc, #488]	; (800628c <tcp_process+0x2a4>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <tcp_process+0xe8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7d1b      	ldrb	r3, [r3, #20]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d00c      	beq.n	80060d0 <tcp_process+0xe8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7d1b      	ldrb	r3, [r3, #20]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d008      	beq.n	80060d0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7e9b      	ldrb	r3, [r3, #26]
 80060c2:	f043 0302 	orr.w	r3, r3, #2
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e334      	b.n	800673a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7e9b      	ldrb	r3, [r3, #26]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80060dc:	4b72      	ldr	r3, [pc, #456]	; (80062a8 <tcp_process+0x2c0>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fbdd 	bl	80078ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	7d1b      	ldrb	r3, [r3, #20]
 80060f6:	3b02      	subs	r3, #2
 80060f8:	2b07      	cmp	r3, #7
 80060fa:	f200 830e 	bhi.w	800671a <tcp_process+0x732>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <tcp_process+0x11c>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006125 	.word	0x08006125
 8006108:	0800631d 	.word	0x0800631d
 800610c:	08006475 	.word	0x08006475
 8006110:	0800649f 	.word	0x0800649f
 8006114:	080065c9 	.word	0x080065c9
 8006118:	08006475 	.word	0x08006475
 800611c:	08006655 	.word	0x08006655
 8006120:	080066e5 	.word	0x080066e5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006124:	4b59      	ldr	r3, [pc, #356]	; (800628c <tcp_process+0x2a4>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80cb 	beq.w	80062c8 <tcp_process+0x2e0>
 8006132:	4b56      	ldr	r3, [pc, #344]	; (800628c <tcp_process+0x2a4>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80c4 	beq.w	80062c8 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	4b52      	ldr	r3, [pc, #328]	; (8006290 <tcp_process+0x2a8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	f040 80bc 	bne.w	80062c8 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8006150:	4b50      	ldr	r3, [pc, #320]	; (8006294 <tcp_process+0x2ac>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8006162:	4b4b      	ldr	r3, [pc, #300]	; (8006290 <tcp_process+0x2a8>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800616a:	4b50      	ldr	r3, [pc, #320]	; (80062ac <tcp_process+0x2c4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	89db      	ldrh	r3, [r3, #14]
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006184:	4b43      	ldr	r3, [pc, #268]	; (8006294 <tcp_process+0x2ac>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2204      	movs	r2, #4
 8006192:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7ff f95c 	bl	800545c <tcp_eff_send_mss_impl>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	f241 121c 	movw	r2, #4380	; 0x111c
 80061b6:	429a      	cmp	r2, r3
 80061b8:	bf38      	it	cc
 80061ba:	461a      	movcc	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4293      	cmp	r3, r2
 80061c4:	bf28      	it	cs
 80061c6:	4613      	movcs	r3, r2
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <tcp_process+0x200>
 80061da:	4b2f      	ldr	r3, [pc, #188]	; (8006298 <tcp_process+0x2b0>)
 80061dc:	f240 321a 	movw	r2, #794	; 0x31a
 80061e0:	4933      	ldr	r1, [pc, #204]	; (80062b0 <tcp_process+0x2c8>)
 80061e2:	482f      	ldr	r0, [pc, #188]	; (80062a0 <tcp_process+0x2b8>)
 80061e4:	f007 f8f8 	bl	800d3d8 <iprintf>
      --pcb->snd_queuelen;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061fc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d111      	bne.n	8006228 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006208:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <tcp_process+0x236>
 8006210:	4b21      	ldr	r3, [pc, #132]	; (8006298 <tcp_process+0x2b0>)
 8006212:	f240 3222 	movw	r2, #802	; 0x322
 8006216:	4927      	ldr	r1, [pc, #156]	; (80062b4 <tcp_process+0x2cc>)
 8006218:	4821      	ldr	r0, [pc, #132]	; (80062a0 <tcp_process+0x2b8>)
 800621a:	f007 f8dd 	bl	800d3d8 <iprintf>
        pcb->unsent = rseg->next;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	669a      	str	r2, [r3, #104]	; 0x68
 8006226:	e003      	b.n	8006230 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8006230:	69f8      	ldr	r0, [r7, #28]
 8006232:	f7fe feaa 	bl	8004f8a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <tcp_process+0x260>
        pcb->rtime = -1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006244:	861a      	strh	r2, [r3, #48]	; 0x30
 8006246:	e006      	b.n	8006256 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <tcp_process+0x28e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6910      	ldr	r0, [r2, #16]
 800626a:	2200      	movs	r2, #0
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4798      	blx	r3
 8006270:	4603      	mov	r3, r0
 8006272:	76bb      	strb	r3, [r7, #26]
 8006274:	e001      	b.n	800627a <tcp_process+0x292>
 8006276:	2300      	movs	r3, #0
 8006278:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800627a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800627e:	f113 0f0d 	cmn.w	r3, #13
 8006282:	d119      	bne.n	80062b8 <tcp_process+0x2d0>
        return ERR_ABRT;
 8006284:	f06f 030c 	mvn.w	r3, #12
 8006288:	e257      	b.n	800673a <tcp_process+0x752>
 800628a:	bf00      	nop
 800628c:	200000fc 	.word	0x200000fc
 8006290:	200000f4 	.word	0x200000f4
 8006294:	200000f0 	.word	0x200000f0
 8006298:	0800ef9c 	.word	0x0800ef9c
 800629c:	0800f154 	.word	0x0800f154
 80062a0:	0800efe0 	.word	0x0800efe0
 80062a4:	200000fd 	.word	0x200000fd
 80062a8:	20008030 	.word	0x20008030
 80062ac:	200000e0 	.word	0x200000e0
 80062b0:	0800f174 	.word	0x0800f174
 80062b4:	0800f18c 	.word	0x0800f18c
      }
      tcp_ack_now(pcb);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7e9b      	ldrb	r3, [r3, #26]
 80062bc:	f043 0302 	orr.w	r3, r3, #2
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80062c6:	e22a      	b.n	800671e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80062c8:	4b9f      	ldr	r3, [pc, #636]	; (8006548 <tcp_process+0x560>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8224 	beq.w	800671e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80062d6:	4b9d      	ldr	r3, [pc, #628]	; (800654c <tcp_process+0x564>)
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	4b9d      	ldr	r3, [pc, #628]	; (8006550 <tcp_process+0x568>)
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	4b9c      	ldr	r3, [pc, #624]	; (8006554 <tcp_process+0x56c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80062e6:	4b9c      	ldr	r3, [pc, #624]	; (8006558 <tcp_process+0x570>)
 80062e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80062ea:	885b      	ldrh	r3, [r3, #2]
 80062ec:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80062ee:	4a9a      	ldr	r2, [pc, #616]	; (8006558 <tcp_process+0x570>)
 80062f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80062f2:	8812      	ldrh	r2, [r2, #0]
 80062f4:	b292      	uxth	r2, r2
 80062f6:	9201      	str	r2, [sp, #4]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4b98      	ldr	r3, [pc, #608]	; (800655c <tcp_process+0x574>)
 80062fc:	4a98      	ldr	r2, [pc, #608]	; (8006560 <tcp_process+0x578>)
 80062fe:	f002 f86f 	bl	80083e0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006308:	2b05      	cmp	r3, #5
 800630a:	f200 8208 	bhi.w	800671e <tcp_process+0x736>
        pcb->rtime = 0;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f002 f8d9 	bl	80084cc <tcp_rexmit_rto>
    break;
 800631a:	e200      	b.n	800671e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800631c:	4b8a      	ldr	r3, [pc, #552]	; (8006548 <tcp_process+0x560>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8091 	beq.w	800644c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800632a:	4b88      	ldr	r3, [pc, #544]	; (800654c <tcp_process+0x564>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	db71      	blt.n	800641e <tcp_process+0x436>
 800633a:	4b84      	ldr	r3, [pc, #528]	; (800654c <tcp_process+0x564>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	dc6a      	bgt.n	800641e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2204      	movs	r2, #4
 800634c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <tcp_process+0x386>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <tcp_process+0x386>
 8006360:	4b80      	ldr	r3, [pc, #512]	; (8006564 <tcp_process+0x57c>)
 8006362:	f240 3251 	movw	r2, #849	; 0x351
 8006366:	4980      	ldr	r1, [pc, #512]	; (8006568 <tcp_process+0x580>)
 8006368:	4880      	ldr	r0, [pc, #512]	; (800656c <tcp_process+0x584>)
 800636a:	f007 f835 	bl	800d3d8 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8006376:	23fa      	movs	r3, #250	; 0xfa
 8006378:	76bb      	strb	r3, [r7, #26]
 800637a:	e011      	b.n	80063a0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <tcp_process+0x3b4>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6910      	ldr	r0, [r2, #16]
 8006390:	2200      	movs	r2, #0
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4798      	blx	r3
 8006396:	4603      	mov	r3, r0
 8006398:	76bb      	strb	r3, [r7, #26]
 800639a:	e001      	b.n	80063a0 <tcp_process+0x3b8>
 800639c:	23f0      	movs	r3, #240	; 0xf0
 800639e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80063a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80063a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80063ac:	f113 0f0d 	cmn.w	r3, #13
 80063b0:	d002      	beq.n	80063b8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fe f994 	bl	80046e0 <tcp_abort>
          }
          return ERR_ABRT;
 80063b8:	f06f 030c 	mvn.w	r3, #12
 80063bc:	e1bd      	b.n	800673a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fa42 	bl	8006848 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80063c4:	4b6a      	ldr	r3, [pc, #424]	; (8006570 <tcp_process+0x588>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <tcp_process+0x3f0>
          recv_acked--;
 80063cc:	4b68      	ldr	r3, [pc, #416]	; (8006570 <tcp_process+0x588>)
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	4b66      	ldr	r3, [pc, #408]	; (8006570 <tcp_process+0x588>)
 80063d6:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	f241 121c 	movw	r2, #4380	; 0x111c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	bf38      	it	cc
 80063e6:	461a      	movcc	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4293      	cmp	r3, r2
 80063f0:	bf28      	it	cs
 80063f2:	4613      	movcs	r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80063fc:	4b5d      	ldr	r3, [pc, #372]	; (8006574 <tcp_process+0x58c>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d034      	beq.n	8006472 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	7e9b      	ldrb	r3, [r3, #26]
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	b2da      	uxtb	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2207      	movs	r2, #7
 800641a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800641c:	e029      	b.n	8006472 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800641e:	4b4b      	ldr	r3, [pc, #300]	; (800654c <tcp_process+0x564>)
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <tcp_process+0x568>)
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	4b4a      	ldr	r3, [pc, #296]	; (8006554 <tcp_process+0x56c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800642e:	4b4a      	ldr	r3, [pc, #296]	; (8006558 <tcp_process+0x570>)
 8006430:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006432:	885b      	ldrh	r3, [r3, #2]
 8006434:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006436:	4a48      	ldr	r2, [pc, #288]	; (8006558 <tcp_process+0x570>)
 8006438:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	b292      	uxth	r2, r2
 800643e:	9201      	str	r2, [sp, #4]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	4b46      	ldr	r3, [pc, #280]	; (800655c <tcp_process+0x574>)
 8006444:	4a46      	ldr	r2, [pc, #280]	; (8006560 <tcp_process+0x578>)
 8006446:	f001 ffcb 	bl	80083e0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800644a:	e16a      	b.n	8006722 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800644c:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <tcp_process+0x560>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8164 	beq.w	8006722 <tcp_process+0x73a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1e5a      	subs	r2, r3, #1
 8006460:	4b3c      	ldr	r3, [pc, #240]	; (8006554 <tcp_process+0x56c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	f040 815c 	bne.w	8006722 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f002 f864 	bl	8008538 <tcp_rexmit>
    break;
 8006470:	e157      	b.n	8006722 <tcp_process+0x73a>
 8006472:	e156      	b.n	8006722 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f9e7 	bl	8006848 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800647a:	4b3e      	ldr	r3, [pc, #248]	; (8006574 <tcp_process+0x58c>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 814f 	beq.w	8006726 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	7e9b      	ldrb	r3, [r3, #26]
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2207      	movs	r2, #7
 800649a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800649c:	e143      	b.n	8006726 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f9d2 	bl	8006848 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80064a4:	4b33      	ldr	r3, [pc, #204]	; (8006574 <tcp_process+0x58c>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d074      	beq.n	800659a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80064b0:	4b25      	ldr	r3, [pc, #148]	; (8006548 <tcp_process+0x560>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d063      	beq.n	8006584 <tcp_process+0x59c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064c0:	4b22      	ldr	r3, [pc, #136]	; (800654c <tcp_process+0x564>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d15d      	bne.n	8006584 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d159      	bne.n	8006584 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7e9b      	ldrb	r3, [r3, #26]
 80064d4:	f043 0302 	orr.w	r3, r3, #2
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fe fee8 	bl	80052b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80064e4:	4b24      	ldr	r3, [pc, #144]	; (8006578 <tcp_process+0x590>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d105      	bne.n	80064fa <tcp_process+0x512>
 80064ee:	4b22      	ldr	r3, [pc, #136]	; (8006578 <tcp_process+0x590>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4a20      	ldr	r2, [pc, #128]	; (8006578 <tcp_process+0x590>)
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e013      	b.n	8006522 <tcp_process+0x53a>
 80064fa:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <tcp_process+0x590>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e00c      	b.n	800651c <tcp_process+0x534>
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d104      	bne.n	8006516 <tcp_process+0x52e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	e005      	b.n	8006522 <tcp_process+0x53a>
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ef      	bne.n	8006502 <tcp_process+0x51a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	60da      	str	r2, [r3, #12]
 8006528:	4b14      	ldr	r3, [pc, #80]	; (800657c <tcp_process+0x594>)
 800652a:	2201      	movs	r2, #1
 800652c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	220a      	movs	r2, #10
 8006532:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006534:	4b12      	ldr	r3, [pc, #72]	; (8006580 <tcp_process+0x598>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	4a10      	ldr	r2, [pc, #64]	; (8006580 <tcp_process+0x598>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	f002 f99d 	bl	8008880 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8006546:	e0f0      	b.n	800672a <tcp_process+0x742>
 8006548:	200000fc 	.word	0x200000fc
 800654c:	200000f4 	.word	0x200000f4
 8006550:	200000fa 	.word	0x200000fa
 8006554:	200000f0 	.word	0x200000f0
 8006558:	200000e0 	.word	0x200000e0
 800655c:	20004aec 	.word	0x20004aec
 8006560:	20004af0 	.word	0x20004af0
 8006564:	0800ef9c 	.word	0x0800ef9c
 8006568:	0800f1a0 	.word	0x0800f1a0
 800656c:	0800efe0 	.word	0x0800efe0
 8006570:	200000f8 	.word	0x200000f8
 8006574:	200000fd 	.word	0x200000fd
 8006578:	2000802c 	.word	0x2000802c
 800657c:	20008028 	.word	0x20008028
 8006580:	2000803c 	.word	0x2000803c
        tcp_ack_now(pcb);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7e9b      	ldrb	r3, [r3, #26]
 8006588:	f043 0302 	orr.w	r3, r3, #2
 800658c:	b2da      	uxtb	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2208      	movs	r2, #8
 8006596:	751a      	strb	r2, [r3, #20]
    break;
 8006598:	e0c7      	b.n	800672a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800659a:	4b6a      	ldr	r3, [pc, #424]	; (8006744 <tcp_process+0x75c>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80c1 	beq.w	800672a <tcp_process+0x742>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ac:	4b66      	ldr	r3, [pc, #408]	; (8006748 <tcp_process+0x760>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	f040 80ba 	bne.w	800672a <tcp_process+0x742>
               pcb->unsent == NULL) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 80b5 	bne.w	800672a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2206      	movs	r2, #6
 80065c4:	751a      	strb	r2, [r3, #20]
    break;
 80065c6:	e0b0      	b.n	800672a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f93d 	bl	8006848 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80065ce:	4b5f      	ldr	r3, [pc, #380]	; (800674c <tcp_process+0x764>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80a9 	beq.w	800672e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7e9b      	ldrb	r3, [r3, #26]
 80065e0:	f043 0302 	orr.w	r3, r3, #2
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fe fe62 	bl	80052b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80065f0:	4b57      	ldr	r3, [pc, #348]	; (8006750 <tcp_process+0x768>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d105      	bne.n	8006606 <tcp_process+0x61e>
 80065fa:	4b55      	ldr	r3, [pc, #340]	; (8006750 <tcp_process+0x768>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	4a53      	ldr	r2, [pc, #332]	; (8006750 <tcp_process+0x768>)
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e013      	b.n	800662e <tcp_process+0x646>
 8006606:	4b52      	ldr	r3, [pc, #328]	; (8006750 <tcp_process+0x768>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	e00c      	b.n	8006628 <tcp_process+0x640>
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d104      	bne.n	8006622 <tcp_process+0x63a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e005      	b.n	800662e <tcp_process+0x646>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1ef      	bne.n	800660e <tcp_process+0x626>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	4b47      	ldr	r3, [pc, #284]	; (8006754 <tcp_process+0x76c>)
 8006636:	2201      	movs	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	220a      	movs	r2, #10
 800663e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8006640:	4b45      	ldr	r3, [pc, #276]	; (8006758 <tcp_process+0x770>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60da      	str	r2, [r3, #12]
 8006648:	4a43      	ldr	r2, [pc, #268]	; (8006758 <tcp_process+0x770>)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	f002 f917 	bl	8008880 <tcp_timer_needed>
    }
    break;
 8006652:	e06c      	b.n	800672e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f8f7 	bl	8006848 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800665a:	4b3a      	ldr	r3, [pc, #232]	; (8006744 <tcp_process+0x75c>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b00      	cmp	r3, #0
 8006664:	d065      	beq.n	8006732 <tcp_process+0x74a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800666a:	4b37      	ldr	r3, [pc, #220]	; (8006748 <tcp_process+0x760>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d15f      	bne.n	8006732 <tcp_process+0x74a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006676:	2b00      	cmp	r3, #0
 8006678:	d15b      	bne.n	8006732 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fe fe1a 	bl	80052b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006680:	4b33      	ldr	r3, [pc, #204]	; (8006750 <tcp_process+0x768>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	429a      	cmp	r2, r3
 8006688:	d105      	bne.n	8006696 <tcp_process+0x6ae>
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <tcp_process+0x768>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4a2f      	ldr	r2, [pc, #188]	; (8006750 <tcp_process+0x768>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	e013      	b.n	80066be <tcp_process+0x6d6>
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <tcp_process+0x768>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e00c      	b.n	80066b8 <tcp_process+0x6d0>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d104      	bne.n	80066b2 <tcp_process+0x6ca>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	60da      	str	r2, [r3, #12]
 80066b0:	e005      	b.n	80066be <tcp_process+0x6d6>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1ef      	bne.n	800669e <tcp_process+0x6b6>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	60da      	str	r2, [r3, #12]
 80066c4:	4b23      	ldr	r3, [pc, #140]	; (8006754 <tcp_process+0x76c>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	220a      	movs	r2, #10
 80066ce:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80066d0:	4b21      	ldr	r3, [pc, #132]	; (8006758 <tcp_process+0x770>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]
 80066d8:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <tcp_process+0x770>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	f002 f8cf 	bl	8008880 <tcp_timer_needed>
    }
    break;
 80066e2:	e026      	b.n	8006732 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f8af 	bl	8006848 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80066ea:	4b16      	ldr	r3, [pc, #88]	; (8006744 <tcp_process+0x75c>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01f      	beq.n	8006736 <tcp_process+0x74e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <tcp_process+0x760>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d119      	bne.n	8006736 <tcp_process+0x74e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006706:	2b00      	cmp	r3, #0
 8006708:	d115      	bne.n	8006736 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800670a:	4b10      	ldr	r3, [pc, #64]	; (800674c <tcp_process+0x764>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f043 0310 	orr.w	r3, r3, #16
 8006712:	b2da      	uxtb	r2, r3
 8006714:	4b0d      	ldr	r3, [pc, #52]	; (800674c <tcp_process+0x764>)
 8006716:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006718:	e00d      	b.n	8006736 <tcp_process+0x74e>
  default:
    break;
 800671a:	bf00      	nop
 800671c:	e00c      	b.n	8006738 <tcp_process+0x750>
    break;
 800671e:	bf00      	nop
 8006720:	e00a      	b.n	8006738 <tcp_process+0x750>
    break;
 8006722:	bf00      	nop
 8006724:	e008      	b.n	8006738 <tcp_process+0x750>
    break;
 8006726:	bf00      	nop
 8006728:	e006      	b.n	8006738 <tcp_process+0x750>
    break;
 800672a:	bf00      	nop
 800672c:	e004      	b.n	8006738 <tcp_process+0x750>
    break;
 800672e:	bf00      	nop
 8006730:	e002      	b.n	8006738 <tcp_process+0x750>
    break;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <tcp_process+0x750>
    break;
 8006736:	bf00      	nop
  }
  return ERR_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200000fc 	.word	0x200000fc
 8006748:	200000f4 	.word	0x200000f4
 800674c:	200000fd 	.word	0x200000fd
 8006750:	2000802c 	.word	0x2000802c
 8006754:	20008028 	.word	0x20008028
 8006758:	2000803c 	.word	0x2000803c

0800675c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	899b      	ldrh	r3, [r3, #12]
 800676c:	b29b      	uxth	r3, r3
 800676e:	4618      	mov	r0, r3
 8006770:	f7fc f9bb 	bl	8002aea <lwip_htons>
 8006774:	4603      	mov	r3, r0
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d027      	beq.n	80067ce <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800677e:	6838      	ldr	r0, [r7, #0]
 8006780:	f7fe fbef 	bl	8004f62 <tcp_segs_free>
    next = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	e055      	b.n	8006836 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	899b      	ldrh	r3, [r3, #12]
 8006790:	b29b      	uxth	r3, r3
 8006792:	4618      	mov	r0, r3
 8006794:	f7fc f9a9 	bl	8002aea <lwip_htons>
 8006798:	4603      	mov	r3, r0
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	899b      	ldrh	r3, [r3, #12]
 80067a8:	b29c      	uxth	r4, r3
 80067aa:	2001      	movs	r0, #1
 80067ac:	f7fc f99d 	bl	8002aea <lwip_htons>
 80067b0:	4603      	mov	r3, r0
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4322      	orrs	r2, r4
 80067ba:	b292      	uxth	r2, r2
 80067bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7fe fbde 	bl	8004f8a <tcp_seg_free>
    while (next &&
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00e      	beq.n	80067f2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	891b      	ldrh	r3, [r3, #8]
 80067d8:	461a      	mov	r2, r3
 80067da:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <tcp_oos_insert_segment+0xe8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	441a      	add	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	8909      	ldrh	r1, [r1, #8]
 80067ea:	440b      	add	r3, r1
 80067ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dacb      	bge.n	800678a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01e      	beq.n	8006836 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	891b      	ldrh	r3, [r3, #8]
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b11      	ldr	r3, [pc, #68]	; (8006844 <tcp_oos_insert_segment+0xe8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	441a      	add	r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800680c:	2b00      	cmp	r3, #0
 800680e:	dd12      	ble.n	8006836 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	b29a      	uxth	r2, r3
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <tcp_oos_insert_segment+0xe8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	b29a      	uxth	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	891b      	ldrh	r3, [r3, #8]
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7fd f8e3 	bl	80039fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]
}
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	bd90      	pop	{r4, r7, pc}
 8006844:	200000f0 	.word	0x200000f0

08006848 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684a:	b08d      	sub	sp, #52	; 0x34
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7d1b      	ldrb	r3, [r3, #20]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d806      	bhi.n	800686a <tcp_receive+0x22>
 800685c:	4ba6      	ldr	r3, [pc, #664]	; (8006af8 <tcp_receive+0x2b0>)
 800685e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006862:	49a6      	ldr	r1, [pc, #664]	; (8006afc <tcp_receive+0x2b4>)
 8006864:	48a6      	ldr	r0, [pc, #664]	; (8006b00 <tcp_receive+0x2b8>)
 8006866:	f006 fdb7 	bl	800d3d8 <iprintf>

  if (flags & TCP_ACK) {
 800686a:	4ba6      	ldr	r3, [pc, #664]	; (8006b04 <tcp_receive+0x2bc>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 82bf 	beq.w	8006df6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	4413      	add	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800688c:	4b9e      	ldr	r3, [pc, #632]	; (8006b08 <tcp_receive+0x2c0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	db1b      	blt.n	80068ce <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800689a:	4b9b      	ldr	r3, [pc, #620]	; (8006b08 <tcp_receive+0x2c0>)
 800689c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d106      	bne.n	80068b0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a6:	4b99      	ldr	r3, [pc, #612]	; (8006b0c <tcp_receive+0x2c4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	db0e      	blt.n	80068ce <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b4:	4b95      	ldr	r3, [pc, #596]	; (8006b0c <tcp_receive+0x2c4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d141      	bne.n	8006940 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80068bc:	4b94      	ldr	r3, [pc, #592]	; (8006b10 <tcp_receive+0x2c8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	89db      	ldrh	r3, [r3, #14]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d938      	bls.n	8006940 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80068ce:	4b90      	ldr	r3, [pc, #576]	; (8006b10 <tcp_receive+0x2c8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	89db      	ldrh	r3, [r3, #14]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d205      	bcs.n	80068f8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80068f8:	4b83      	ldr	r3, [pc, #524]	; (8006b08 <tcp_receive+0x2c0>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8006900:	4b82      	ldr	r3, [pc, #520]	; (8006b0c <tcp_receive+0x2c4>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006918:	2b00      	cmp	r3, #0
 800691a:	d111      	bne.n	8006940 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800692c:	e008      	b.n	8006940 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006940:	4b72      	ldr	r3, [pc, #456]	; (8006b0c <tcp_receive+0x2c4>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	dc53      	bgt.n	80069f6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800694e:	4b71      	ldr	r3, [pc, #452]	; (8006b14 <tcp_receive+0x2cc>)
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d146      	bne.n	80069e4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8006960:	4413      	add	r3, r2
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	429a      	cmp	r2, r3
 8006966:	d13d      	bne.n	80069e4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800696e:	2b00      	cmp	r3, #0
 8006970:	db38      	blt.n	80069e4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006976:	4b65      	ldr	r3, [pc, #404]	; (8006b0c <tcp_receive+0x2c4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d132      	bne.n	80069e4 <tcp_receive+0x19c>
              found_dupack = 1;
 800697e:	2301      	movs	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006988:	2bff      	cmp	r3, #255	; 0xff
 800698a:	d007      	beq.n	800699c <tcp_receive+0x154>
                ++pcb->dupacks;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006992:	3301      	adds	r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d916      	bls.n	80069d4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069b0:	4413      	add	r3, r2
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d912      	bls.n	80069e4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069c8:	4413      	add	r3, r2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80069d2:	e007      	b.n	80069e4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d102      	bne.n	80069e4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fdfa 	bl	80085d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f040 8169 	bne.w	8006cbe <tcp_receive+0x476>
        pcb->dupacks = 0;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069f4:	e163      	b.n	8006cbe <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80069f6:	4b45      	ldr	r3, [pc, #276]	; (8006b0c <tcp_receive+0x2c4>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f2c0 8107 	blt.w	8006c16 <tcp_receive+0x3ce>
 8006a08:	4b40      	ldr	r3, [pc, #256]	; (8006b0c <tcp_receive+0x2c4>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f300 80ff 	bgt.w	8006c16 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	7e9b      	ldrb	r3, [r3, #26]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00c      	beq.n	8006a3e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7e9b      	ldrb	r3, [r3, #26]
 8006a28:	f023 0304 	bic.w	r3, r3, #4
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006a4c:	10db      	asrs	r3, r3, #3
 8006a4e:	b21b      	sxth	r3, r3
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	b21a      	sxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8006a6e:	4b27      	ldr	r3, [pc, #156]	; (8006b0c <tcp_receive+0x2c4>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7d1b      	ldrb	r3, [r3, #20]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	f240 8094 	bls.w	8006ba8 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d216      	bcs.n	8006abe <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a9a:	4413      	add	r3, r2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d97f      	bls.n	8006ba8 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ab2:	4413      	add	r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8006abc:	e074      	b.n	8006ba8 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ac8:	4619      	mov	r1, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ace:	fb03 f301 	mul.w	r3, r3, r1
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8006ad8:	fb93 f3f1 	sdiv	r3, r3, r1
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006ae8:	8a7a      	ldrh	r2, [r7, #18]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d95c      	bls.n	8006ba8 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8a7a      	ldrh	r2, [r7, #18]
 8006af2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8006af6:	e057      	b.n	8006ba8 <tcp_receive+0x360>
 8006af8:	0800ef9c 	.word	0x0800ef9c
 8006afc:	0800f1c0 	.word	0x0800f1c0
 8006b00:	0800efe0 	.word	0x0800efe0
 8006b04:	200000fc 	.word	0x200000fc
 8006b08:	200000f0 	.word	0x200000f0
 8006b0c:	200000f4 	.word	0x200000f4
 8006b10:	200000e0 	.word	0x200000e0
 8006b14:	200000fa 	.word	0x200000fa
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd f96a 	bl	8003e0c <pbuf_clen>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	d206      	bcs.n	8006b4c <tcp_receive+0x304>
 8006b3e:	4b70      	ldr	r3, [pc, #448]	; (8006d00 <tcp_receive+0x4b8>)
 8006b40:	f240 429e 	movw	r2, #1182	; 0x49e
 8006b44:	496f      	ldr	r1, [pc, #444]	; (8006d04 <tcp_receive+0x4bc>)
 8006b46:	4870      	ldr	r0, [pc, #448]	; (8006d08 <tcp_receive+0x4c0>)
 8006b48:	f006 fc46 	bl	800d3d8 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fd f95b 	bl	8003e0c <pbuf_clen>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	891a      	ldrh	r2, [r3, #8]
 8006b6e:	4b67      	ldr	r3, [pc, #412]	; (8006d0c <tcp_receive+0x4c4>)
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	4b65      	ldr	r3, [pc, #404]	; (8006d0c <tcp_receive+0x4c4>)
 8006b78:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8006b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b7c:	f7fe fa05 	bl	8004f8a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <tcp_receive+0x360>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <tcp_receive+0x360>
 8006b9a:	4b59      	ldr	r3, [pc, #356]	; (8006d00 <tcp_receive+0x4b8>)
 8006b9c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8006ba0:	495b      	ldr	r1, [pc, #364]	; (8006d10 <tcp_receive+0x4c8>)
 8006ba2:	4859      	ldr	r0, [pc, #356]	; (8006d08 <tcp_receive+0x4c0>)
 8006ba4:	f006 fc18 	bl	800d3d8 <iprintf>
      while (pcb->unacked != NULL &&
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d022      	beq.n	8006bf6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fb ffa3 	bl	8002b04 <lwip_htonl>
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc4:	891b      	ldrh	r3, [r3, #8]
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	899b      	ldrh	r3, [r3, #12]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fb ff89 	bl	8002aea <lwip_htons>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <tcp_receive+0x39e>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <tcp_receive+0x3a0>
 8006be6:	2300      	movs	r3, #0
 8006be8:	442b      	add	r3, r5
 8006bea:	18e2      	adds	r2, r4, r3
 8006bec:	4b49      	ldr	r3, [pc, #292]	; (8006d14 <tcp_receive+0x4cc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd90      	ble.n	8006b18 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c04:	861a      	strh	r2, [r3, #48]	; 0x30
 8006c06:	e002      	b.n	8006c0e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	76da      	strb	r2, [r3, #27]
 8006c14:	e002      	b.n	8006c1c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 f8fc 	bl	8007e14 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8006c1c:	e04f      	b.n	8006cbe <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd f8df 	bl	8003e0c <pbuf_clen>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	429c      	cmp	r4, r3
 8006c52:	d206      	bcs.n	8006c62 <tcp_receive+0x41a>
 8006c54:	4b2a      	ldr	r3, [pc, #168]	; (8006d00 <tcp_receive+0x4b8>)
 8006c56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006c5a:	492a      	ldr	r1, [pc, #168]	; (8006d04 <tcp_receive+0x4bc>)
 8006c5c:	482a      	ldr	r0, [pc, #168]	; (8006d08 <tcp_receive+0x4c0>)
 8006c5e:	f006 fbbb 	bl	800d3d8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fd f8d0 	bl	8003e0c <pbuf_clen>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	891a      	ldrh	r2, [r3, #8]
 8006c84:	4b21      	ldr	r3, [pc, #132]	; (8006d0c <tcp_receive+0x4c4>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	4b1f      	ldr	r3, [pc, #124]	; (8006d0c <tcp_receive+0x4c4>)
 8006c8e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8006c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c92:	f7fe f97a 	bl	8004f8a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <tcp_receive+0x476>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <tcp_receive+0x476>
 8006cb0:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <tcp_receive+0x4b8>)
 8006cb2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8006cb6:	4916      	ldr	r1, [pc, #88]	; (8006d10 <tcp_receive+0x4c8>)
 8006cb8:	4813      	ldr	r0, [pc, #76]	; (8006d08 <tcp_receive+0x4c0>)
 8006cba:	f006 fb8d 	bl	800d3d8 <iprintf>
    while (pcb->unsent != NULL &&
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d036      	beq.n	8006d34 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006cc6:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <tcp_receive+0x4cc>)
 8006cc8:	681c      	ldr	r4, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fb ff16 	bl	8002b04 <lwip_htonl>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cde:	891b      	ldrh	r3, [r3, #8]
 8006ce0:	461e      	mov	r6, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	899b      	ldrh	r3, [r3, #12]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fb fefc 	bl	8002aea <lwip_htons>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <tcp_receive+0x4d0>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e00c      	b.n	8006d1a <tcp_receive+0x4d2>
 8006d00:	0800ef9c 	.word	0x0800ef9c
 8006d04:	0800f1dc 	.word	0x0800f1dc
 8006d08:	0800efe0 	.word	0x0800efe0
 8006d0c:	200000f8 	.word	0x200000f8
 8006d10:	0800f204 	.word	0x0800f204
 8006d14:	200000f4 	.word	0x200000f4
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4433      	add	r3, r6
 8006d1c:	442b      	add	r3, r5
 8006d1e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db07      	blt.n	8006d34 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006d24:	4b8d      	ldr	r3, [pc, #564]	; (8006f5c <tcp_receive+0x714>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f77f af75 	ble.w	8006c1e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006d3a:	4b89      	ldr	r3, [pc, #548]	; (8006f60 <tcp_receive+0x718>)
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	4413      	add	r3, r2
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d052      	beq.n	8006df6 <tcp_receive+0x5ae>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d54:	4b81      	ldr	r3, [pc, #516]	; (8006f5c <tcp_receive+0x714>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da4b      	bge.n	8006df6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006d5e:	4b81      	ldr	r3, [pc, #516]	; (8006f64 <tcp_receive+0x71c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8006d70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006d78:	10db      	asrs	r3, r3, #3
 8006d7a:	b21b      	sxth	r3, r3
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d8e:	4413      	add	r3, r2
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	b21a      	sxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8006d98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da03      	bge.n	8006da8 <tcp_receive+0x560>
        m = -m;
 8006da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006da2:	425b      	negs	r3, r3
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8006da8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006db0:	109b      	asrs	r3, r3, #2
 8006db2:	b21b      	sxth	r3, r3
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dc6:	4413      	add	r3, r2
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	b21a      	sxth	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006dd6:	10db      	asrs	r3, r3, #3
 8006dd8:	b21b      	sxth	r3, r3
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4413      	add	r3, r2
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	b21a      	sxth	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8006df6:	4b5c      	ldr	r3, [pc, #368]	; (8006f68 <tcp_receive+0x720>)
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 84f1 	beq.w	80077e2 <tcp_receive+0xf9a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7d1b      	ldrb	r3, [r3, #20]
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	f200 84ec 	bhi.w	80077e2 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e0e:	4b57      	ldr	r3, [pc, #348]	; (8006f6c <tcp_receive+0x724>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f2c0 80b8 	blt.w	8006f8c <tcp_receive+0x744>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e20:	4b51      	ldr	r3, [pc, #324]	; (8006f68 <tcp_receive+0x720>)
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	4b51      	ldr	r3, [pc, #324]	; (8006f6c <tcp_receive+0x724>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	440b      	add	r3, r1
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	3301      	adds	r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f300 80ab 	bgt.w	8006f8c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8006e36:	4b4e      	ldr	r3, [pc, #312]	; (8006f70 <tcp_receive+0x728>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e40:	4b4a      	ldr	r3, [pc, #296]	; (8006f6c <tcp_receive+0x724>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006e48:	4b49      	ldr	r3, [pc, #292]	; (8006f70 <tcp_receive+0x728>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d106      	bne.n	8006e5e <tcp_receive+0x616>
 8006e50:	4b48      	ldr	r3, [pc, #288]	; (8006f74 <tcp_receive+0x72c>)
 8006e52:	f240 523c 	movw	r2, #1340	; 0x53c
 8006e56:	4948      	ldr	r1, [pc, #288]	; (8006f78 <tcp_receive+0x730>)
 8006e58:	4848      	ldr	r0, [pc, #288]	; (8006f7c <tcp_receive+0x734>)
 8006e5a:	f006 fabd 	bl	800d3d8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006e64:	4293      	cmp	r3, r2
 8006e66:	dd06      	ble.n	8006e76 <tcp_receive+0x62e>
 8006e68:	4b42      	ldr	r3, [pc, #264]	; (8006f74 <tcp_receive+0x72c>)
 8006e6a:	f240 523d 	movw	r2, #1341	; 0x53d
 8006e6e:	4944      	ldr	r1, [pc, #272]	; (8006f80 <tcp_receive+0x738>)
 8006e70:	4842      	ldr	r0, [pc, #264]	; (8006f7c <tcp_receive+0x734>)
 8006e72:	f006 fab1 	bl	800d3d8 <iprintf>
      if (inseg.p->len < off) {
 8006e76:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <tcp_receive+0x728>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	895b      	ldrh	r3, [r3, #10]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	4293      	cmp	r3, r2
 8006e82:	dd3e      	ble.n	8006f02 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006e84:	4b3a      	ldr	r3, [pc, #232]	; (8006f70 <tcp_receive+0x728>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	891b      	ldrh	r3, [r3, #8]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	dd06      	ble.n	8006ea0 <tcp_receive+0x658>
 8006e92:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <tcp_receive+0x72c>)
 8006e94:	f240 523f 	movw	r2, #1343	; 0x53f
 8006e98:	493a      	ldr	r1, [pc, #232]	; (8006f84 <tcp_receive+0x73c>)
 8006e9a:	4838      	ldr	r0, [pc, #224]	; (8006f7c <tcp_receive+0x734>)
 8006e9c:	f006 fa9c 	bl	800d3d8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8006ea0:	4b33      	ldr	r3, [pc, #204]	; (8006f70 <tcp_receive+0x728>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	891a      	ldrh	r2, [r3, #8]
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8006eae:	e00e      	b.n	8006ece <tcp_receive+0x686>
          off -= p->len;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	895b      	ldrh	r3, [r3, #10]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	8a3a      	ldrh	r2, [r7, #16]
 8006ec0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	895b      	ldrh	r3, [r3, #10]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	dcea      	bgt.n	8006eb0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	425b      	negs	r3, r3
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	69b8      	ldr	r0, [r7, #24]
 8006ee8:	f7fc fed8 	bl	8003c9c <pbuf_header>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01c      	beq.n	8006f2c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006ef2:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <tcp_receive+0x72c>)
 8006ef4:	f240 524c 	movw	r2, #1356	; 0x54c
 8006ef8:	4923      	ldr	r1, [pc, #140]	; (8006f88 <tcp_receive+0x740>)
 8006efa:	4820      	ldr	r0, [pc, #128]	; (8006f7c <tcp_receive+0x734>)
 8006efc:	f006 fa6c 	bl	800d3d8 <iprintf>
 8006f00:	e014      	b.n	8006f2c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8006f02:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <tcp_receive+0x728>)
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f08:	b292      	uxth	r2, r2
 8006f0a:	4252      	negs	r2, r2
 8006f0c:	b292      	uxth	r2, r2
 8006f0e:	b212      	sxth	r2, r2
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fc fec2 	bl	8003c9c <pbuf_header>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d006      	beq.n	8006f2c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006f1e:	4b15      	ldr	r3, [pc, #84]	; (8006f74 <tcp_receive+0x72c>)
 8006f20:	f240 5251 	movw	r2, #1361	; 0x551
 8006f24:	4918      	ldr	r1, [pc, #96]	; (8006f88 <tcp_receive+0x740>)
 8006f26:	4815      	ldr	r0, [pc, #84]	; (8006f7c <tcp_receive+0x734>)
 8006f28:	f006 fa56 	bl	800d3d8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006f2c:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <tcp_receive+0x728>)
 8006f2e:	891a      	ldrh	r2, [r3, #8]
 8006f30:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <tcp_receive+0x724>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	b299      	uxth	r1, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	1acb      	subs	r3, r1, r3
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <tcp_receive+0x728>)
 8006f46:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	4a07      	ldr	r2, [pc, #28]	; (8006f6c <tcp_receive+0x724>)
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <tcp_receive+0x728>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4a05      	ldr	r2, [pc, #20]	; (8006f6c <tcp_receive+0x724>)
 8006f56:	6812      	ldr	r2, [r2, #0]
 8006f58:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006f5a:	e025      	b.n	8006fa8 <tcp_receive+0x760>
 8006f5c:	200000f4 	.word	0x200000f4
 8006f60:	200000f8 	.word	0x200000f8
 8006f64:	20008030 	.word	0x20008030
 8006f68:	200000fa 	.word	0x200000fa
 8006f6c:	200000f0 	.word	0x200000f0
 8006f70:	200000d0 	.word	0x200000d0
 8006f74:	0800ef9c 	.word	0x0800ef9c
 8006f78:	0800f224 	.word	0x0800f224
 8006f7c:	0800efe0 	.word	0x0800efe0
 8006f80:	0800f234 	.word	0x0800f234
 8006f84:	0800f244 	.word	0x0800f244
 8006f88:	0800f254 	.word	0x0800f254
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006f8c:	4b87      	ldr	r3, [pc, #540]	; (80071ac <tcp_receive+0x964>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	da06      	bge.n	8006fa8 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	7e9b      	ldrb	r3, [r3, #26]
 8006f9e:	f043 0302 	orr.w	r3, r3, #2
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006fa8:	4b80      	ldr	r3, [pc, #512]	; (80071ac <tcp_receive+0x964>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f2c0 8410 	blt.w	80077d8 <tcp_receive+0xf90>
 8006fb8:	4b7c      	ldr	r3, [pc, #496]	; (80071ac <tcp_receive+0x964>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006fc4:	440b      	add	r3, r1
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	3301      	adds	r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f300 8404 	bgt.w	80077d8 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fd4:	4b75      	ldr	r3, [pc, #468]	; (80071ac <tcp_receive+0x964>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	f040 8287 	bne.w	80074ec <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8006fde:	4b74      	ldr	r3, [pc, #464]	; (80071b0 <tcp_receive+0x968>)
 8006fe0:	891c      	ldrh	r4, [r3, #8]
 8006fe2:	4b73      	ldr	r3, [pc, #460]	; (80071b0 <tcp_receive+0x968>)
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	899b      	ldrh	r3, [r3, #12]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fb fd7d 	bl	8002aea <lwip_htons>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <tcp_receive+0x7b6>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <tcp_receive+0x7b8>
 8006ffe:	2300      	movs	r3, #0
 8007000:	4423      	add	r3, r4
 8007002:	b29a      	uxth	r2, r3
 8007004:	4b6b      	ldr	r3, [pc, #428]	; (80071b4 <tcp_receive+0x96c>)
 8007006:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800700c:	4b69      	ldr	r3, [pc, #420]	; (80071b4 <tcp_receive+0x96c>)
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d26e      	bcs.n	80070f2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007014:	4b66      	ldr	r3, [pc, #408]	; (80071b0 <tcp_receive+0x968>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	899b      	ldrh	r3, [r3, #12]
 800701a:	b29b      	uxth	r3, r3
 800701c:	4618      	mov	r0, r3
 800701e:	f7fb fd64 	bl	8002aea <lwip_htons>
 8007022:	4603      	mov	r3, r0
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01b      	beq.n	8007064 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800702c:	4b60      	ldr	r3, [pc, #384]	; (80071b0 <tcp_receive+0x968>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	899b      	ldrh	r3, [r3, #12]
 8007032:	b29b      	uxth	r3, r3
 8007034:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007038:	b29c      	uxth	r4, r3
 800703a:	4b5d      	ldr	r3, [pc, #372]	; (80071b0 <tcp_receive+0x968>)
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	899b      	ldrh	r3, [r3, #12]
 8007040:	b29b      	uxth	r3, r3
 8007042:	4618      	mov	r0, r3
 8007044:	f7fb fd51 	bl	8002aea <lwip_htons>
 8007048:	4603      	mov	r3, r0
 800704a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800704e:	b29b      	uxth	r3, r3
 8007050:	4618      	mov	r0, r3
 8007052:	f7fb fd4a 	bl	8002aea <lwip_htons>
 8007056:	4603      	mov	r3, r0
 8007058:	461a      	mov	r2, r3
 800705a:	4b55      	ldr	r3, [pc, #340]	; (80071b0 <tcp_receive+0x968>)
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	4322      	orrs	r2, r4
 8007060:	b292      	uxth	r2, r2
 8007062:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007068:	4b51      	ldr	r3, [pc, #324]	; (80071b0 <tcp_receive+0x968>)
 800706a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800706c:	4b50      	ldr	r3, [pc, #320]	; (80071b0 <tcp_receive+0x968>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	899b      	ldrh	r3, [r3, #12]
 8007072:	b29b      	uxth	r3, r3
 8007074:	4618      	mov	r0, r3
 8007076:	f7fb fd38 	bl	8002aea <lwip_htons>
 800707a:	4603      	mov	r3, r0
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <tcp_receive+0x848>
            inseg.len -= 1;
 8007084:	4b4a      	ldr	r3, [pc, #296]	; (80071b0 <tcp_receive+0x968>)
 8007086:	891b      	ldrh	r3, [r3, #8]
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	4b48      	ldr	r3, [pc, #288]	; (80071b0 <tcp_receive+0x968>)
 800708e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007090:	4b47      	ldr	r3, [pc, #284]	; (80071b0 <tcp_receive+0x968>)
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	4b46      	ldr	r3, [pc, #280]	; (80071b0 <tcp_receive+0x968>)
 8007096:	891b      	ldrh	r3, [r3, #8]
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f7fc fcae 	bl	80039fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80070a0:	4b43      	ldr	r3, [pc, #268]	; (80071b0 <tcp_receive+0x968>)
 80070a2:	891c      	ldrh	r4, [r3, #8]
 80070a4:	4b42      	ldr	r3, [pc, #264]	; (80071b0 <tcp_receive+0x968>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	899b      	ldrh	r3, [r3, #12]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fb fd1c 	bl	8002aea <lwip_htons>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <tcp_receive+0x878>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <tcp_receive+0x87a>
 80070c0:	2300      	movs	r3, #0
 80070c2:	4423      	add	r3, r4
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	4b3b      	ldr	r3, [pc, #236]	; (80071b4 <tcp_receive+0x96c>)
 80070c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80070ca:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <tcp_receive+0x96c>)
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	4b36      	ldr	r3, [pc, #216]	; (80071ac <tcp_receive+0x964>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	441a      	add	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80070de:	440b      	add	r3, r1
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d006      	beq.n	80070f2 <tcp_receive+0x8aa>
 80070e4:	4b34      	ldr	r3, [pc, #208]	; (80071b8 <tcp_receive+0x970>)
 80070e6:	f240 527f 	movw	r2, #1407	; 0x57f
 80070ea:	4934      	ldr	r1, [pc, #208]	; (80071bc <tcp_receive+0x974>)
 80070ec:	4834      	ldr	r0, [pc, #208]	; (80071c0 <tcp_receive+0x978>)
 80070ee:	f006 f973 	bl	800d3d8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80e1 	beq.w	80072be <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80070fc:	4b2c      	ldr	r3, [pc, #176]	; (80071b0 <tcp_receive+0x968>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	899b      	ldrh	r3, [r3, #12]
 8007102:	b29b      	uxth	r3, r3
 8007104:	4618      	mov	r0, r3
 8007106:	f7fb fcf0 	bl	8002aea <lwip_htons>
 800710a:	4603      	mov	r3, r0
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d010      	beq.n	8007136 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8007114:	e00a      	b.n	800712c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8007126:	68b8      	ldr	r0, [r7, #8]
 8007128:	f7fd ff2f 	bl	8004f8a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f0      	bne.n	8007116 <tcp_receive+0x8ce>
 8007134:	e0c3      	b.n	80072be <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800713c:	e04f      	b.n	80071de <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	899b      	ldrh	r3, [r3, #12]
 8007144:	b29b      	uxth	r3, r3
 8007146:	4618      	mov	r0, r3
 8007148:	f7fb fccf 	bl	8002aea <lwip_htons>
 800714c:	4603      	mov	r3, r0
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d03b      	beq.n	80071ce <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007156:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <tcp_receive+0x968>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	899b      	ldrh	r3, [r3, #12]
 800715c:	b29b      	uxth	r3, r3
 800715e:	4618      	mov	r0, r3
 8007160:	f7fb fcc3 	bl	8002aea <lwip_htons>
 8007164:	4603      	mov	r3, r0
 8007166:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800716a:	2b00      	cmp	r3, #0
 800716c:	d12f      	bne.n	80071ce <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800716e:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <tcp_receive+0x968>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	899b      	ldrh	r3, [r3, #12]
 8007174:	b29c      	uxth	r4, r3
 8007176:	2001      	movs	r0, #1
 8007178:	f7fb fcb7 	bl	8002aea <lwip_htons>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <tcp_receive+0x968>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4322      	orrs	r2, r4
 8007186:	b292      	uxth	r2, r2
 8007188:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <tcp_receive+0x968>)
 800718c:	891c      	ldrh	r4, [r3, #8]
 800718e:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <tcp_receive+0x968>)
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	899b      	ldrh	r3, [r3, #12]
 8007194:	b29b      	uxth	r3, r3
 8007196:	4618      	mov	r0, r3
 8007198:	f7fb fca7 	bl	8002aea <lwip_htons>
 800719c:	4603      	mov	r3, r0
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <tcp_receive+0x97c>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e00d      	b.n	80071c6 <tcp_receive+0x97e>
 80071aa:	bf00      	nop
 80071ac:	200000f0 	.word	0x200000f0
 80071b0:	200000d0 	.word	0x200000d0
 80071b4:	200000fa 	.word	0x200000fa
 80071b8:	0800ef9c 	.word	0x0800ef9c
 80071bc:	0800f268 	.word	0x0800f268
 80071c0:	0800efe0 	.word	0x0800efe0
 80071c4:	2300      	movs	r3, #0
 80071c6:	4423      	add	r3, r4
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	4b95      	ldr	r3, [pc, #596]	; (8007420 <tcp_receive+0xbd8>)
 80071cc:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80071d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071da:	f7fd fed6 	bl	8004f8a <tcp_seg_free>
            while (next &&
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00e      	beq.n	8007202 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80071e4:	4b8e      	ldr	r3, [pc, #568]	; (8007420 <tcp_receive+0xbd8>)
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	4b8e      	ldr	r3, [pc, #568]	; (8007424 <tcp_receive+0xbdc>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	441a      	add	r2, r3
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071f8:	8909      	ldrh	r1, [r1, #8]
 80071fa:	440b      	add	r3, r1
 80071fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da9d      	bge.n	800713e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d057      	beq.n	80072b8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8007208:	4b85      	ldr	r3, [pc, #532]	; (8007420 <tcp_receive+0xbd8>)
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	4b85      	ldr	r3, [pc, #532]	; (8007424 <tcp_receive+0xbdc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	441a      	add	r2, r3
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800721c:	2b00      	cmp	r3, #0
 800721e:	dd4b      	ble.n	80072b8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	b29a      	uxth	r2, r3
 8007228:	4b7e      	ldr	r3, [pc, #504]	; (8007424 <tcp_receive+0xbdc>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	b29a      	uxth	r2, r3
 8007232:	4b7d      	ldr	r3, [pc, #500]	; (8007428 <tcp_receive+0xbe0>)
 8007234:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007236:	4b7c      	ldr	r3, [pc, #496]	; (8007428 <tcp_receive+0xbe0>)
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	899b      	ldrh	r3, [r3, #12]
 800723c:	b29b      	uxth	r3, r3
 800723e:	4618      	mov	r0, r3
 8007240:	f7fb fc53 	bl	8002aea <lwip_htons>
 8007244:	4603      	mov	r3, r0
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <tcp_receive+0xa12>
                inseg.len -= 1;
 800724e:	4b76      	ldr	r3, [pc, #472]	; (8007428 <tcp_receive+0xbe0>)
 8007250:	891b      	ldrh	r3, [r3, #8]
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	4b74      	ldr	r3, [pc, #464]	; (8007428 <tcp_receive+0xbe0>)
 8007258:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800725a:	4b73      	ldr	r3, [pc, #460]	; (8007428 <tcp_receive+0xbe0>)
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	4b72      	ldr	r3, [pc, #456]	; (8007428 <tcp_receive+0xbe0>)
 8007260:	891b      	ldrh	r3, [r3, #8]
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fc fbc9 	bl	80039fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800726a:	4b6f      	ldr	r3, [pc, #444]	; (8007428 <tcp_receive+0xbe0>)
 800726c:	891c      	ldrh	r4, [r3, #8]
 800726e:	4b6e      	ldr	r3, [pc, #440]	; (8007428 <tcp_receive+0xbe0>)
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	899b      	ldrh	r3, [r3, #12]
 8007274:	b29b      	uxth	r3, r3
 8007276:	4618      	mov	r0, r3
 8007278:	f7fb fc37 	bl	8002aea <lwip_htons>
 800727c:	4603      	mov	r3, r0
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <tcp_receive+0xa42>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <tcp_receive+0xa44>
 800728a:	2300      	movs	r3, #0
 800728c:	4423      	add	r3, r4
 800728e:	b29a      	uxth	r2, r3
 8007290:	4b63      	ldr	r3, [pc, #396]	; (8007420 <tcp_receive+0xbd8>)
 8007292:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007294:	4b62      	ldr	r3, [pc, #392]	; (8007420 <tcp_receive+0xbd8>)
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	4b62      	ldr	r3, [pc, #392]	; (8007424 <tcp_receive+0xbdc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	441a      	add	r2, r3
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d006      	beq.n	80072b8 <tcp_receive+0xa70>
 80072aa:	4b60      	ldr	r3, [pc, #384]	; (800742c <tcp_receive+0xbe4>)
 80072ac:	f240 52af 	movw	r2, #1455	; 0x5af
 80072b0:	495f      	ldr	r1, [pc, #380]	; (8007430 <tcp_receive+0xbe8>)
 80072b2:	4860      	ldr	r0, [pc, #384]	; (8007434 <tcp_receive+0xbec>)
 80072b4:	f006 f890 	bl	800d3d8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072bc:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80072be:	4b58      	ldr	r3, [pc, #352]	; (8007420 <tcp_receive+0xbd8>)
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	4b57      	ldr	r3, [pc, #348]	; (8007424 <tcp_receive+0xbdc>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	441a      	add	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80072d2:	4b53      	ldr	r3, [pc, #332]	; (8007420 <tcp_receive+0xbd8>)
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d206      	bcs.n	80072e8 <tcp_receive+0xaa0>
 80072da:	4b54      	ldr	r3, [pc, #336]	; (800742c <tcp_receive+0xbe4>)
 80072dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80072e0:	4955      	ldr	r1, [pc, #340]	; (8007438 <tcp_receive+0xbf0>)
 80072e2:	4854      	ldr	r0, [pc, #336]	; (8007434 <tcp_receive+0xbec>)
 80072e4:	f006 f878 	bl	800d3d8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80072ec:	4b4c      	ldr	r3, [pc, #304]	; (8007420 <tcp_receive+0xbd8>)
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7fd f9fd 	bl	80046f8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80072fe:	4b4a      	ldr	r3, [pc, #296]	; (8007428 <tcp_receive+0xbe0>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	891b      	ldrh	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d006      	beq.n	8007316 <tcp_receive+0xace>
          recv_data = inseg.p;
 8007308:	4b47      	ldr	r3, [pc, #284]	; (8007428 <tcp_receive+0xbe0>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4a4b      	ldr	r2, [pc, #300]	; (800743c <tcp_receive+0xbf4>)
 800730e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007310:	4b45      	ldr	r3, [pc, #276]	; (8007428 <tcp_receive+0xbe0>)
 8007312:	2200      	movs	r2, #0
 8007314:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007316:	4b44      	ldr	r3, [pc, #272]	; (8007428 <tcp_receive+0xbe0>)
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	899b      	ldrh	r3, [r3, #12]
 800731c:	b29b      	uxth	r3, r3
 800731e:	4618      	mov	r0, r3
 8007320:	f7fb fbe3 	bl	8002aea <lwip_htons>
 8007324:	4603      	mov	r3, r0
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80b4 	beq.w	8007498 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007330:	4b43      	ldr	r3, [pc, #268]	; (8007440 <tcp_receive+0xbf8>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	f043 0320 	orr.w	r3, r3, #32
 8007338:	b2da      	uxtb	r2, r3
 800733a:	4b41      	ldr	r3, [pc, #260]	; (8007440 <tcp_receive+0xbf8>)
 800733c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800733e:	e0ab      	b.n	8007498 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4a35      	ldr	r2, [pc, #212]	; (8007424 <tcp_receive+0xbdc>)
 8007350:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	891b      	ldrh	r3, [r3, #8]
 8007356:	461c      	mov	r4, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	899b      	ldrh	r3, [r3, #12]
 800735e:	b29b      	uxth	r3, r3
 8007360:	4618      	mov	r0, r3
 8007362:	f7fb fbc2 	bl	8002aea <lwip_htons>
 8007366:	4603      	mov	r3, r0
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <tcp_receive+0xb2c>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <tcp_receive+0xb2e>
 8007374:	2300      	movs	r3, #0
 8007376:	191a      	adds	r2, r3, r4
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	441a      	add	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007386:	461c      	mov	r4, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	891b      	ldrh	r3, [r3, #8]
 800738c:	461d      	mov	r5, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	899b      	ldrh	r3, [r3, #12]
 8007394:	b29b      	uxth	r3, r3
 8007396:	4618      	mov	r0, r3
 8007398:	f7fb fba7 	bl	8002aea <lwip_htons>
 800739c:	4603      	mov	r3, r0
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <tcp_receive+0xb62>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <tcp_receive+0xb64>
 80073aa:	2300      	movs	r3, #0
 80073ac:	442b      	add	r3, r5
 80073ae:	429c      	cmp	r4, r3
 80073b0:	d206      	bcs.n	80073c0 <tcp_receive+0xb78>
 80073b2:	4b1e      	ldr	r3, [pc, #120]	; (800742c <tcp_receive+0xbe4>)
 80073b4:	f240 52de 	movw	r2, #1502	; 0x5de
 80073b8:	4922      	ldr	r1, [pc, #136]	; (8007444 <tcp_receive+0xbfc>)
 80073ba:	481e      	ldr	r0, [pc, #120]	; (8007434 <tcp_receive+0xbec>)
 80073bc:	f006 f80c 	bl	800d3d8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	891b      	ldrh	r3, [r3, #8]
 80073c4:	461c      	mov	r4, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	899b      	ldrh	r3, [r3, #12]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fb fb8b 	bl	8002aea <lwip_htons>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <tcp_receive+0xb9a>
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <tcp_receive+0xb9c>
 80073e2:	2300      	movs	r3, #0
 80073e4:	1919      	adds	r1, r3, r4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80073ea:	b28b      	uxth	r3, r1
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fd f97f 	bl	80046f8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	891b      	ldrh	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d028      	beq.n	8007456 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <tcp_receive+0xbf4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01d      	beq.n	8007448 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <tcp_receive+0xbf4>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4619      	mov	r1, r3
 8007416:	4610      	mov	r0, r2
 8007418:	f7fc fd30 	bl	8003e7c <pbuf_cat>
 800741c:	e018      	b.n	8007450 <tcp_receive+0xc08>
 800741e:	bf00      	nop
 8007420:	200000fa 	.word	0x200000fa
 8007424:	200000f0 	.word	0x200000f0
 8007428:	200000d0 	.word	0x200000d0
 800742c:	0800ef9c 	.word	0x0800ef9c
 8007430:	0800f2a0 	.word	0x0800f2a0
 8007434:	0800efe0 	.word	0x0800efe0
 8007438:	0800f2dc 	.word	0x0800f2dc
 800743c:	20000100 	.word	0x20000100
 8007440:	200000fd 	.word	0x200000fd
 8007444:	0800f2fc 	.word	0x0800f2fc
            } else {
              recv_data = cseg->p;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	4a71      	ldr	r2, [pc, #452]	; (8007614 <tcp_receive+0xdcc>)
 800744e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	899b      	ldrh	r3, [r3, #12]
 800745c:	b29b      	uxth	r3, r3
 800745e:	4618      	mov	r0, r3
 8007460:	f7fb fb43 	bl	8002aea <lwip_htons>
 8007464:	4603      	mov	r3, r0
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00d      	beq.n	800748a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800746e:	4b6a      	ldr	r3, [pc, #424]	; (8007618 <tcp_receive+0xdd0>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f043 0320 	orr.w	r3, r3, #32
 8007476:	b2da      	uxtb	r2, r3
 8007478:	4b67      	ldr	r3, [pc, #412]	; (8007618 <tcp_receive+0xdd0>)
 800747a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7d1b      	ldrb	r3, [r3, #20]
 8007480:	2b04      	cmp	r3, #4
 8007482:	d102      	bne.n	800748a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2207      	movs	r2, #7
 8007488:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7fd fd79 	bl	8004f8a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749c:	2b00      	cmp	r3, #0
 800749e:	d008      	beq.n	80074b2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80074ac:	429a      	cmp	r2, r3
 80074ae:	f43f af47 	beq.w	8007340 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7e9b      	ldrb	r3, [r3, #26]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00e      	beq.n	80074dc <tcp_receive+0xc94>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7e9b      	ldrb	r3, [r3, #26]
 80074c2:	f023 0301 	bic.w	r3, r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	769a      	strb	r2, [r3, #26]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7e9b      	ldrb	r3, [r3, #26]
 80074d0:	f043 0302 	orr.w	r3, r3, #2
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80074da:	e181      	b.n	80077e0 <tcp_receive+0xf98>
        tcp_ack(pcb);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7e9b      	ldrb	r3, [r3, #26]
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80074ea:	e179      	b.n	80077e0 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fc91 	bl	8007e14 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80074fa:	4848      	ldr	r0, [pc, #288]	; (800761c <tcp_receive+0xdd4>)
 80074fc:	f7fd fd5d 	bl	8004fba <tcp_seg_copy>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8007506:	e16b      	b.n	80077e0 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007512:	e150      	b.n	80077b6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	4b41      	ldr	r3, [pc, #260]	; (8007620 <tcp_receive+0xdd8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d11d      	bne.n	800755e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007522:	4b3e      	ldr	r3, [pc, #248]	; (800761c <tcp_receive+0xdd4>)
 8007524:	891a      	ldrh	r2, [r3, #8]
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	891b      	ldrh	r3, [r3, #8]
 800752a:	429a      	cmp	r2, r3
 800752c:	f240 8148 	bls.w	80077c0 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8007530:	483a      	ldr	r0, [pc, #232]	; (800761c <tcp_receive+0xdd4>)
 8007532:	f7fd fd42 	bl	8004fba <tcp_seg_copy>
 8007536:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8142 	beq.w	80077c4 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <tcp_receive+0xd06>
                    prev->next = cseg;
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	e002      	b.n	8007554 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff f900 	bl	800675c <tcp_oos_insert_segment>
                }
                break;
 800755c:	e132      	b.n	80077c4 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	2b00      	cmp	r3, #0
 8007562:	d117      	bne.n	8007594 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007564:	4b2e      	ldr	r3, [pc, #184]	; (8007620 <tcp_receive+0xdd8>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	da57      	bge.n	8007624 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8007574:	4829      	ldr	r0, [pc, #164]	; (800761c <tcp_receive+0xdd4>)
 8007576:	f7fd fd20 	bl	8004fba <tcp_seg_copy>
 800757a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 8122 	beq.w	80077c8 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800758a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff f8e5 	bl	800675c <tcp_oos_insert_segment>
                  }
                  break;
 8007592:	e119      	b.n	80077c8 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007594:	4b22      	ldr	r3, [pc, #136]	; (8007620 <tcp_receive+0xdd8>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	db3e      	blt.n	8007624 <tcp_receive+0xddc>
 80075a6:	4b1e      	ldr	r3, [pc, #120]	; (8007620 <tcp_receive+0xdd8>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	3301      	adds	r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dc35      	bgt.n	8007624 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80075b8:	4818      	ldr	r0, [pc, #96]	; (800761c <tcp_receive+0xdd4>)
 80075ba:	f7fd fcfe 	bl	8004fba <tcp_seg_copy>
 80075be:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8102 	beq.w	80077cc <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d0:	8912      	ldrh	r2, [r2, #8]
 80075d2:	441a      	add	r2, r3
 80075d4:	4b12      	ldr	r3, [pc, #72]	; (8007620 <tcp_receive+0xdd8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dd12      	ble.n	8007604 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80075de:	4b10      	ldr	r3, [pc, #64]	; (8007620 <tcp_receive+0xdd8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	891b      	ldrh	r3, [r3, #8]
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fc f9fc 	bl	80039fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800760a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7ff f8a5 	bl	800675c <tcp_oos_insert_segment>
                  }
                  break;
 8007612:	e0db      	b.n	80077cc <tcp_receive+0xf84>
 8007614:	20000100 	.word	0x20000100
 8007618:	200000fd 	.word	0x200000fd
 800761c:	200000d0 	.word	0x200000d0
 8007620:	200000f0 	.word	0x200000f0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 80bf 	bne.w	80077ac <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800762e:	4b7c      	ldr	r3, [pc, #496]	; (8007820 <tcp_receive+0xfd8>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800763a:	2b00      	cmp	r3, #0
 800763c:	f340 80b6 	ble.w	80077ac <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	899b      	ldrh	r3, [r3, #12]
 8007646:	b29b      	uxth	r3, r3
 8007648:	4618      	mov	r0, r3
 800764a:	f7fb fa4e 	bl	8002aea <lwip_htons>
 800764e:	4603      	mov	r3, r0
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	f040 80bb 	bne.w	80077d0 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800765a:	4872      	ldr	r0, [pc, #456]	; (8007824 <tcp_receive+0xfdc>)
 800765c:	f7fd fcad 	bl	8004fba <tcp_seg_copy>
 8007660:	4602      	mov	r2, r0
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80b2 	beq.w	80077d4 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007678:	8912      	ldrh	r2, [r2, #8]
 800767a:	441a      	add	r2, r3
 800767c:	4b68      	ldr	r3, [pc, #416]	; (8007820 <tcp_receive+0xfd8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	dd12      	ble.n	80076ac <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007686:	4b66      	ldr	r3, [pc, #408]	; (8007820 <tcp_receive+0xfd8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b29a      	uxth	r2, r3
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	b29b      	uxth	r3, r3
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	b29a      	uxth	r2, r3
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	891b      	ldrh	r3, [r3, #8]
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f7fc f9a8 	bl	80039fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80076ac:	4b5e      	ldr	r3, [pc, #376]	; (8007828 <tcp_receive+0xfe0>)
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	4b5b      	ldr	r3, [pc, #364]	; (8007820 <tcp_receive+0xfd8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	441a      	add	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076c0:	440b      	add	r3, r1
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f340 8085 	ble.w	80077d4 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	899b      	ldrh	r3, [r3, #12]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fb fa08 	bl	8002aea <lwip_htons>
 80076da:	4603      	mov	r3, r0
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01e      	beq.n	8007722 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	899b      	ldrh	r3, [r3, #12]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076f2:	b29c      	uxth	r4, r3
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	899b      	ldrh	r3, [r3, #12]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fb f9f3 	bl	8002aea <lwip_htons>
 8007704:	4603      	mov	r3, r0
 8007706:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800770a:	b29b      	uxth	r3, r3
 800770c:	4618      	mov	r0, r3
 800770e:	f7fb f9ec 	bl	8002aea <lwip_htons>
 8007712:	4603      	mov	r3, r0
 8007714:	461a      	mov	r2, r3
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	4322      	orrs	r2, r4
 800771e:	b292      	uxth	r2, r2
 8007720:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772c:	4413      	add	r3, r2
 800772e:	b299      	uxth	r1, r3
 8007730:	4b3b      	ldr	r3, [pc, #236]	; (8007820 <tcp_receive+0xfd8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	b29a      	uxth	r2, r3
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	1a8a      	subs	r2, r1, r2
 800773c:	b292      	uxth	r2, r2
 800773e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	891b      	ldrh	r3, [r3, #8]
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f7fc f954 	bl	80039fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	891c      	ldrh	r4, [r3, #8]
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	899b      	ldrh	r3, [r3, #12]
 8007762:	b29b      	uxth	r3, r3
 8007764:	4618      	mov	r0, r3
 8007766:	f7fb f9c0 	bl	8002aea <lwip_htons>
 800776a:	4603      	mov	r3, r0
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <tcp_receive+0xf30>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <tcp_receive+0xf32>
 8007778:	2300      	movs	r3, #0
 800777a:	4423      	add	r3, r4
 800777c:	b29a      	uxth	r2, r3
 800777e:	4b2a      	ldr	r3, [pc, #168]	; (8007828 <tcp_receive+0xfe0>)
 8007780:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007782:	4b29      	ldr	r3, [pc, #164]	; (8007828 <tcp_receive+0xfe0>)
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	4b25      	ldr	r3, [pc, #148]	; (8007820 <tcp_receive+0xfd8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	441a      	add	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007796:	440b      	add	r3, r1
 8007798:	429a      	cmp	r2, r3
 800779a:	d01b      	beq.n	80077d4 <tcp_receive+0xf8c>
 800779c:	4b23      	ldr	r3, [pc, #140]	; (800782c <tcp_receive+0xfe4>)
 800779e:	f240 627b 	movw	r2, #1659	; 0x67b
 80077a2:	4923      	ldr	r1, [pc, #140]	; (8007830 <tcp_receive+0xfe8>)
 80077a4:	4823      	ldr	r0, [pc, #140]	; (8007834 <tcp_receive+0xfec>)
 80077a6:	f005 fe17 	bl	800d3d8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80077aa:	e013      	b.n	80077d4 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f47f aeab 	bne.w	8007514 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80077be:	e00f      	b.n	80077e0 <tcp_receive+0xf98>
                break;
 80077c0:	bf00      	nop
 80077c2:	e00d      	b.n	80077e0 <tcp_receive+0xf98>
                break;
 80077c4:	bf00      	nop
 80077c6:	e00b      	b.n	80077e0 <tcp_receive+0xf98>
                  break;
 80077c8:	bf00      	nop
 80077ca:	e009      	b.n	80077e0 <tcp_receive+0xf98>
                  break;
 80077cc:	bf00      	nop
 80077ce:	e007      	b.n	80077e0 <tcp_receive+0xf98>
                  break;
 80077d0:	bf00      	nop
 80077d2:	e005      	b.n	80077e0 <tcp_receive+0xf98>
                break;
 80077d4:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80077d6:	e003      	b.n	80077e0 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fb1b 	bl	8007e14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80077de:	e01a      	b.n	8007816 <tcp_receive+0xfce>
 80077e0:	e019      	b.n	8007816 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80077e2:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <tcp_receive+0xfd8>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	db0a      	blt.n	8007806 <tcp_receive+0xfbe>
 80077f0:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <tcp_receive+0xfd8>)
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80077fc:	440b      	add	r3, r1
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	3301      	adds	r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	dd07      	ble.n	8007816 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7e9b      	ldrb	r3, [r3, #26]
 800780a:	f043 0302 	orr.w	r3, r3, #2
 800780e:	b2da      	uxtb	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8007814:	e7ff      	b.n	8007816 <tcp_receive+0xfce>
 8007816:	bf00      	nop
 8007818:	3734      	adds	r7, #52	; 0x34
 800781a:	46bd      	mov	sp, r7
 800781c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781e:	bf00      	nop
 8007820:	200000f0 	.word	0x200000f0
 8007824:	200000d0 	.word	0x200000d0
 8007828:	200000fa 	.word	0x200000fa
 800782c:	0800ef9c 	.word	0x0800ef9c
 8007830:	0800f268 	.word	0x0800f268
 8007834:	0800efe0 	.word	0x0800efe0

08007838 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800783e:	4b17      	ldr	r3, [pc, #92]	; (800789c <tcp_getoptbyte+0x64>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d005      	beq.n	8007852 <tcp_getoptbyte+0x1a>
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <tcp_getoptbyte+0x68>)
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	4b16      	ldr	r3, [pc, #88]	; (80078a4 <tcp_getoptbyte+0x6c>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d20e      	bcs.n	8007870 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <tcp_getoptbyte+0x70>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3314      	adds	r3, #20
 8007858:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800785a:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <tcp_getoptbyte+0x68>)
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	b291      	uxth	r1, r2
 8007862:	4a0f      	ldr	r2, [pc, #60]	; (80078a0 <tcp_getoptbyte+0x68>)
 8007864:	8011      	strh	r1, [r2, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	4413      	add	r3, r2
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	e010      	b.n	8007892 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <tcp_getoptbyte+0x68>)
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	b291      	uxth	r1, r2
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <tcp_getoptbyte+0x68>)
 800787a:	8011      	strh	r1, [r2, #0]
 800787c:	b2da      	uxtb	r2, r3
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <tcp_getoptbyte+0x6c>)
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <tcp_getoptbyte+0x64>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	4413      	add	r3, r2
 8007890:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007892:	4618      	mov	r0, r3
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr
 800789c:	200000e8 	.word	0x200000e8
 80078a0:	200000ec 	.word	0x200000ec
 80078a4:	200000e6 	.word	0x200000e6
 80078a8:	200000e0 	.word	0x200000e0

080078ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80078b4:	4b2d      	ldr	r3, [pc, #180]	; (800796c <tcp_parseopt+0xc0>)
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d053      	beq.n	8007964 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80078bc:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <tcp_parseopt+0xc4>)
 80078be:	2200      	movs	r2, #0
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	e043      	b.n	800794c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80078c4:	f7ff ffb8 	bl	8007838 <tcp_getoptbyte>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d03c      	beq.n	800794c <tcp_parseopt+0xa0>
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d002      	beq.n	80078dc <tcp_parseopt+0x30>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d03f      	beq.n	800795a <tcp_parseopt+0xae>
 80078da:	e026      	b.n	800792a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80078dc:	f7ff ffac 	bl	8007838 <tcp_getoptbyte>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d13b      	bne.n	800795e <tcp_parseopt+0xb2>
 80078e6:	4b22      	ldr	r3, [pc, #136]	; (8007970 <tcp_parseopt+0xc4>)
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	3302      	adds	r3, #2
 80078ec:	4a1f      	ldr	r2, [pc, #124]	; (800796c <tcp_parseopt+0xc0>)
 80078ee:	8812      	ldrh	r2, [r2, #0]
 80078f0:	4293      	cmp	r3, r2
 80078f2:	dc34      	bgt.n	800795e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80078f4:	f7ff ffa0 	bl	8007838 <tcp_getoptbyte>
 80078f8:	4603      	mov	r3, r0
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8007900:	f7ff ff9a 	bl	8007838 <tcp_getoptbyte>
 8007904:	4603      	mov	r3, r0
 8007906:	b29a      	uxth	r2, r3
 8007908:	89bb      	ldrh	r3, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800790e:	89bb      	ldrh	r3, [r7, #12]
 8007910:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007914:	d804      	bhi.n	8007920 <tcp_parseopt+0x74>
 8007916:	89bb      	ldrh	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <tcp_parseopt+0x74>
 800791c:	89ba      	ldrh	r2, [r7, #12]
 800791e:	e001      	b.n	8007924 <tcp_parseopt+0x78>
 8007920:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8007928:	e010      	b.n	800794c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800792a:	f7ff ff85 	bl	8007838 <tcp_getoptbyte>
 800792e:	4603      	mov	r3, r0
 8007930:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d914      	bls.n	8007962 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	b29a      	uxth	r2, r3
 800793c:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <tcp_parseopt+0xc4>)
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	4413      	add	r3, r2
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b02      	subs	r3, #2
 8007946:	b29a      	uxth	r2, r3
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <tcp_parseopt+0xc4>)
 800794a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <tcp_parseopt+0xc4>)
 800794e:	881a      	ldrh	r2, [r3, #0]
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <tcp_parseopt+0xc0>)
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d3b5      	bcc.n	80078c4 <tcp_parseopt+0x18>
 8007958:	e004      	b.n	8007964 <tcp_parseopt+0xb8>
        return;
 800795a:	bf00      	nop
 800795c:	e002      	b.n	8007964 <tcp_parseopt+0xb8>
          return;
 800795e:	bf00      	nop
 8007960:	e000      	b.n	8007964 <tcp_parseopt+0xb8>
          return;
 8007962:	bf00      	nop
      }
    }
  }
}
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	200000e4 	.word	0x200000e4
 8007970:	200000ec 	.word	0x200000ec

08007974 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <tcp_trigger_input_pcb_close+0x1c>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f043 0310 	orr.w	r3, r3, #16
 8007980:	b2da      	uxtb	r2, r3
 8007982:	4b03      	ldr	r3, [pc, #12]	; (8007990 <tcp_trigger_input_pcb_close+0x1c>)
 8007984:	701a      	strb	r2, [r3, #0]
}
 8007986:	bf00      	nop
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	200000fd 	.word	0x200000fd

08007994 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	607b      	str	r3, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	817b      	strh	r3, [r7, #10]
 80079a2:	4613      	mov	r3, r2
 80079a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80079a6:	897a      	ldrh	r2, [r7, #10]
 80079a8:	893b      	ldrh	r3, [r7, #8]
 80079aa:	4413      	add	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3314      	adds	r3, #20
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2200      	movs	r2, #0
 80079b4:	4619      	mov	r1, r3
 80079b6:	2001      	movs	r0, #1
 80079b8:	f7fb fe22 	bl	8003600 <pbuf_alloc>
 80079bc:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d057      	beq.n	8007a74 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	895b      	ldrh	r3, [r3, #10]
 80079c8:	461a      	mov	r2, r3
 80079ca:	897b      	ldrh	r3, [r7, #10]
 80079cc:	3314      	adds	r3, #20
 80079ce:	429a      	cmp	r2, r3
 80079d0:	da05      	bge.n	80079de <tcp_output_alloc_header+0x4a>
 80079d2:	4b2b      	ldr	r3, [pc, #172]	; (8007a80 <tcp_output_alloc_header+0xec>)
 80079d4:	2273      	movs	r2, #115	; 0x73
 80079d6:	492b      	ldr	r1, [pc, #172]	; (8007a84 <tcp_output_alloc_header+0xf0>)
 80079d8:	482b      	ldr	r0, [pc, #172]	; (8007a88 <tcp_output_alloc_header+0xf4>)
 80079da:	f005 fcfd 	bl	800d3d8 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8adb      	ldrh	r3, [r3, #22]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fb f87e 	bl	8002aea <lwip_htons>
 80079ee:	4603      	mov	r3, r0
 80079f0:	461a      	mov	r2, r3
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8b1b      	ldrh	r3, [r3, #24]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fb f875 	bl	8002aea <lwip_htons>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fb f876 	bl	8002b04 <lwip_htonl>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8007a1e:	897b      	ldrh	r3, [r7, #10]
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3305      	adds	r3, #5
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	031b      	lsls	r3, r3, #12
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f043 0310 	orr.w	r3, r3, #16
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fb f859 	bl	8002aea <lwip_htons>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fb f850 	bl	8002aea <lwip_htons>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2200      	movs	r2, #0
 8007a56:	741a      	strb	r2, [r3, #16]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	749a      	strb	r2, [r3, #18]
 8007a62:	2200      	movs	r2, #0
 8007a64:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8007a6e:	441a      	add	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8007a74:	697b      	ldr	r3, [r7, #20]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	0800f324 	.word	0x0800f324
 8007a84:	0800f358 	.word	0x0800f358
 8007a88:	0800f388 	.word	0x0800f388

08007a8c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d02d      	beq.n	8007af8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	e002      	b.n	8007aaa <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f8      	bne.n	8007aa4 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	899b      	ldrh	r3, [r3, #12]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fb f815 	bl	8002aea <lwip_htons>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d116      	bne.n	8007af8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	899b      	ldrh	r3, [r3, #12]
 8007ad0:	b29c      	uxth	r4, r3
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	f7fb f809 	bl	8002aea <lwip_htons>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4322      	orrs	r2, r4
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7e9b      	ldrb	r3, [r3, #26]
 8007aea:	f043 0320 	orr.w	r3, r3, #32
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e004      	b.n	8007b02 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007af8:	2101      	movs	r1, #1
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f88e 	bl	8007c1c <tcp_enqueue_flags>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd90      	pop	{r4, r7, pc}
	...

08007b0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007b1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007b2a:	2003      	movs	r0, #3
 8007b2c:	f7fb fb86 	bl	800323c <memp_malloc>
 8007b30:	6138      	str	r0, [r7, #16]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8007b38:	68b8      	ldr	r0, [r7, #8]
 8007b3a:	f7fc f8d3 	bl	8003ce4 <pbuf_free>
    return NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e061      	b.n	8007c06 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007b48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	891a      	ldrh	r2, [r3, #8]
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d205      	bcs.n	8007b6e <tcp_create_segment+0x62>
 8007b62:	4b2b      	ldr	r3, [pc, #172]	; (8007c10 <tcp_create_segment+0x104>)
 8007b64:	22ba      	movs	r2, #186	; 0xba
 8007b66:	492b      	ldr	r1, [pc, #172]	; (8007c14 <tcp_create_segment+0x108>)
 8007b68:	482b      	ldr	r0, [pc, #172]	; (8007c18 <tcp_create_segment+0x10c>)
 8007b6a:	f005 fc35 	bl	800d3d8 <iprintf>
  seg->len = p->tot_len - optlen;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	891a      	ldrh	r2, [r3, #8]
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8007b7e:	2114      	movs	r1, #20
 8007b80:	68b8      	ldr	r0, [r7, #8]
 8007b82:	f7fc f88b 	bl	8003c9c <pbuf_header>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d004      	beq.n	8007b96 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8007b8c:	6938      	ldr	r0, [r7, #16]
 8007b8e:	f7fd f9fc 	bl	8004f8a <tcp_seg_free>
    return NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e037      	b.n	8007c06 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8ada      	ldrh	r2, [r3, #22]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	68dc      	ldr	r4, [r3, #12]
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7fa ff9e 	bl	8002aea <lwip_htons>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8b1a      	ldrh	r2, [r3, #24]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	68dc      	ldr	r4, [r3, #12]
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7fa ff95 	bl	8002aea <lwip_htons>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	68dc      	ldr	r4, [r3, #12]
 8007bc8:	6838      	ldr	r0, [r7, #0]
 8007bca:	f7fa ff9b 	bl	8002b04 <lwip_htonl>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	089b      	lsrs	r3, r3, #2
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3305      	adds	r3, #5
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	031b      	lsls	r3, r3, #12
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4313      	orrs	r3, r2
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	68dc      	ldr	r4, [r3, #12]
 8007bee:	4610      	mov	r0, r2
 8007bf0:	f7fa ff7b 	bl	8002aea <lwip_htons>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	749a      	strb	r2, [r3, #18]
 8007c00:	2200      	movs	r2, #0
 8007c02:	74da      	strb	r2, [r3, #19]
  return seg;
 8007c04:	693b      	ldr	r3, [r7, #16]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd90      	pop	{r4, r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	0800f324 	.word	0x0800f324
 8007c14:	0800f3b0 	.word	0x0800f3b0
 8007c18:	0800f388 	.word	0x0800f388

08007c1c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	; 0x28
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <tcp_enqueue_flags+0x2c>
 8007c3a:	4b6f      	ldr	r3, [pc, #444]	; (8007df8 <tcp_enqueue_flags+0x1dc>)
 8007c3c:	f240 321b 	movw	r2, #795	; 0x31b
 8007c40:	496e      	ldr	r1, [pc, #440]	; (8007dfc <tcp_enqueue_flags+0x1e0>)
 8007c42:	486f      	ldr	r0, [pc, #444]	; (8007e00 <tcp_enqueue_flags+0x1e4>)
 8007c44:	f005 fbc8 	bl	800d3d8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d806      	bhi.n	8007c60 <tcp_enqueue_flags+0x44>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c58:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d90e      	bls.n	8007c7e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	7e9b      	ldrb	r3, [r3, #26]
 8007c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7c:	e0b7      	b.n	8007dee <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	f7fb fcad 	bl	8003600 <pbuf_alloc>
 8007ca6:	6138      	str	r0, [r7, #16]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	7e9b      	ldrb	r3, [r3, #26]
 8007cb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8007cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc0:	e095      	b.n	8007dee <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	895a      	ldrh	r2, [r3, #10]
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d206      	bcs.n	8007cdc <tcp_enqueue_flags+0xc0>
 8007cce:	4b4a      	ldr	r3, [pc, #296]	; (8007df8 <tcp_enqueue_flags+0x1dc>)
 8007cd0:	f240 3241 	movw	r2, #833	; 0x341
 8007cd4:	494b      	ldr	r1, [pc, #300]	; (8007e04 <tcp_enqueue_flags+0x1e8>)
 8007cd6:	484a      	ldr	r0, [pc, #296]	; (8007e00 <tcp_enqueue_flags+0x1e4>)
 8007cd8:	f005 fb7e 	bl	800d3d8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	7ffb      	ldrb	r3, [r7, #31]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	6939      	ldr	r1, [r7, #16]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff0e 	bl	8007b0c <tcp_create_segment>
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d109      	bne.n	8007d0c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	7e9b      	ldrb	r3, [r3, #26]
 8007cfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8007d06:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0a:	e070      	b.n	8007dee <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d006      	beq.n	8007d26 <tcp_enqueue_flags+0x10a>
 8007d18:	4b37      	ldr	r3, [pc, #220]	; (8007df8 <tcp_enqueue_flags+0x1dc>)
 8007d1a:	f240 3249 	movw	r2, #841	; 0x349
 8007d1e:	493a      	ldr	r1, [pc, #232]	; (8007e08 <tcp_enqueue_flags+0x1ec>)
 8007d20:	4837      	ldr	r0, [pc, #220]	; (8007e00 <tcp_enqueue_flags+0x1e4>)
 8007d22:	f005 fb59 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	891b      	ldrh	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <tcp_enqueue_flags+0x120>
 8007d2e:	4b32      	ldr	r3, [pc, #200]	; (8007df8 <tcp_enqueue_flags+0x1dc>)
 8007d30:	f240 324a 	movw	r2, #842	; 0x34a
 8007d34:	4935      	ldr	r1, [pc, #212]	; (8007e0c <tcp_enqueue_flags+0x1f0>)
 8007d36:	4832      	ldr	r0, [pc, #200]	; (8007e00 <tcp_enqueue_flags+0x1e4>)
 8007d38:	f005 fb4e 	bl	800d3d8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	669a      	str	r2, [r3, #104]	; 0x68
 8007d4a:	e00d      	b.n	8007d68 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	e002      	b.n	8007d5a <tcp_enqueue_flags+0x13e>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f8      	bne.n	8007d54 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d104      	bne.n	8007d84 <tcp_enqueue_flags+0x168>
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d004      	beq.n	8007d8e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d006      	beq.n	8007da6 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7e9b      	ldrb	r3, [r3, #26]
 8007d9c:	f043 0320 	orr.w	r3, r3, #32
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fc f82e 	bl	8003e0c <pbuf_clen>
 8007db0:	4603      	mov	r3, r0
 8007db2:	461a      	mov	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dba:	4413      	add	r3, r2
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00e      	beq.n	8007dec <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <tcp_enqueue_flags+0x1d0>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <tcp_enqueue_flags+0x1d0>
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <tcp_enqueue_flags+0x1dc>)
 8007de0:	f240 326d 	movw	r2, #877	; 0x36d
 8007de4:	490a      	ldr	r1, [pc, #40]	; (8007e10 <tcp_enqueue_flags+0x1f4>)
 8007de6:	4806      	ldr	r0, [pc, #24]	; (8007e00 <tcp_enqueue_flags+0x1e4>)
 8007de8:	f005 faf6 	bl	800d3d8 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	0800f324 	.word	0x0800f324
 8007dfc:	0800f628 	.word	0x0800f628
 8007e00:	0800f388 	.word	0x0800f388
 8007e04:	0800f680 	.word	0x0800f680
 8007e08:	0800f6bc 	.word	0x0800f6bc
 8007e0c:	0800f6d4 	.word	0x0800f6d4
 8007e10:	0800f700 	.word	0x0800f700

08007e14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b08b      	sub	sp, #44	; 0x2c
 8007e18:	af04      	add	r7, sp, #16
 8007e1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8007e20:	7dbb      	ldrb	r3, [r7, #22]
 8007e22:	b29c      	uxth	r4, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fa fe6b 	bl	8002b04 <lwip_htonl>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2200      	movs	r2, #0
 8007e32:	4621      	mov	r1, r4
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fdad 	bl	8007994 <tcp_output_alloc_header>
 8007e3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7e9b      	ldrb	r3, [r3, #26]
 8007e46:	f043 0303 	orr.w	r3, r3, #3
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8007e50:	f06f 0301 	mvn.w	r3, #1
 8007e54:	e036      	b.n	8007ec4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f004 f8f6 	bl	800c04c <ip4_route>
 8007e60:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8007e68:	23fc      	movs	r3, #252	; 0xfc
 8007e6a:	75fb      	strb	r3, [r7, #23]
 8007e6c:	e012      	b.n	8007e94 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	1d18      	adds	r0, r3, #4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7a9c      	ldrb	r4, [r3, #10]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7a5b      	ldrb	r3, [r3, #9]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	9202      	str	r2, [sp, #8]
 8007e80:	2206      	movs	r2, #6
 8007e82:	9201      	str	r2, [sp, #4]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4623      	mov	r3, r4
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6938      	ldr	r0, [r7, #16]
 8007e8c:	f004 faa4 	bl	800c3d8 <ip4_output_if>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8007e94:	6938      	ldr	r0, [r7, #16]
 8007e96:	f7fb ff25 	bl	8003ce4 <pbuf_free>

  if (err != ERR_OK) {
 8007e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7e9b      	ldrb	r3, [r3, #26]
 8007ea6:	f043 0303 	orr.w	r3, r3, #3
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	769a      	strb	r2, [r3, #26]
 8007eb0:	e006      	b.n	8007ec0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7e9b      	ldrb	r3, [r3, #26]
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8007ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd90      	pop	{r4, r7, pc}

08007ecc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8007ecc:	b5b0      	push	{r4, r5, r7, lr}
 8007ece:	b08a      	sub	sp, #40	; 0x28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7d1b      	ldrb	r3, [r3, #20]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d106      	bne.n	8007eea <tcp_output+0x1e>
 8007edc:	4b9b      	ldr	r3, [pc, #620]	; (800814c <tcp_output+0x280>)
 8007ede:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8007ee2:	499b      	ldr	r1, [pc, #620]	; (8008150 <tcp_output+0x284>)
 8007ee4:	489b      	ldr	r0, [pc, #620]	; (8008154 <tcp_output+0x288>)
 8007ee6:	f005 fa77 	bl	800d3d8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8007eea:	4b9b      	ldr	r3, [pc, #620]	; (8008158 <tcp_output+0x28c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d101      	bne.n	8007ef8 <tcp_output+0x2c>
    return ERR_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e1cf      	b.n	8008298 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d203      	bcs.n	8007f10 <tcp_output+0x44>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f0e:	e002      	b.n	8007f16 <tcp_output+0x4a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007f16:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	7e9b      	ldrb	r3, [r3, #26]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d017      	beq.n	8007f5a <tcp_output+0x8e>
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00f      	beq.n	8007f50 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fa fde4 	bl	8002b04 <lwip_htonl>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f46:	8912      	ldrh	r2, [r2, #8]
 8007f48:	4413      	add	r3, r2
     (seg == NULL ||
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d204      	bcs.n	8007f5a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff ff5f 	bl	8007e14 <tcp_send_empty_ack>
 8007f56:	4603      	mov	r3, r0
 8007f58:	e19e      	b.n	8008298 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8007f66:	e002      	b.n	8007f6e <tcp_output+0xa2>
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	623b      	str	r3, [r7, #32]
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f8      	bne.n	8007f68 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f004 f866 	bl	800c04c <ip4_route>
 8007f80:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <tcp_output+0xc2>
    return ERR_RTE;
 8007f88:	f06f 0303 	mvn.w	r3, #3
 8007f8c:	e184      	b.n	8008298 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <tcp_output+0xd0>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d111      	bne.n	8007fc0 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <tcp_output+0xdc>
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	e000      	b.n	8007faa <tcp_output+0xde>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <tcp_output+0xec>
      return ERR_RTE;
 8007fb2:	f06f 0303 	mvn.w	r3, #3
 8007fb6:	e16f      	b.n	8008298 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 813e 	beq.w	8008244 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fa fd98 	bl	8002b04 <lwip_htonl>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fde:	8912      	ldrh	r2, [r2, #8]
 8007fe0:	4413      	add	r3, r2
  if (seg != NULL &&
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	f080 812d 	bcs.w	8008244 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8129 	beq.w	8008244 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	f040 8121 	bne.w	8008244 <tcp_output+0x378>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008006:	2b00      	cmp	r3, #0
 8008008:	f040 811c 	bne.w	8008244 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 812b 	bne.w	800826e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8008028:	e121      	b.n	800826e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	899b      	ldrh	r3, [r3, #12]
 8008030:	b29b      	uxth	r3, r3
 8008032:	4618      	mov	r0, r3
 8008034:	f7fa fd59 	bl	8002aea <lwip_htons>
 8008038:	4603      	mov	r3, r0
 800803a:	f003 0304 	and.w	r3, r3, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	d006      	beq.n	8008050 <tcp_output+0x184>
 8008042:	4b42      	ldr	r3, [pc, #264]	; (800814c <tcp_output+0x280>)
 8008044:	f240 4246 	movw	r2, #1094	; 0x446
 8008048:	4944      	ldr	r1, [pc, #272]	; (800815c <tcp_output+0x290>)
 800804a:	4842      	ldr	r0, [pc, #264]	; (8008154 <tcp_output+0x288>)
 800804c:	f005 f9c4 	bl	800d3d8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01f      	beq.n	8008098 <tcp_output+0x1cc>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	7e9b      	ldrb	r3, [r3, #26]
 800805c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8008060:	2b00      	cmp	r3, #0
 8008062:	d119      	bne.n	8008098 <tcp_output+0x1cc>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <tcp_output+0x1b8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d110      	bne.n	8008098 <tcp_output+0x1cc>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800807a:	891a      	ldrh	r2, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008080:	429a      	cmp	r2, r3
 8008082:	d209      	bcs.n	8008098 <tcp_output+0x1cc>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <tcp_output+0x1cc>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008094:	2b08      	cmp	r3, #8
 8008096:	d901      	bls.n	800809c <tcp_output+0x1d0>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <tcp_output+0x1d2>
 800809c:	2300      	movs	r3, #0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7e9b      	ldrb	r3, [r3, #26]
 80080a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80e1 	beq.w	8008272 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7d1b      	ldrb	r3, [r3, #20]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d00d      	beq.n	80080d4 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	899b      	ldrh	r3, [r3, #12]
 80080be:	b29c      	uxth	r4, r3
 80080c0:	2010      	movs	r0, #16
 80080c2:	f7fa fd12 	bl	8002aea <lwip_htons>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	4322      	orrs	r2, r4
 80080d0:	b292      	uxth	r2, r2
 80080d2:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080da:	f000 f8e1 	bl	80082a0 <tcp_output_segment>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80080e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	7e9b      	ldrb	r3, [r3, #26]
 80080ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	769a      	strb	r2, [r3, #26]
      return err;
 80080f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080fc:	e0cc      	b.n	8008298 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7d1b      	ldrb	r3, [r3, #20]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d006      	beq.n	800811c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7e9b      	ldrb	r3, [r3, #26]
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	b2da      	uxtb	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4618      	mov	r0, r3
 8008124:	f7fa fcee 	bl	8002b04 <lwip_htonl>
 8008128:	4604      	mov	r4, r0
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	891b      	ldrh	r3, [r3, #8]
 800812e:	461d      	mov	r5, r3
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	899b      	ldrh	r3, [r3, #12]
 8008136:	b29b      	uxth	r3, r3
 8008138:	4618      	mov	r0, r3
 800813a:	f7fa fcd6 	bl	8002aea <lwip_htons>
 800813e:	4603      	mov	r3, r0
 8008140:	f003 0303 	and.w	r3, r3, #3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <tcp_output+0x294>
 8008148:	2301      	movs	r3, #1
 800814a:	e00a      	b.n	8008162 <tcp_output+0x296>
 800814c:	0800f324 	.word	0x0800f324
 8008150:	0800f728 	.word	0x0800f728
 8008154:	0800f388 	.word	0x0800f388
 8008158:	20008040 	.word	0x20008040
 800815c:	0800f750 	.word	0x0800f750
 8008160:	2300      	movs	r3, #0
 8008162:	442b      	add	r3, r5
 8008164:	4423      	add	r3, r4
 8008166:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	da02      	bge.n	800817a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	891b      	ldrh	r3, [r3, #8]
 800817e:	461c      	mov	r4, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	899b      	ldrh	r3, [r3, #12]
 8008186:	b29b      	uxth	r3, r3
 8008188:	4618      	mov	r0, r3
 800818a:	f7fa fcae 	bl	8002aea <lwip_htons>
 800818e:	4603      	mov	r3, r0
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <tcp_output+0x2d0>
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <tcp_output+0x2d2>
 800819c:	2300      	movs	r3, #0
 800819e:	4423      	add	r3, r4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d049      	beq.n	8008238 <tcp_output+0x36c>
      seg->next = NULL;
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d105      	bne.n	80081be <tcp_output+0x2f2>
        pcb->unacked = seg;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	623b      	str	r3, [r7, #32]
 80081bc:	e03f      	b.n	800823e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fa fc9d 	bl	8002b04 <lwip_htonl>
 80081ca:	4604      	mov	r4, r0
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fa fc96 	bl	8002b04 <lwip_htonl>
 80081d8:	4603      	mov	r3, r0
 80081da:	1ae3      	subs	r3, r4, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	da24      	bge.n	800822a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	336c      	adds	r3, #108	; 0x6c
 80081e4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80081e6:	e002      	b.n	80081ee <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d011      	beq.n	800821a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fa fc80 	bl	8002b04 <lwip_htonl>
 8008204:	4604      	mov	r4, r0
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	f7fa fc79 	bl	8002b04 <lwip_htonl>
 8008212:	4603      	mov	r3, r0
 8008214:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008216:	2b00      	cmp	r3, #0
 8008218:	dbe6      	blt.n	80081e8 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e009      	b.n	800823e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800822e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	623b      	str	r3, [r7, #32]
 8008236:	e002      	b.n	800823e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800823a:	f7fc fea6 	bl	8004f8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d015      	beq.n	8008276 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4618      	mov	r0, r3
 8008252:	f7fa fc57 	bl	8002b04 <lwip_htonl>
 8008256:	4602      	mov	r2, r0
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008260:	8912      	ldrh	r2, [r2, #8]
 8008262:	4413      	add	r3, r2
  while (seg != NULL &&
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	429a      	cmp	r2, r3
 8008268:	f4bf aedf 	bcs.w	800802a <tcp_output+0x15e>
  }
output_done:
 800826c:	e003      	b.n	8008276 <tcp_output+0x3aa>
    goto output_done;
 800826e:	bf00      	nop
 8008270:	e002      	b.n	8008278 <tcp_output+0x3ac>
      break;
 8008272:	bf00      	nop
 8008274:	e000      	b.n	8008278 <tcp_output+0x3ac>
output_done:
 8008276:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800827c:	2b00      	cmp	r3, #0
 800827e:	d103      	bne.n	8008288 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7e9b      	ldrb	r3, [r3, #26]
 800828c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3728      	adds	r7, #40	; 0x28
 800829c:	46bd      	mov	sp, r7
 800829e:	bdb0      	pop	{r4, r5, r7, pc}

080082a0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80082a0:	b5b0      	push	{r4, r5, r7, lr}
 80082a2:	b08c      	sub	sp, #48	; 0x30
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	89db      	ldrh	r3, [r3, #14]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d001      	beq.n	80082ba <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e08b      	b.n	80083d2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68dc      	ldr	r4, [r3, #12]
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7fa fc1e 	bl	8002b04 <lwip_htonl>
 80082c8:	4603      	mov	r3, r0
 80082ca:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68dc      	ldr	r4, [r3, #12]
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fa fc08 	bl	8002aea <lwip_htons>
 80082da:	4603      	mov	r3, r0
 80082dc:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80082e6:	441a      	add	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	3314      	adds	r3, #20
 80082f2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	7a9b      	ldrb	r3, [r3, #10]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d014      	beq.n	800832a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	f44f 7006 	mov.w	r0, #536	; 0x218
 800830a:	f7fd f8a7 	bl	800545c <tcp_eff_send_mss_impl>
 800830e:	4603      	mov	r3, r0
 8008310:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008312:	8b7b      	ldrh	r3, [r7, #26]
 8008314:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8008318:	4618      	mov	r0, r3
 800831a:	f7fa fbf3 	bl	8002b04 <lwip_htonl>
 800831e:	4602      	mov	r2, r0
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	3304      	adds	r3, #4
 8008328:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008330:	2b00      	cmp	r3, #0
 8008332:	da02      	bge.n	800833a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2200      	movs	r2, #0
 8008338:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10c      	bne.n	800835c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8008342:	4b26      	ldr	r3, [pc, #152]	; (80083dc <tcp_output_segment+0x13c>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fa fbd7 	bl	8002b04 <lwip_htonl>
 8008356:	4602      	mov	r2, r0
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	461a      	mov	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	8959      	ldrh	r1, [r3, #10]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	8b3a      	ldrh	r2, [r7, #24]
 8008378:	1a8a      	subs	r2, r1, r2
 800837a:	b292      	uxth	r2, r2
 800837c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	8919      	ldrh	r1, [r3, #8]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	8b3a      	ldrh	r2, [r7, #24]
 800838a:	1a8a      	subs	r2, r1, r2
 800838c:	b292      	uxth	r2, r2
 800838e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	68d2      	ldr	r2, [r2, #12]
 8008398:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	741a      	strb	r2, [r3, #16]
 80083a2:	2200      	movs	r2, #0
 80083a4:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6858      	ldr	r0, [r3, #4]
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	1d1c      	adds	r4, r3, #4
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	7a9d      	ldrb	r5, [r3, #10]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	7a5b      	ldrb	r3, [r3, #9]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	9202      	str	r2, [sp, #8]
 80083bc:	2206      	movs	r2, #6
 80083be:	9201      	str	r2, [sp, #4]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	462b      	mov	r3, r5
 80083c4:	4622      	mov	r2, r4
 80083c6:	f004 f807 	bl	800c3d8 <ip4_output_if>
 80083ca:	4603      	mov	r3, r0
 80083cc:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80083ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3720      	adds	r7, #32
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bdb0      	pop	{r4, r5, r7, pc}
 80083da:	bf00      	nop
 80083dc:	20008030 	.word	0x20008030

080083e0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08c      	sub	sp, #48	; 0x30
 80083e4:	af04      	add	r7, sp, #16
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80083ee:	2200      	movs	r2, #0
 80083f0:	2114      	movs	r1, #20
 80083f2:	2001      	movs	r0, #1
 80083f4:	f7fb f904 	bl	8003600 <pbuf_alloc>
 80083f8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d05b      	beq.n	80084b8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	895b      	ldrh	r3, [r3, #10]
 8008404:	2b13      	cmp	r3, #19
 8008406:	d806      	bhi.n	8008416 <tcp_rst+0x36>
 8008408:	4b2d      	ldr	r3, [pc, #180]	; (80084c0 <tcp_rst+0xe0>)
 800840a:	f240 524d 	movw	r2, #1357	; 0x54d
 800840e:	492d      	ldr	r1, [pc, #180]	; (80084c4 <tcp_rst+0xe4>)
 8008410:	482d      	ldr	r0, [pc, #180]	; (80084c8 <tcp_rst+0xe8>)
 8008412:	f004 ffe1 	bl	800d3d8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800841c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800841e:	4618      	mov	r0, r3
 8008420:	f7fa fb63 	bl	8002aea <lwip_htons>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800842c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800842e:	4618      	mov	r0, r3
 8008430:	f7fa fb5b 	bl	8002aea <lwip_htons>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7fa fb61 	bl	8002b04 <lwip_htonl>
 8008442:	4602      	mov	r2, r0
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008448:	68b8      	ldr	r0, [r7, #8]
 800844a:	f7fa fb5b 	bl	8002b04 <lwip_htonl>
 800844e:	4602      	mov	r2, r0
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008454:	f245 0014 	movw	r0, #20500	; 0x5014
 8008458:	f7fa fb47 	bl	8002aea <lwip_htons>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2200      	movs	r2, #0
 8008468:	f042 0208 	orr.w	r2, r2, #8
 800846c:	739a      	strb	r2, [r3, #14]
 800846e:	2200      	movs	r2, #0
 8008470:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008474:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	2200      	movs	r2, #0
 800847a:	741a      	strb	r2, [r3, #16]
 800847c:	2200      	movs	r2, #0
 800847e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2200      	movs	r2, #0
 8008484:	749a      	strb	r2, [r3, #18]
 8008486:	2200      	movs	r2, #0
 8008488:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800848a:	6838      	ldr	r0, [r7, #0]
 800848c:	f003 fdde 	bl	800c04c <ip4_route>
 8008490:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	9302      	str	r3, [sp, #8]
 800849c:	2306      	movs	r3, #6
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	2300      	movs	r3, #0
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	23ff      	movs	r3, #255	; 0xff
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	69f8      	ldr	r0, [r7, #28]
 80084ac:	f003 ff94 	bl	800c3d8 <ip4_output_if>
  }
  pbuf_free(p);
 80084b0:	69f8      	ldr	r0, [r7, #28]
 80084b2:	f7fb fc17 	bl	8003ce4 <pbuf_free>
 80084b6:	e000      	b.n	80084ba <tcp_rst+0xda>
    return;
 80084b8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	0800f324 	.word	0x0800f324
 80084c4:	0800f358 	.word	0x0800f358
 80084c8:	0800f388 	.word	0x0800f388

080084cc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d029      	beq.n	8008530 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e002      	b.n	80084ea <tcp_rexmit_rto+0x1e>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f8      	bne.n	80084e4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800850e:	2bff      	cmp	r3, #255	; 0xff
 8008510:	d007      	beq.n	8008522 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008518:	3301      	adds	r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff fccf 	bl	8007ecc <tcp_output>
 800852e:	e000      	b.n	8008532 <tcp_rexmit_rto+0x66>
    return;
 8008530:	bf00      	nop
}
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d043      	beq.n	80085d0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800854c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3368      	adds	r3, #104	; 0x68
 800855a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800855c:	e002      	b.n	8008564 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d011      	beq.n	8008590 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4618      	mov	r0, r3
 8008576:	f7fa fac5 	bl	8002b04 <lwip_htonl>
 800857a:	4604      	mov	r4, r0
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	4618      	mov	r0, r3
 8008584:	f7fa fabe 	bl	8002b04 <lwip_htonl>
 8008588:	4603      	mov	r3, r0
 800858a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800858c:	2b00      	cmp	r3, #0
 800858e:	dbe6      	blt.n	800855e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085b4:	2bff      	cmp	r3, #255	; 0xff
 80085b6:	d007      	beq.n	80085c8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085be:	3301      	adds	r3, #1
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	635a      	str	r2, [r3, #52]	; 0x34
 80085ce:	e000      	b.n	80085d2 <tcp_rexmit+0x9a>
    return;
 80085d0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd90      	pop	{r4, r7, pc}

080085d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d04a      	beq.n	800867e <tcp_rexmit_fast+0xa6>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	7e9b      	ldrb	r3, [r3, #26]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d144      	bne.n	800867e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff ff9f 	bl	8008538 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008606:	429a      	cmp	r2, r3
 8008608:	d207      	bcs.n	800861a <tcp_rexmit_fast+0x42>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008610:	0fda      	lsrs	r2, r3, #31
 8008612:	4413      	add	r3, r2
 8008614:	105b      	asrs	r3, r3, #1
 8008616:	b29b      	uxth	r3, r3
 8008618:	e006      	b.n	8008628 <tcp_rexmit_fast+0x50>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008620:	0fda      	lsrs	r2, r3, #31
 8008622:	4413      	add	r3, r2
 8008624:	105b      	asrs	r3, r3, #1
 8008626:	b29b      	uxth	r3, r3
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	429a      	cmp	r2, r3
 800863e:	d206      	bcs.n	800864e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008658:	4619      	mov	r1, r3
 800865a:	0049      	lsls	r1, r1, #1
 800865c:	440b      	add	r3, r1
 800865e:	b29b      	uxth	r3, r3
 8008660:	4413      	add	r3, r2
 8008662:	b29a      	uxth	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	7e9b      	ldrb	r3, [r3, #26]
 800866e:	f043 0304 	orr.w	r3, r3, #4
 8008672:	b2da      	uxtb	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b08a      	sub	sp, #40	; 0x28
 800868a:	af04      	add	r7, sp, #16
 800868c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008692:	3b01      	subs	r3, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f7fa fa35 	bl	8002b04 <lwip_htonl>
 800869a:	4603      	mov	r3, r0
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff f977 	bl	8007994 <tcp_output_alloc_header>
 80086a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80086ae:	f04f 33ff 	mov.w	r3, #4294967295
 80086b2:	e021      	b.n	80086f8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4618      	mov	r0, r3
 80086ba:	f003 fcc7 	bl	800c04c <ip4_route>
 80086be:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <tcp_keepalive+0x46>
    err = ERR_RTE;
 80086c6:	23fc      	movs	r3, #252	; 0xfc
 80086c8:	75fb      	strb	r3, [r7, #23]
 80086ca:	e010      	b.n	80086ee <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	1d1a      	adds	r2, r3, #4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7a98      	ldrb	r0, [r3, #10]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	2306      	movs	r3, #6
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	2300      	movs	r3, #0
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4603      	mov	r3, r0
 80086e4:	6938      	ldr	r0, [r7, #16]
 80086e6:	f003 fe77 	bl	800c3d8 <ip4_output_if>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80086ee:	6938      	ldr	r0, [r7, #16]
 80086f0:	f7fb faf8 	bl	8003ce4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80086f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008700:	b590      	push	{r4, r7, lr}
 8008702:	b08f      	sub	sp, #60	; 0x3c
 8008704:	af04      	add	r7, sp, #16
 8008706:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800870c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008718:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e085      	b.n	8008830 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	899b      	ldrh	r3, [r3, #12]
 800872a:	b29b      	uxth	r3, r3
 800872c:	4618      	mov	r0, r3
 800872e:	f7fa f9dc 	bl	8002aea <lwip_htons>
 8008732:	4603      	mov	r3, r0
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <tcp_zero_window_probe+0x48>
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	891b      	ldrh	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <tcp_zero_window_probe+0x48>
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <tcp_zero_window_probe+0x4a>
 8008748:	2300      	movs	r3, #0
 800874a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800874c:	7ffb      	ldrb	r3, [r7, #31]
 800874e:	2b00      	cmp	r3, #0
 8008750:	bf0c      	ite	eq
 8008752:	2301      	moveq	r3, #1
 8008754:	2300      	movne	r3, #0
 8008756:	b2db      	uxtb	r3, r3
 8008758:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	8bba      	ldrh	r2, [r7, #28]
 8008762:	2100      	movs	r1, #0
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff f915 	bl	8007994 <tcp_output_alloc_header>
 800876a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	e05b      	b.n	8008830 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800877e:	7ffb      	ldrb	r3, [r7, #31]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00e      	beq.n	80087a2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	899b      	ldrh	r3, [r3, #12]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800878e:	b29c      	uxth	r4, r3
 8008790:	2011      	movs	r0, #17
 8008792:	f7fa f9aa 	bl	8002aea <lwip_htons>
 8008796:	4603      	mov	r3, r0
 8008798:	4323      	orrs	r3, r4
 800879a:	b29a      	uxth	r2, r3
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	819a      	strh	r2, [r3, #12]
 80087a0:	e010      	b.n	80087c4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	3314      	adds	r3, #20
 80087a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	6858      	ldr	r0, [r3, #4]
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	891a      	ldrh	r2, [r3, #8]
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	891b      	ldrh	r3, [r3, #8]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2201      	movs	r2, #1
 80087be:	6939      	ldr	r1, [r7, #16]
 80087c0:	f7fb fc8e 	bl	80040e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fa f99a 	bl	8002b04 <lwip_htonl>
 80087d0:	4603      	mov	r3, r0
 80087d2:	3301      	adds	r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da02      	bge.n	80087e8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f003 fc2d 	bl	800c04c <ip4_route>
 80087f2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80087fa:	23fc      	movs	r3, #252	; 0xfc
 80087fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008800:	e011      	b.n	8008826 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	1d1a      	adds	r2, r3, #4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7a98      	ldrb	r0, [r3, #10]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	9302      	str	r3, [sp, #8]
 8008810:	2306      	movs	r3, #6
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	2300      	movs	r3, #0
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	4603      	mov	r3, r0
 800881a:	69b8      	ldr	r0, [r7, #24]
 800881c:	f003 fddc 	bl	800c3d8 <ip4_output_if>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008826:	69b8      	ldr	r0, [r7, #24]
 8008828:	f7fb fa5c 	bl	8003ce4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800882c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008830:	4618      	mov	r0, r3
 8008832:	372c      	adds	r7, #44	; 0x2c
 8008834:	46bd      	mov	sp, r7
 8008836:	bd90      	pop	{r4, r7, pc}

08008838 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8008840:	f7fb fcce 	bl	80041e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <tcpip_tcp_timer+0x38>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d103      	bne.n	8008854 <tcpip_tcp_timer+0x1c>
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <tcpip_tcp_timer+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008854:	2200      	movs	r2, #0
 8008856:	4908      	ldr	r1, [pc, #32]	; (8008878 <tcpip_tcp_timer+0x40>)
 8008858:	20fa      	movs	r0, #250	; 0xfa
 800885a:	f000 f86f 	bl	800893c <sys_timeout>
 800885e:	e002      	b.n	8008866 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8008860:	4b06      	ldr	r3, [pc, #24]	; (800887c <tcpip_tcp_timer+0x44>)
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
  }
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	2000802c 	.word	0x2000802c
 8008874:	2000803c 	.word	0x2000803c
 8008878:	08008839 	.word	0x08008839
 800887c:	2000010c 	.word	0x2000010c

08008880 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <tcp_timer_needed+0x30>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10f      	bne.n	80088ac <tcp_timer_needed+0x2c>
 800888c:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <tcp_timer_needed+0x34>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <tcp_timer_needed+0x1c>
 8008894:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <tcp_timer_needed+0x38>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800889c:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <tcp_timer_needed+0x30>)
 800889e:	2201      	movs	r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80088a2:	2200      	movs	r2, #0
 80088a4:	4905      	ldr	r1, [pc, #20]	; (80088bc <tcp_timer_needed+0x3c>)
 80088a6:	20fa      	movs	r0, #250	; 0xfa
 80088a8:	f000 f848 	bl	800893c <sys_timeout>
  }
}
 80088ac:	bf00      	nop
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	2000010c 	.word	0x2000010c
 80088b4:	2000802c 	.word	0x2000802c
 80088b8:	2000803c 	.word	0x2000803c
 80088bc:	08008839 	.word	0x08008839

080088c0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4903      	ldr	r1, [pc, #12]	; (80088e8 <cyclic_timer+0x28>)
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f82e 	bl	800893c <sys_timeout>
}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	080088c1 	.word	0x080088c1

080088ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80088f2:	2301      	movs	r3, #1
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	e00e      	b.n	8008916 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80088f8:	4a0d      	ldr	r2, [pc, #52]	; (8008930 <sys_timeouts_init+0x44>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4a0a      	ldr	r2, [pc, #40]	; (8008930 <sys_timeouts_init+0x44>)
 8008906:	4413      	add	r3, r2
 8008908:	461a      	mov	r2, r3
 800890a:	490a      	ldr	r1, [pc, #40]	; (8008934 <sys_timeouts_init+0x48>)
 800890c:	f000 f816 	bl	800893c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3301      	adds	r3, #1
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b04      	cmp	r3, #4
 800891a:	d9ed      	bls.n	80088f8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800891c:	f7fa f8de 	bl	8002adc <sys_now>
 8008920:	4602      	mov	r2, r0
 8008922:	4b05      	ldr	r3, [pc, #20]	; (8008938 <sys_timeouts_init+0x4c>)
 8008924:	601a      	str	r2, [r3, #0]
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	080104e4 	.word	0x080104e4
 8008934:	080088c1 	.word	0x080088c1
 8008938:	20000108 	.word	0x20000108

0800893c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008948:	2006      	movs	r0, #6
 800894a:	f7fa fc77 	bl	800323c <memp_malloc>
 800894e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f040 8084 	bne.w	8008a66 <sys_timeout+0x12a>
 800895e:	4b44      	ldr	r3, [pc, #272]	; (8008a70 <sys_timeout+0x134>)
 8008960:	22d4      	movs	r2, #212	; 0xd4
 8008962:	4944      	ldr	r1, [pc, #272]	; (8008a74 <sys_timeout+0x138>)
 8008964:	4844      	ldr	r0, [pc, #272]	; (8008a78 <sys_timeout+0x13c>)
 8008966:	f004 fd37 	bl	800d3d8 <iprintf>
    return;
 800896a:	e07c      	b.n	8008a66 <sys_timeout+0x12a>
  }

  now = sys_now();
 800896c:	f7fa f8b6 	bl	8002adc <sys_now>
 8008970:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8008972:	4b42      	ldr	r3, [pc, #264]	; (8008a7c <sys_timeout+0x140>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <sys_timeout+0x4a>
    diff = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800897e:	4a40      	ldr	r2, [pc, #256]	; (8008a80 <sys_timeout+0x144>)
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	e004      	b.n	8008990 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8008986:	4b3e      	ldr	r3, [pc, #248]	; (8008a80 <sys_timeout+0x144>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	441a      	add	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80089ac:	4b33      	ldr	r3, [pc, #204]	; (8008a7c <sys_timeout+0x140>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <sys_timeout+0x80>
    next_timeout = timeout;
 80089b4:	4a31      	ldr	r2, [pc, #196]	; (8008a7c <sys_timeout+0x140>)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	6013      	str	r3, [r2, #0]
    return;
 80089ba:	e055      	b.n	8008a68 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80089bc:	4b2f      	ldr	r3, [pc, #188]	; (8008a7c <sys_timeout+0x140>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d20f      	bcs.n	80089e8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80089c8:	4b2c      	ldr	r3, [pc, #176]	; (8008a7c <sys_timeout+0x140>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6859      	ldr	r1, [r3, #4]
 80089ce:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <sys_timeout+0x140>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	1a8a      	subs	r2, r1, r2
 80089d6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80089d8:	4b28      	ldr	r3, [pc, #160]	; (8008a7c <sys_timeout+0x140>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80089e0:	4a26      	ldr	r2, [pc, #152]	; (8008a7c <sys_timeout+0x140>)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	e03f      	b.n	8008a68 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80089e8:	4b24      	ldr	r3, [pc, #144]	; (8008a7c <sys_timeout+0x140>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	e036      	b.n	8008a5e <sys_timeout+0x122>
      timeout->time -= t->time;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d006      	beq.n	8008a14 <sys_timeout+0xd8>
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d921      	bls.n	8008a58 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d009      	beq.n	8008a30 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6859      	ldr	r1, [r3, #4]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	1a8a      	subs	r2, r1, r2
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	e00b      	b.n	8008a48 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d206      	bcs.n	8008a48 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <sys_timeout+0x140>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	441a      	add	r2, r3
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	601a      	str	r2, [r3, #0]
        break;
 8008a56:	e007      	b.n	8008a68 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1c5      	bne.n	80089f0 <sys_timeout+0xb4>
 8008a64:	e000      	b.n	8008a68 <sys_timeout+0x12c>
    return;
 8008a66:	bf00      	nop
      }
    }
  }
}
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	0800f768 	.word	0x0800f768
 8008a74:	0800f79c 	.word	0x0800f79c
 8008a78:	0800f7dc 	.word	0x0800f7dc
 8008a7c:	20000104 	.word	0x20000104
 8008a80:	20000108 	.word	0x20000108

08008a84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008a88:	bf00      	nop
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bc80      	pop	{r7}
 8008a8e:	4770      	bx	lr

08008a90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8008a9a:	4b17      	ldr	r3, [pc, #92]	; (8008af8 <udp_new_port+0x68>)
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	b291      	uxth	r1, r2
 8008aa2:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <udp_new_port+0x68>)
 8008aa4:	8011      	strh	r1, [r2, #0]
 8008aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d103      	bne.n	8008ab6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8008aae:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <udp_new_port+0x68>)
 8008ab0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008ab4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <udp_new_port+0x6c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	e011      	b.n	8008ae2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	8a5a      	ldrh	r2, [r3, #18]
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <udp_new_port+0x68>)
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d108      	bne.n	8008adc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	3301      	adds	r3, #1
 8008ace:	80fb      	strh	r3, [r7, #6]
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad6:	d3e0      	bcc.n	8008a9a <udp_new_port+0xa>
        return 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e007      	b.n	8008aec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	603b      	str	r3, [r7, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1ea      	bne.n	8008abe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8008ae8:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <udp_new_port+0x68>)
 8008aea:	881b      	ldrh	r3, [r3, #0]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000010 	.word	0x20000010
 8008afc:	20008044 	.word	0x20008044

08008b00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d018      	beq.n	8008b46 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d013      	beq.n	8008b42 <udp_input_local_match+0x42>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00f      	beq.n	8008b42 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008b22:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <udp_input_local_match+0x70>)
 8008b24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	d00a      	beq.n	8008b42 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <udp_input_local_match+0x70>)
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	405a      	eors	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d110      	bne.n	8008b64 <udp_input_local_match+0x64>
          return 1;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e00f      	b.n	8008b66 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <udp_input_local_match+0x60>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <udp_input_local_match+0x60>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <udp_input_local_match+0x70>)
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d101      	bne.n	8008b64 <udp_input_local_match+0x64>
      return 1;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bc80      	pop	{r7}
 8008b6e:	4770      	bx	lr
 8008b70:	20004adc 	.word	0x20004adc

08008b74 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b08d      	sub	sp, #52	; 0x34
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	895b      	ldrh	r3, [r3, #10]
 8008b86:	2b07      	cmp	r3, #7
 8008b88:	d803      	bhi.n	8008b92 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fb f8aa 	bl	8003ce4 <pbuf_free>
    goto end;
 8008b90:	e0c6      	b.n	8008d20 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008b98:	4b63      	ldr	r3, [pc, #396]	; (8008d28 <udp_input+0x1b4>)
 8008b9a:	695a      	ldr	r2, [r3, #20]
 8008b9c:	4b62      	ldr	r3, [pc, #392]	; (8008d28 <udp_input+0x1b4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f003 fcea 	bl	800c57c <ip4_addr_isbroadcast_u32>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f9 ff99 	bl	8002aea <lwip_htons>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f9 ff91 	bl	8002aea <lwip_htons>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bd8:	4b54      	ldr	r3, [pc, #336]	; (8008d2c <udp_input+0x1b8>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bde:	e03b      	b.n	8008c58 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	8a5b      	ldrh	r3, [r3, #18]
 8008be4:	89fa      	ldrh	r2, [r7, #14]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d131      	bne.n	8008c4e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8008bea:	7cfb      	ldrb	r3, [r7, #19]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bf2:	f7ff ff85 	bl	8008b00 <udp_input_local_match>
 8008bf6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d028      	beq.n	8008c4e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	7c1b      	ldrb	r3, [r3, #16]
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <udp_input+0x9e>
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	8a9b      	ldrh	r3, [r3, #20]
 8008c16:	8a3a      	ldrh	r2, [r7, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d118      	bne.n	8008c4e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	4b3f      	ldr	r3, [pc, #252]	; (8008d28 <udp_input+0x1b4>)
 8008c2a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d10e      	bne.n	8008c4e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d014      	beq.n	8008c60 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8008c3e:	4b3b      	ldr	r3, [pc, #236]	; (8008d2c <udp_input+0x1b8>)
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8008c46:	4a39      	ldr	r2, [pc, #228]	; (8008d2c <udp_input+0x1b8>)
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8008c4c:	e008      	b.n	8008c60 <udp_input+0xec>
      }
    }

    prev = pcb;
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1c0      	bne.n	8008be0 <udp_input+0x6c>
 8008c5e:	e000      	b.n	8008c62 <udp_input+0xee>
        break;
 8008c60:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <udp_input+0xf8>
    pcb = uncon_pcb;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <udp_input+0x104>
    for_us = 1;
 8008c72:	2301      	movs	r3, #1
 8008c74:	76fb      	strb	r3, [r7, #27]
 8008c76:	e00a      	b.n	8008c8e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	4b2a      	ldr	r3, [pc, #168]	; (8008d28 <udp_input+0x1b4>)
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	bf0c      	ite	eq
 8008c86:	2301      	moveq	r3, #1
 8008c88:	2300      	movne	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8008c8e:	7efb      	ldrb	r3, [r7, #27]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d042      	beq.n	8008d1a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8008c94:	f06f 0107 	mvn.w	r1, #7
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7fa ffff 	bl	8003c9c <pbuf_header>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00a      	beq.n	8008cba <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8008ca4:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <udp_input+0x1bc>)
 8008ca6:	f240 1255 	movw	r2, #341	; 0x155
 8008caa:	4922      	ldr	r1, [pc, #136]	; (8008d34 <udp_input+0x1c0>)
 8008cac:	4822      	ldr	r0, [pc, #136]	; (8008d38 <udp_input+0x1c4>)
 8008cae:	f004 fb93 	bl	800d3d8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fb f816 	bl	8003ce4 <pbuf_free>
      goto end;
 8008cb8:	e032      	b.n	8008d20 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d012      	beq.n	8008ce6 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	699c      	ldr	r4, [r3, #24]
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	69d8      	ldr	r0, [r3, #28]
 8008cd0:	8a3b      	ldrh	r3, [r7, #16]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	4b19      	ldr	r3, [pc, #100]	; (8008d3c <udp_input+0x1c8>)
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cda:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8008cdc:	e021      	b.n	8008d22 <udp_input+0x1ae>
        pbuf_free(p);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fb f800 	bl	8003ce4 <pbuf_free>
        goto end;
 8008ce4:	e01c      	b.n	8008d20 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008ce6:	7cfb      	ldrb	r3, [r7, #19]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d112      	bne.n	8008d12 <udp_input+0x19e>
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <udp_input+0x1b4>)
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cf4:	2be0      	cmp	r3, #224	; 0xe0
 8008cf6:	d00c      	beq.n	8008d12 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <udp_input+0x1b4>)
 8008cfa:	899b      	ldrh	r3, [r3, #12]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	b21b      	sxth	r3, r3
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7fa ffdb 	bl	8003cc0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008d0a:	2103      	movs	r1, #3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f003 f915 	bl	800bf3c <icmp_dest_unreach>
      pbuf_free(p);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fa ffe6 	bl	8003ce4 <pbuf_free>
  return;
 8008d18:	e003      	b.n	8008d22 <udp_input+0x1ae>
    pbuf_free(p);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fa ffe2 	bl	8003ce4 <pbuf_free>
  return;
 8008d20:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8008d22:	372c      	adds	r7, #44	; 0x2c
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd90      	pop	{r4, r7, pc}
 8008d28:	20004adc 	.word	0x20004adc
 8008d2c:	20008044 	.word	0x20008044
 8008d30:	0800f804 	.word	0x0800f804
 8008d34:	0800f834 	.word	0x0800f834
 8008d38:	0800f848 	.word	0x0800f848
 8008d3c:	20004aec 	.word	0x20004aec

08008d40 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <udp_sendto_if+0x1a>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <udp_sendto_if+0x20>
    return ERR_VAL;
 8008d5a:	f06f 0305 	mvn.w	r3, #5
 8008d5e:	e028      	b.n	8008db2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <udp_sendto_if+0x3a>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008d76:	2be0      	cmp	r3, #224	; 0xe0
 8008d78:	d103      	bne.n	8008d82 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	e00b      	b.n	8008d9a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d002      	beq.n	8008d96 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8008d90:	f06f 0303 	mvn.w	r3, #3
 8008d94:	e00d      	b.n	8008db2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8008d9a:	887a      	ldrh	r2, [r7, #2]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	4613      	mov	r3, r2
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 f806 	bl	8008dbc <udp_sendto_if_src>
 8008db0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08c      	sub	sp, #48	; 0x30
 8008dc0:	af04      	add	r7, sp, #16
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <udp_sendto_if_src+0x1a>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8008dd6:	f06f 0305 	mvn.w	r3, #5
 8008dda:	e07e      	b.n	8008eda <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8a5b      	ldrh	r3, [r3, #18]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10f      	bne.n	8008e04 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8a5b      	ldrh	r3, [r3, #18]
 8008dea:	461a      	mov	r2, r3
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f87f 	bl	8008ef0 <udp_bind>
 8008df2:	4603      	mov	r3, r0
 8008df4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8008df6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8008dfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008e02:	e06a      	b.n	8008eda <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8008e04:	2108      	movs	r1, #8
 8008e06:	68b8      	ldr	r0, [r7, #8]
 8008e08:	f7fa ff48 	bl	8003c9c <pbuf_header>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d014      	beq.n	8008e3c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8008e12:	2200      	movs	r2, #0
 8008e14:	2108      	movs	r1, #8
 8008e16:	2001      	movs	r0, #1
 8008e18:	f7fa fbf2 	bl	8003600 <pbuf_alloc>
 8008e1c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8008e24:	f04f 33ff 	mov.w	r3, #4294967295
 8008e28:	e057      	b.n	8008eda <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	891b      	ldrh	r3, [r3, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d006      	beq.n	8008e40 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	69f8      	ldr	r0, [r7, #28]
 8008e36:	f7fb f877 	bl	8003f28 <pbuf_chain>
 8008e3a:	e001      	b.n	8008e40 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	895b      	ldrh	r3, [r3, #10]
 8008e44:	2b07      	cmp	r3, #7
 8008e46:	d806      	bhi.n	8008e56 <udp_sendto_if_src+0x9a>
 8008e48:	4b26      	ldr	r3, [pc, #152]	; (8008ee4 <udp_sendto_if_src+0x128>)
 8008e4a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008e4e:	4926      	ldr	r1, [pc, #152]	; (8008ee8 <udp_sendto_if_src+0x12c>)
 8008e50:	4826      	ldr	r0, [pc, #152]	; (8008eec <udp_sendto_if_src+0x130>)
 8008e52:	f004 fac1 	bl	800d3d8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8a5b      	ldrh	r3, [r3, #18]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f9 fe42 	bl	8002aea <lwip_htons>
 8008e66:	4603      	mov	r3, r0
 8008e68:	461a      	mov	r2, r3
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8008e6e:	887b      	ldrh	r3, [r7, #2]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7f9 fe3a 	bl	8002aea <lwip_htons>
 8008e76:	4603      	mov	r3, r0
 8008e78:	461a      	mov	r2, r3
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2200      	movs	r2, #0
 8008e82:	719a      	strb	r2, [r3, #6]
 8008e84:	2200      	movs	r2, #0
 8008e86:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	891b      	ldrh	r3, [r3, #8]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7f9 fe2c 	bl	8002aea <lwip_htons>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8008e9a:	2311      	movs	r3, #17
 8008e9c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	7a9b      	ldrb	r3, [r3, #10]
 8008ea2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	7a5b      	ldrb	r3, [r3, #9]
 8008ea8:	7cb9      	ldrb	r1, [r7, #18]
 8008eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eac:	9202      	str	r2, [sp, #8]
 8008eae:	7cfa      	ldrb	r2, [r7, #19]
 8008eb0:	9201      	str	r2, [sp, #4]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eba:	69f8      	ldr	r0, [r7, #28]
 8008ebc:	f003 fab6 	bl	800c42c <ip4_output_if_src>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d004      	beq.n	8008ed6 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8008ecc:	69f8      	ldr	r0, [r7, #28]
 8008ece:	f7fa ff09 	bl	8003ce4 <pbuf_free>
    q = NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8008ed6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0800f804 	.word	0x0800f804
 8008ee8:	0800f870 	.word	0x0800f870
 8008eec:	0800f848 	.word	0x0800f848

08008ef0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8008f04:	4b30      	ldr	r3, [pc, #192]	; (8008fc8 <udp_bind+0xd8>)
 8008f06:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <udp_bind+0x24>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <udp_bind+0x2a>
    return ERR_VAL;
 8008f14:	f06f 0305 	mvn.w	r3, #5
 8008f18:	e052      	b.n	8008fc0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008f1e:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <udp_bind+0xdc>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e009      	b.n	8008f3a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d102      	bne.n	8008f34 <udp_bind+0x44>
      rebind = 1;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	74fb      	strb	r3, [r7, #19]
      break;
 8008f32:	e005      	b.n	8008f40 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f2      	bne.n	8008f26 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8008f40:	88fb      	ldrh	r3, [r7, #6]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <udp_bind+0x6a>
    port = udp_new_port();
 8008f46:	f7ff fda3 	bl	8008a90 <udp_new_port>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d11e      	bne.n	8008f92 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8008f54:	f06f 0307 	mvn.w	r3, #7
 8008f58:	e032      	b.n	8008fc0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008f5a:	4b1c      	ldr	r3, [pc, #112]	; (8008fcc <udp_bind+0xdc>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e014      	b.n	8008f8c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d00d      	beq.n	8008f86 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	8a5b      	ldrh	r3, [r3, #18]
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d108      	bne.n	8008f86 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d102      	bne.n	8008f86 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8008f80:	f06f 0307 	mvn.w	r3, #7
 8008f84:	e01c      	b.n	8008fc0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e7      	bne.n	8008f62 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <udp_bind+0xae>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	e000      	b.n	8008fa0 <udp_bind+0xb0>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	88fa      	ldrh	r2, [r7, #6]
 8008fa8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008faa:	7cfb      	ldrb	r3, [r7, #19]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d106      	bne.n	8008fbe <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008fb0:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <udp_bind+0xdc>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8008fb8:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <udp_bind+0xdc>)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	0801050c 	.word	0x0801050c
 8008fcc:	20008044 	.word	0x20008044

08008fd0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <udp_connect+0x1a>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <udp_connect+0x20>
    return ERR_VAL;
 8008fea:	f06f 0305 	mvn.w	r3, #5
 8008fee:	e03e      	b.n	800906e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8a5b      	ldrh	r3, [r3, #18]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10f      	bne.n	8009018 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008ff8:	68f9      	ldr	r1, [r7, #12]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8a5b      	ldrh	r3, [r3, #18]
 8008ffe:	461a      	mov	r2, r3
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff ff75 	bl	8008ef0 <udp_bind>
 8009006:	4603      	mov	r3, r0
 8009008:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800900a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <udp_connect+0x48>
      return err;
 8009012:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009016:	e02a      	b.n	800906e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <udp_connect+0x54>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	e000      	b.n	8009026 <udp_connect+0x56>
 8009024:	2300      	movs	r3, #0
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	88fa      	ldrh	r2, [r7, #6]
 800902e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	7c1b      	ldrb	r3, [r3, #16]
 8009034:	f043 0304 	orr.w	r3, r3, #4
 8009038:	b2da      	uxtb	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800903e:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <udp_connect+0xa8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e008      	b.n	8009058 <udp_connect+0x88>
    if (pcb == ipcb) {
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	429a      	cmp	r2, r3
 800904c:	d101      	bne.n	8009052 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	e00d      	b.n	800906e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f3      	bne.n	8009046 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800905e:	4b06      	ldr	r3, [pc, #24]	; (8009078 <udp_connect+0xa8>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8009066:	4a04      	ldr	r2, [pc, #16]	; (8009078 <udp_connect+0xa8>)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20008044 	.word	0x20008044

0800907c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	61da      	str	r2, [r3, #28]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr
	...

080090a0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80090a8:	4b15      	ldr	r3, [pc, #84]	; (8009100 <udp_remove+0x60>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d105      	bne.n	80090be <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80090b2:	4b13      	ldr	r3, [pc, #76]	; (8009100 <udp_remove+0x60>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4a11      	ldr	r2, [pc, #68]	; (8009100 <udp_remove+0x60>)
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	e017      	b.n	80090ee <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80090be:	4b10      	ldr	r3, [pc, #64]	; (8009100 <udp_remove+0x60>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e010      	b.n	80090e8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <udp_remove+0x42>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d104      	bne.n	80090e2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	60da      	str	r2, [r3, #12]
        break;
 80090e0:	e005      	b.n	80090ee <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1eb      	bne.n	80090c6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	2000      	movs	r0, #0
 80090f2:	f7fa f8ef 	bl	80032d4 <memp_free>
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20008044 	.word	0x20008044

08009104 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800910a:	2000      	movs	r0, #0
 800910c:	f7fa f896 	bl	800323c <memp_malloc>
 8009110:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8009118:	2220      	movs	r2, #32
 800911a:	2100      	movs	r1, #0
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f004 f953 	bl	800d3c8 <memset>
    pcb->ttl = UDP_TTL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8009128:	687b      	ldr	r3, [r7, #4]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01e      	beq.n	8009182 <udp_netif_ip_addr_changed+0x4e>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01a      	beq.n	8009182 <udp_netif_ip_addr_changed+0x4e>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d017      	beq.n	8009182 <udp_netif_ip_addr_changed+0x4e>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d013      	beq.n	8009182 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800915a:	4b0c      	ldr	r3, [pc, #48]	; (800918c <udp_netif_ip_addr_changed+0x58>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	e00c      	b.n	800917c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d103      	bne.n	8009176 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1ef      	bne.n	8009162 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8009182:	bf00      	nop
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr
 800918c:	20008044 	.word	0x20008044

08009190 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8009194:	4b20      	ldr	r3, [pc, #128]	; (8009218 <dhcp_inc_pcb_refcount+0x88>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d133      	bne.n	8009204 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800919c:	4b1f      	ldr	r3, [pc, #124]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <dhcp_inc_pcb_refcount+0x20>
 80091a4:	4b1e      	ldr	r3, [pc, #120]	; (8009220 <dhcp_inc_pcb_refcount+0x90>)
 80091a6:	22d9      	movs	r2, #217	; 0xd9
 80091a8:	491e      	ldr	r1, [pc, #120]	; (8009224 <dhcp_inc_pcb_refcount+0x94>)
 80091aa:	481f      	ldr	r0, [pc, #124]	; (8009228 <dhcp_inc_pcb_refcount+0x98>)
 80091ac:	f004 f914 	bl	800d3d8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80091b0:	f7ff ffa8 	bl	8009104 <udp_new>
 80091b4:	4602      	mov	r2, r0
 80091b6:	4b19      	ldr	r3, [pc, #100]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 80091b8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80091ba:	4b18      	ldr	r3, [pc, #96]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d102      	bne.n	80091c8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80091c2:	f04f 33ff 	mov.w	r3, #4294967295
 80091c6:	e024      	b.n	8009212 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80091c8:	4b14      	ldr	r3, [pc, #80]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	7a1a      	ldrb	r2, [r3, #8]
 80091ce:	4b13      	ldr	r3, [pc, #76]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f042 0220 	orr.w	r2, r2, #32
 80091d6:	b2d2      	uxtb	r2, r2
 80091d8:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80091da:	4b10      	ldr	r3, [pc, #64]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2244      	movs	r2, #68	; 0x44
 80091e0:	4912      	ldr	r1, [pc, #72]	; (800922c <dhcp_inc_pcb_refcount+0x9c>)
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fe84 	bl	8008ef0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 80091e8:	4b0c      	ldr	r3, [pc, #48]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2243      	movs	r2, #67	; 0x43
 80091ee:	490f      	ldr	r1, [pc, #60]	; (800922c <dhcp_inc_pcb_refcount+0x9c>)
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff feed 	bl	8008fd0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <dhcp_inc_pcb_refcount+0x8c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	490c      	ldr	r1, [pc, #48]	; (8009230 <dhcp_inc_pcb_refcount+0xa0>)
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff ff3c 	bl	800907c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <dhcp_inc_pcb_refcount+0x88>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	b2da      	uxtb	r2, r3
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <dhcp_inc_pcb_refcount+0x88>)
 800920e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000114 	.word	0x20000114
 800921c:	20000110 	.word	0x20000110
 8009220:	0800f8a0 	.word	0x0800f8a0
 8009224:	0800f8d8 	.word	0x0800f8d8
 8009228:	0800f900 	.word	0x0800f900
 800922c:	0801050c 	.word	0x0801050c
 8009230:	0800a8ed 	.word	0x0800a8ed

08009234 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8009238:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <dhcp_dec_pcb_refcount+0x40>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d105      	bne.n	800924c <dhcp_dec_pcb_refcount+0x18>
 8009240:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <dhcp_dec_pcb_refcount+0x44>)
 8009242:	22f3      	movs	r2, #243	; 0xf3
 8009244:	490d      	ldr	r1, [pc, #52]	; (800927c <dhcp_dec_pcb_refcount+0x48>)
 8009246:	480e      	ldr	r0, [pc, #56]	; (8009280 <dhcp_dec_pcb_refcount+0x4c>)
 8009248:	f004 f8c6 	bl	800d3d8 <iprintf>
  dhcp_pcb_refcount--;
 800924c:	4b09      	ldr	r3, [pc, #36]	; (8009274 <dhcp_dec_pcb_refcount+0x40>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	b2da      	uxtb	r2, r3
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <dhcp_dec_pcb_refcount+0x40>)
 8009256:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8009258:	4b06      	ldr	r3, [pc, #24]	; (8009274 <dhcp_dec_pcb_refcount+0x40>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d107      	bne.n	8009270 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <dhcp_dec_pcb_refcount+0x50>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff ff1b 	bl	80090a0 <udp_remove>
    dhcp_pcb = NULL;
 800926a:	4b06      	ldr	r3, [pc, #24]	; (8009284 <dhcp_dec_pcb_refcount+0x50>)
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
  }
}
 8009270:	bf00      	nop
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000114 	.word	0x20000114
 8009278:	0800f8a0 	.word	0x0800f8a0
 800927c:	0800f928 	.word	0x0800f928
 8009280:	0800f900 	.word	0x0800f900
 8009284:	20000110 	.word	0x20000110

08009288 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009296:	210c      	movs	r1, #12
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 ff85 	bl	800a1a8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800929e:	4b06      	ldr	r3, [pc, #24]	; (80092b8 <dhcp_handle_nak+0x30>)
 80092a0:	4a05      	ldr	r2, [pc, #20]	; (80092b8 <dhcp_handle_nak+0x30>)
 80092a2:	4905      	ldr	r1, [pc, #20]	; (80092b8 <dhcp_handle_nak+0x30>)
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7fa f8a1 	bl	80033ec <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fbb6 	bl	8009a1c <dhcp_discover>
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	0801050c 	.word	0x0801050c

080092bc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80092ca:	2108      	movs	r1, #8
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 ff6b 	bl	800a1a8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3328      	adds	r3, #40	; 0x28
 80092d6:	2200      	movs	r2, #0
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f002 fb1e 	bl	800b91c <etharp_query>
 80092e0:	4603      	mov	r3, r0
 80092e2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	7a9b      	ldrb	r3, [r3, #10]
 80092e8:	2bff      	cmp	r3, #255	; 0xff
 80092ea:	d005      	beq.n	80092f8 <dhcp_check+0x3c>
    dhcp->tries++;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	7a9b      	ldrb	r3, [r3, #10]
 80092f0:	3301      	adds	r3, #1
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 80092f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80092fc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80092fe:	893b      	ldrh	r3, [r7, #8]
 8009300:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009304:	4a06      	ldr	r2, [pc, #24]	; (8009320 <dhcp_check+0x64>)
 8009306:	fb82 1203 	smull	r1, r2, r2, r3
 800930a:	1152      	asrs	r2, r2, #5
 800930c:	17db      	asrs	r3, r3, #31
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	10624dd3 	.word	0x10624dd3

08009324 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8009332:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <dhcp_handle_offer+0x40>)
 8009334:	789b      	ldrb	r3, [r3, #2]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00f      	beq.n	800935a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800933a:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <dhcp_handle_offer+0x44>)
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	4618      	mov	r0, r3
 8009340:	f7f9 fbe0 	bl	8002b04 <lwip_htonl>
 8009344:	4602      	mov	r2, r0
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	691a      	ldr	r2, [r3, #16]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f809 	bl	800936c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20008048 	.word	0x20008048
 8009368:	20008050 	.word	0x20008050

0800936c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af02      	add	r7, sp, #8
 8009372:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800937a:	2101      	movs	r1, #1
 800937c:	6938      	ldr	r0, [r7, #16]
 800937e:	f000 ff13 	bl	800a1a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009382:	2203      	movs	r2, #3
 8009384:	6939      	ldr	r1, [r7, #16]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fb94 	bl	800aab4 <dhcp_create_msg>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8009390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d159      	bne.n	800944c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009398:	2202      	movs	r2, #2
 800939a:	2139      	movs	r1, #57	; 0x39
 800939c:	6938      	ldr	r0, [r7, #16]
 800939e:	f000 ff1d 	bl	800a1dc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093a6:	4619      	mov	r1, r3
 80093a8:	6938      	ldr	r0, [r7, #16]
 80093aa:	f000 ff79 	bl	800a2a0 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80093ae:	2204      	movs	r2, #4
 80093b0:	2132      	movs	r1, #50	; 0x32
 80093b2:	6938      	ldr	r0, [r7, #16]
 80093b4:	f000 ff12 	bl	800a1dc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	4618      	mov	r0, r3
 80093be:	f7f9 fba1 	bl	8002b04 <lwip_htonl>
 80093c2:	4603      	mov	r3, r0
 80093c4:	4619      	mov	r1, r3
 80093c6:	6938      	ldr	r0, [r7, #16]
 80093c8:	f000 ffa4 	bl	800a314 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80093cc:	2204      	movs	r2, #4
 80093ce:	2136      	movs	r1, #54	; 0x36
 80093d0:	6938      	ldr	r0, [r7, #16]
 80093d2:	f000 ff03 	bl	800a1dc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7f9 fb92 	bl	8002b04 <lwip_htonl>
 80093e0:	4603      	mov	r3, r0
 80093e2:	4619      	mov	r1, r3
 80093e4:	6938      	ldr	r0, [r7, #16]
 80093e6:	f000 ff95 	bl	800a314 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80093ea:	2203      	movs	r2, #3
 80093ec:	2137      	movs	r1, #55	; 0x37
 80093ee:	6938      	ldr	r0, [r7, #16]
 80093f0:	f000 fef4 	bl	800a1dc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80093f4:	2300      	movs	r3, #0
 80093f6:	75fb      	strb	r3, [r7, #23]
 80093f8:	e009      	b.n	800940e <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	4a29      	ldr	r2, [pc, #164]	; (80094a4 <dhcp_select+0x138>)
 80093fe:	5cd3      	ldrb	r3, [r2, r3]
 8009400:	4619      	mov	r1, r3
 8009402:	6938      	ldr	r0, [r7, #16]
 8009404:	f000 ff24 	bl	800a250 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	3301      	adds	r3, #1
 800940c:	75fb      	strb	r3, [r7, #23]
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d9f2      	bls.n	80093fa <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8009414:	6938      	ldr	r0, [r7, #16]
 8009416:	f001 fcf1 	bl	800adfc <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	8a9b      	ldrh	r3, [r3, #20]
 8009422:	33f0      	adds	r3, #240	; 0xf0
 8009424:	b29b      	uxth	r3, r3
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fa fae7 	bl	80039fc <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800942e:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <dhcp_select+0x13c>)
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	68d9      	ldr	r1, [r3, #12]
 8009436:	4b1d      	ldr	r3, [pc, #116]	; (80094ac <dhcp_select+0x140>)
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	2343      	movs	r3, #67	; 0x43
 8009440:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <dhcp_select+0x144>)
 8009442:	f7ff fcbb 	bl	8008dbc <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009446:	6938      	ldr	r0, [r7, #16]
 8009448:	f001 fc96 	bl	800ad78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	7a9b      	ldrb	r3, [r3, #10]
 8009450:	2bff      	cmp	r3, #255	; 0xff
 8009452:	d005      	beq.n	8009460 <dhcp_select+0xf4>
    dhcp->tries++;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	7a9b      	ldrb	r3, [r3, #10]
 8009458:	3301      	adds	r3, #1
 800945a:	b2da      	uxtb	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	7a9b      	ldrb	r3, [r3, #10]
 8009464:	2b05      	cmp	r3, #5
 8009466:	d807      	bhi.n	8009478 <dhcp_select+0x10c>
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	7a9b      	ldrb	r3, [r3, #10]
 800946c:	461a      	mov	r2, r3
 800946e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009472:	4093      	lsls	r3, r2
 8009474:	b29b      	uxth	r3, r3
 8009476:	e001      	b.n	800947c <dhcp_select+0x110>
 8009478:	f64e 2360 	movw	r3, #60000	; 0xea60
 800947c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800947e:	89bb      	ldrh	r3, [r7, #12]
 8009480:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009484:	4a0b      	ldr	r2, [pc, #44]	; (80094b4 <dhcp_select+0x148>)
 8009486:	fb82 1203 	smull	r1, r2, r2, r3
 800948a:	1152      	asrs	r2, r2, #5
 800948c:	17db      	asrs	r3, r3, #31
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	b29a      	uxth	r2, r3
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000014 	.word	0x20000014
 80094a8:	20000110 	.word	0x20000110
 80094ac:	0801050c 	.word	0x0801050c
 80094b0:	08010510 	.word	0x08010510
 80094b4:	10624dd3 	.word	0x10624dd3

080094b8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80094be:	4b27      	ldr	r3, [pc, #156]	; (800955c <dhcp_coarse_tmr+0xa4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 80094c4:	e042      	b.n	800954c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d039      	beq.n	8009546 <dhcp_coarse_tmr+0x8e>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	7a5b      	ldrb	r3, [r3, #9]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d035      	beq.n	8009546 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d012      	beq.n	8009508 <dhcp_coarse_tmr+0x50>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	8c1b      	ldrh	r3, [r3, #32]
 80094e6:	3301      	adds	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	841a      	strh	r2, [r3, #32]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	8c1a      	ldrh	r2, [r3, #32]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d106      	bne.n	8009508 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fd94 	bl	800a028 <dhcp_release>
        dhcp_discover(netif);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fa8b 	bl	8009a1c <dhcp_discover>
 8009506:	e01e      	b.n	8009546 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	8bdb      	ldrh	r3, [r3, #30]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <dhcp_coarse_tmr+0x70>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	8bdb      	ldrh	r3, [r3, #30]
 8009514:	1e5a      	subs	r2, r3, #1
 8009516:	b291      	uxth	r1, r2
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	83d1      	strh	r1, [r2, #30]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d103      	bne.n	8009528 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f8c6 	bl	80096b2 <dhcp_t2_timeout>
 8009526:	e00e      	b.n	8009546 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	8b9b      	ldrh	r3, [r3, #28]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00a      	beq.n	8009546 <dhcp_coarse_tmr+0x8e>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	8b9b      	ldrh	r3, [r3, #28]
 8009534:	1e5a      	subs	r2, r3, #1
 8009536:	b291      	uxth	r1, r2
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	8391      	strh	r1, [r2, #28]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d102      	bne.n	8009546 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f888 	bl	8009656 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1b9      	bne.n	80094c6 <dhcp_coarse_tmr+0xe>
  }
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	2000801c 	.word	0x2000801c

08009560 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8009566:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <dhcp_fine_tmr+0x60>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800956c:	e020      	b.n	80095b0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d017      	beq.n	80095aa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	8adb      	ldrh	r3, [r3, #22]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d906      	bls.n	8009590 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	8adb      	ldrh	r3, [r3, #22]
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	82da      	strh	r2, [r3, #22]
 800958e:	e00c      	b.n	80095aa <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	8adb      	ldrh	r3, [r3, #22]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d108      	bne.n	80095aa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	8adb      	ldrh	r3, [r3, #22]
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f80d 	bl	80095c4 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1db      	bne.n	800956e <dhcp_fine_tmr+0xe>
  }
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	2000801c 	.word	0x2000801c

080095c4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	7a5b      	ldrb	r3, [r3, #9]
 80095d6:	2b0c      	cmp	r3, #12
 80095d8:	d003      	beq.n	80095e2 <dhcp_timeout+0x1e>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	7a5b      	ldrb	r3, [r3, #9]
 80095de:	2b06      	cmp	r3, #6
 80095e0:	d103      	bne.n	80095ea <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fa1a 	bl	8009a1c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80095e8:	e031      	b.n	800964e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	7a5b      	ldrb	r3, [r3, #9]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d10e      	bne.n	8009610 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	7a9b      	ldrb	r3, [r3, #10]
 80095f6:	2b05      	cmp	r3, #5
 80095f8:	d803      	bhi.n	8009602 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff feb6 	bl	800936c <dhcp_select>
}
 8009600:	e025      	b.n	800964e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fd10 	bl	800a028 <dhcp_release>
      dhcp_discover(netif);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fa07 	bl	8009a1c <dhcp_discover>
}
 800960e:	e01e      	b.n	800964e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	7a5b      	ldrb	r3, [r3, #9]
 8009614:	2b08      	cmp	r3, #8
 8009616:	d10b      	bne.n	8009630 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	7a9b      	ldrb	r3, [r3, #10]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d803      	bhi.n	8009628 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff fe4b 	bl	80092bc <dhcp_check>
}
 8009626:	e012      	b.n	800964e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fa83 	bl	8009b34 <dhcp_bind>
}
 800962e:	e00e      	b.n	800964e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	7a5b      	ldrb	r3, [r3, #9]
 8009634:	2b03      	cmp	r3, #3
 8009636:	d10a      	bne.n	800964e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	7a9b      	ldrb	r3, [r3, #10]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d803      	bhi.n	8009648 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc5d 	bl	8009f00 <dhcp_reboot>
}
 8009646:	e002      	b.n	800964e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f9e7 	bl	8009a1c <dhcp_discover>
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	7a5b      	ldrb	r3, [r3, #9]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d007      	beq.n	800967c <dhcp_t1_timeout+0x26>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	7a5b      	ldrb	r3, [r3, #9]
 8009670:	2b0a      	cmp	r3, #10
 8009672:	d003      	beq.n	800967c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009678:	2b05      	cmp	r3, #5
 800967a:	d116      	bne.n	80096aa <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fb33 	bl	8009ce8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8b5b      	ldrh	r3, [r3, #26]
 8009686:	461a      	mov	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8c1b      	ldrh	r3, [r3, #32]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b01      	cmp	r3, #1
 8009690:	dd0b      	ble.n	80096aa <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8b5b      	ldrh	r3, [r3, #26]
 8009696:	461a      	mov	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8c1b      	ldrh	r3, [r3, #32]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	0fda      	lsrs	r2, r3, #31
 80096a0:	4413      	add	r3, r2
 80096a2:	105b      	asrs	r3, r3, #1
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	839a      	strh	r2, [r3, #28]
    }
  }
}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	7a5b      	ldrb	r3, [r3, #9]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d00b      	beq.n	80096e0 <dhcp_t2_timeout+0x2e>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	7a5b      	ldrb	r3, [r3, #9]
 80096cc:	2b0a      	cmp	r3, #10
 80096ce:	d007      	beq.n	80096e0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80096d4:	2b05      	cmp	r3, #5
 80096d6:	d003      	beq.n	80096e0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	7a5b      	ldrb	r3, [r3, #9]
 80096dc:	2b04      	cmp	r3, #4
 80096de:	d116      	bne.n	800970e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fb87 	bl	8009df4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80096ea:	461a      	mov	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8c1b      	ldrh	r3, [r3, #32]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	dd0b      	ble.n	800970e <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80096fa:	461a      	mov	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8c1b      	ldrh	r3, [r3, #32]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	0fda      	lsrs	r2, r3, #31
 8009704:	4413      	add	r3, r2
 8009706:	105b      	asrs	r3, r3, #1
 8009708:	b29a      	uxth	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009732:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <dhcp_handle_ack+0xb8>)
 8009734:	78db      	ldrb	r3, [r3, #3]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800973a:	4b26      	ldr	r3, [pc, #152]	; (80097d4 <dhcp_handle_ack+0xbc>)
 800973c:	68da      	ldr	r2, [r3, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009742:	4b23      	ldr	r3, [pc, #140]	; (80097d0 <dhcp_handle_ack+0xb8>)
 8009744:	791b      	ldrb	r3, [r3, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800974a:	4b22      	ldr	r3, [pc, #136]	; (80097d4 <dhcp_handle_ack+0xbc>)
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
 8009752:	e004      	b.n	800975e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009758:	085a      	lsrs	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800975e:	4b1c      	ldr	r3, [pc, #112]	; (80097d0 <dhcp_handle_ack+0xb8>)
 8009760:	795b      	ldrb	r3, [r3, #5]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009766:	4b1b      	ldr	r3, [pc, #108]	; (80097d4 <dhcp_handle_ack+0xbc>)
 8009768:	695a      	ldr	r2, [r3, #20]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	63da      	str	r2, [r3, #60]	; 0x3c
 800976e:	e007      	b.n	8009780 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009774:	4613      	mov	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	08da      	lsrs	r2, r3, #3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800978a:	4b11      	ldr	r3, [pc, #68]	; (80097d0 <dhcp_handle_ack+0xb8>)
 800978c:	799b      	ldrb	r3, [r3, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00b      	beq.n	80097aa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009792:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <dhcp_handle_ack+0xbc>)
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	4618      	mov	r0, r3
 8009798:	f7f9 f9b4 	bl	8002b04 <lwip_htonl>
 800979c:	4602      	mov	r2, r0
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	72da      	strb	r2, [r3, #11]
 80097a8:	e002      	b.n	80097b0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <dhcp_handle_ack+0xb8>)
 80097b2:	79db      	ldrb	r3, [r3, #7]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80097b8:	4b06      	ldr	r3, [pc, #24]	; (80097d4 <dhcp_handle_ack+0xbc>)
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f9 f9a1 	bl	8002b04 <lwip_htonl>
 80097c2:	4602      	mov	r2, r0
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20008048 	.word	0x20008048
 80097d4:	20008050 	.word	0x20008050

080097d8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <dhcp_start+0x22>
 80097e6:	4b3c      	ldr	r3, [pc, #240]	; (80098d8 <dhcp_start+0x100>)
 80097e8:	f240 22d6 	movw	r2, #726	; 0x2d6
 80097ec:	493b      	ldr	r1, [pc, #236]	; (80098dc <dhcp_start+0x104>)
 80097ee:	483c      	ldr	r0, [pc, #240]	; (80098e0 <dhcp_start+0x108>)
 80097f0:	f003 fdf2 	bl	800d3d8 <iprintf>
 80097f4:	f06f 030f 	mvn.w	r3, #15
 80097f8:	e069      	b.n	80098ce <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d109      	bne.n	800981c <dhcp_start+0x44>
 8009808:	4b33      	ldr	r3, [pc, #204]	; (80098d8 <dhcp_start+0x100>)
 800980a:	f240 22d7 	movw	r2, #727	; 0x2d7
 800980e:	4935      	ldr	r1, [pc, #212]	; (80098e4 <dhcp_start+0x10c>)
 8009810:	4833      	ldr	r0, [pc, #204]	; (80098e0 <dhcp_start+0x108>)
 8009812:	f003 fde1 	bl	800d3d8 <iprintf>
 8009816:	f06f 030f 	mvn.w	r3, #15
 800981a:	e058      	b.n	80098ce <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009826:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800982a:	d202      	bcs.n	8009832 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800982c:	f04f 33ff 	mov.w	r3, #4294967295
 8009830:	e04d      	b.n	80098ce <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10d      	bne.n	8009854 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8009838:	2040      	movs	r0, #64	; 0x40
 800983a:	f7f9 fba3 	bl	8002f84 <mem_malloc>
 800983e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8009846:	f04f 33ff 	mov.w	r3, #4294967295
 800984a:	e040      	b.n	80098ce <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	621a      	str	r2, [r3, #32]
 8009852:	e01b      	b.n	800988c <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d006      	beq.n	800986a <dhcp_start+0x92>
 800985c:	4b1e      	ldr	r3, [pc, #120]	; (80098d8 <dhcp_start+0x100>)
 800985e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8009862:	4921      	ldr	r1, [pc, #132]	; (80098e8 <dhcp_start+0x110>)
 8009864:	481e      	ldr	r0, [pc, #120]	; (80098e0 <dhcp_start+0x108>)
 8009866:	f003 fdb7 	bl	800d3d8 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d006      	beq.n	8009880 <dhcp_start+0xa8>
 8009872:	4b19      	ldr	r3, [pc, #100]	; (80098d8 <dhcp_start+0x100>)
 8009874:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009878:	491c      	ldr	r1, [pc, #112]	; (80098ec <dhcp_start+0x114>)
 800987a:	4819      	ldr	r0, [pc, #100]	; (80098e0 <dhcp_start+0x108>)
 800987c:	f003 fdac 	bl	800d3d8 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	7a1b      	ldrb	r3, [r3, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009888:	f7ff fcd4 	bl	8009234 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800988c:	2240      	movs	r2, #64	; 0x40
 800988e:	2100      	movs	r1, #0
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f003 fd99 	bl	800d3c8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8009896:	f7ff fc7b 	bl	8009190 <dhcp_inc_pcb_refcount>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <dhcp_start+0xce>
    return ERR_MEM;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	e013      	b.n	80098ce <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f8b5 	bl	8009a1c <dhcp_discover>
 80098b2:	4603      	mov	r3, r0
 80098b4:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80098b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fc3a 	bl	800a138 <dhcp_stop>
    return ERR_MEM;
 80098c4:	f04f 33ff 	mov.w	r3, #4294967295
 80098c8:	e001      	b.n	80098ce <dhcp_start+0xf6>
  }
  return result;
 80098ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	0800f8a0 	.word	0x0800f8a0
 80098dc:	0800f94c 	.word	0x0800f94c
 80098e0:	0800f900 	.word	0x0800f900
 80098e4:	0800f990 	.word	0x0800f990
 80098e8:	0800f9b4 	.word	0x0800f9b4
 80098ec:	0800f9cc 	.word	0x0800f9cc

080098f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d107      	bne.n	8009910 <dhcp_arp_reply+0x20>
 8009900:	4b0e      	ldr	r3, [pc, #56]	; (800993c <dhcp_arp_reply+0x4c>)
 8009902:	f240 327b 	movw	r2, #891	; 0x37b
 8009906:	490e      	ldr	r1, [pc, #56]	; (8009940 <dhcp_arp_reply+0x50>)
 8009908:	480e      	ldr	r0, [pc, #56]	; (8009944 <dhcp_arp_reply+0x54>)
 800990a:	f003 fd65 	bl	800d3d8 <iprintf>
 800990e:	e012      	b.n	8009936 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a1b      	ldr	r3, [r3, #32]
 8009914:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00c      	beq.n	8009936 <dhcp_arp_reply+0x46>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	7a5b      	ldrb	r3, [r3, #9]
 8009920:	2b08      	cmp	r3, #8
 8009922:	d108      	bne.n	8009936 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992c:	429a      	cmp	r2, r3
 800992e:	d102      	bne.n	8009936 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f809 	bl	8009948 <dhcp_decline>
    }
  }
}
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	0800f8a0 	.word	0x0800f8a0
 8009940:	0800f94c 	.word	0x0800f94c
 8009944:	0800f900 	.word	0x0800f900

08009948 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af02      	add	r7, sp, #8
 800994e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800995a:	210c      	movs	r1, #12
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fc23 	bl	800a1a8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8009962:	2204      	movs	r2, #4
 8009964:	68f9      	ldr	r1, [r7, #12]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 f8a4 	bl	800aab4 <dhcp_create_msg>
 800996c:	4603      	mov	r3, r0
 800996e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8009970:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d12a      	bne.n	80099ce <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009978:	2204      	movs	r2, #4
 800997a:	2132      	movs	r1, #50	; 0x32
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fc2d 	bl	800a1dc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009986:	4618      	mov	r0, r3
 8009988:	f7f9 f8bc 	bl	8002b04 <lwip_htonl>
 800998c:	4603      	mov	r3, r0
 800998e:	4619      	mov	r1, r3
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fcbf 	bl	800a314 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f001 fa30 	bl	800adfc <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8a9b      	ldrh	r3, [r3, #20]
 80099a4:	33f0      	adds	r3, #240	; 0xf0
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f7fa f826 	bl	80039fc <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80099b0:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <dhcp_decline+0xc4>)
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	68d9      	ldr	r1, [r3, #12]
 80099b8:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <dhcp_decline+0xc8>)
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	2343      	movs	r3, #67	; 0x43
 80099c2:	4a14      	ldr	r2, [pc, #80]	; (8009a14 <dhcp_decline+0xcc>)
 80099c4:	f7ff f9fa 	bl	8008dbc <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f001 f9d5 	bl	800ad78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	7a9b      	ldrb	r3, [r3, #10]
 80099d2:	2bff      	cmp	r3, #255	; 0xff
 80099d4:	d005      	beq.n	80099e2 <dhcp_decline+0x9a>
    dhcp->tries++;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	7a9b      	ldrb	r3, [r3, #10]
 80099da:	3301      	adds	r3, #1
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 80099e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80099e6:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80099e8:	893b      	ldrh	r3, [r7, #8]
 80099ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80099ee:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <dhcp_decline+0xd0>)
 80099f0:	fb82 1203 	smull	r1, r2, r2, r3
 80099f4:	1152      	asrs	r2, r2, #5
 80099f6:	17db      	asrs	r3, r3, #31
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009a00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000110 	.word	0x20000110
 8009a10:	0801050c 	.word	0x0801050c
 8009a14:	08010510 	.word	0x08010510
 8009a18:	10624dd3 	.word	0x10624dd3

08009a1c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2200      	movs	r2, #0
 8009a32:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009a34:	2106      	movs	r1, #6
 8009a36:	6938      	ldr	r0, [r7, #16]
 8009a38:	f000 fbb6 	bl	800a1a8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	6939      	ldr	r1, [r7, #16]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 f837 	bl	800aab4 <dhcp_create_msg>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8009a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d13b      	bne.n	8009aca <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009a52:	2202      	movs	r2, #2
 8009a54:	2139      	movs	r1, #57	; 0x39
 8009a56:	6938      	ldr	r0, [r7, #16]
 8009a58:	f000 fbc0 	bl	800a1dc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a60:	4619      	mov	r1, r3
 8009a62:	6938      	ldr	r0, [r7, #16]
 8009a64:	f000 fc1c 	bl	800a2a0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009a68:	2203      	movs	r2, #3
 8009a6a:	2137      	movs	r1, #55	; 0x37
 8009a6c:	6938      	ldr	r0, [r7, #16]
 8009a6e:	f000 fbb5 	bl	800a1dc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
 8009a76:	e009      	b.n	8009a8c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	4a29      	ldr	r2, [pc, #164]	; (8009b20 <dhcp_discover+0x104>)
 8009a7c:	5cd3      	ldrb	r3, [r2, r3]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6938      	ldr	r0, [r7, #16]
 8009a82:	f000 fbe5 	bl	800a250 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	75fb      	strb	r3, [r7, #23]
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d9f2      	bls.n	8009a78 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8009a92:	6938      	ldr	r0, [r7, #16]
 8009a94:	f001 f9b2 	bl	800adfc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	8a9b      	ldrh	r3, [r3, #20]
 8009aa0:	33f0      	adds	r3, #240	; 0xf0
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	f7f9 ffa8 	bl	80039fc <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009aac:	4b1d      	ldr	r3, [pc, #116]	; (8009b24 <dhcp_discover+0x108>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	68d9      	ldr	r1, [r3, #12]
 8009ab4:	4b1c      	ldr	r3, [pc, #112]	; (8009b28 <dhcp_discover+0x10c>)
 8009ab6:	9301      	str	r3, [sp, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2343      	movs	r3, #67	; 0x43
 8009abe:	4a1b      	ldr	r2, [pc, #108]	; (8009b2c <dhcp_discover+0x110>)
 8009ac0:	f7ff f97c 	bl	8008dbc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8009ac4:	6938      	ldr	r0, [r7, #16]
 8009ac6:	f001 f957 	bl	800ad78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	7a9b      	ldrb	r3, [r3, #10]
 8009ace:	2bff      	cmp	r3, #255	; 0xff
 8009ad0:	d005      	beq.n	8009ade <dhcp_discover+0xc2>
    dhcp->tries++;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	7a9b      	ldrb	r3, [r3, #10]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	7a9b      	ldrb	r3, [r3, #10]
 8009ae2:	2b05      	cmp	r3, #5
 8009ae4:	d807      	bhi.n	8009af6 <dhcp_discover+0xda>
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	7a9b      	ldrb	r3, [r3, #10]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009af0:	4093      	lsls	r3, r2
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	e001      	b.n	8009afa <dhcp_discover+0xde>
 8009af6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009afa:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009afc:	89bb      	ldrh	r3, [r7, #12]
 8009afe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009b02:	4a0b      	ldr	r2, [pc, #44]	; (8009b30 <dhcp_discover+0x114>)
 8009b04:	fb82 1203 	smull	r1, r2, r2, r3
 8009b08:	1152      	asrs	r2, r2, #5
 8009b0a:	17db      	asrs	r3, r3, #31
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20000014 	.word	0x20000014
 8009b24:	20000110 	.word	0x20000110
 8009b28:	0801050c 	.word	0x0801050c
 8009b2c:	08010510 	.word	0x08010510
 8009b30:	10624dd3 	.word	0x10624dd3

08009b34 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b088      	sub	sp, #32
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d107      	bne.n	8009b52 <dhcp_bind+0x1e>
 8009b42:	4b64      	ldr	r3, [pc, #400]	; (8009cd4 <dhcp_bind+0x1a0>)
 8009b44:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009b48:	4963      	ldr	r1, [pc, #396]	; (8009cd8 <dhcp_bind+0x1a4>)
 8009b4a:	4864      	ldr	r0, [pc, #400]	; (8009cdc <dhcp_bind+0x1a8>)
 8009b4c:	f003 fc44 	bl	800d3d8 <iprintf>
 8009b50:	e0bc      	b.n	8009ccc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d107      	bne.n	8009b6e <dhcp_bind+0x3a>
 8009b5e:	4b5d      	ldr	r3, [pc, #372]	; (8009cd4 <dhcp_bind+0x1a0>)
 8009b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b64:	495e      	ldr	r1, [pc, #376]	; (8009ce0 <dhcp_bind+0x1ac>)
 8009b66:	485d      	ldr	r0, [pc, #372]	; (8009cdc <dhcp_bind+0x1a8>)
 8009b68:	f003 fc36 	bl	800d3d8 <iprintf>
 8009b6c:	e0ae      	b.n	8009ccc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	2200      	movs	r2, #0
 8009b72:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d019      	beq.n	8009bb2 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	331e      	adds	r3, #30
 8009b84:	4a57      	ldr	r2, [pc, #348]	; (8009ce4 <dhcp_bind+0x1b0>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b94:	d302      	bcc.n	8009b9c <dhcp_bind+0x68>
       timeout = 0xffff;
 8009b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b9a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d01d      	beq.n	8009bf8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	331e      	adds	r3, #30
 8009bc2:	4a48      	ldr	r2, [pc, #288]	; (8009ce4 <dhcp_bind+0x1b0>)
 8009bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc8:	095b      	lsrs	r3, r3, #5
 8009bca:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd2:	d302      	bcc.n	8009bda <dhcp_bind+0xa6>
      timeout = 0xffff;
 8009bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bd8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	8b1b      	ldrh	r3, [r3, #24]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	2201      	movs	r2, #1
 8009bee:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	8b1a      	ldrh	r2, [r3, #24]
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d01d      	beq.n	8009c3e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c06:	331e      	adds	r3, #30
 8009c08:	4a36      	ldr	r2, [pc, #216]	; (8009ce4 <dhcp_bind+0x1b0>)
 8009c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0e:	095b      	lsrs	r3, r3, #5
 8009c10:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c18:	d302      	bcc.n	8009c20 <dhcp_bind+0xec>
      timeout = 0xffff;
 8009c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c1e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	8b5b      	ldrh	r3, [r3, #26]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d102      	bne.n	8009c36 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	2201      	movs	r2, #1
 8009c34:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	8b5a      	ldrh	r2, [r3, #26]
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	8b1a      	ldrh	r2, [r3, #24]
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	8b5b      	ldrh	r3, [r3, #26]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d306      	bcc.n	8009c58 <dhcp_bind+0x124>
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	8b5b      	ldrh	r3, [r3, #26]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2200      	movs	r2, #0
 8009c56:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	7adb      	ldrb	r3, [r3, #11]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	e014      	b.n	8009c92 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	3328      	adds	r3, #40	; 0x28
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8009c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	db02      	blt.n	8009c7e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8009c78:	23ff      	movs	r3, #255	; 0xff
 8009c7a:	613b      	str	r3, [r7, #16]
 8009c7c:	e009      	b.n	8009c92 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2bbf      	cmp	r3, #191	; 0xbf
 8009c82:	d903      	bls.n	8009c8c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8009c84:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009c88:	613b      	str	r3, [r7, #16]
 8009c8a:	e002      	b.n	8009c92 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8009c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c90:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c96:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d108      	bne.n	8009cb0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8009cb0:	210a      	movs	r1, #10
 8009cb2:	69b8      	ldr	r0, [r7, #24]
 8009cb4:	f000 fa78 	bl	800a1a8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009cbe:	f107 030c 	add.w	r3, r7, #12
 8009cc2:	f107 0210 	add.w	r2, r7, #16
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7f9 fb90 	bl	80033ec <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	0800f8a0 	.word	0x0800f8a0
 8009cd8:	0800f9e0 	.word	0x0800f9e0
 8009cdc:	0800f900 	.word	0x0800f900
 8009ce0:	0800f9fc 	.word	0x0800f9fc
 8009ce4:	88888889 	.word	0x88888889

08009ce8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8009cf6:	2105      	movs	r1, #5
 8009cf8:	6938      	ldr	r0, [r7, #16]
 8009cfa:	f000 fa55 	bl	800a1a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009cfe:	2203      	movs	r2, #3
 8009d00:	6939      	ldr	r1, [r7, #16]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fed6 	bl	800aab4 <dhcp_create_msg>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8009d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d13b      	bne.n	8009d8c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009d14:	2202      	movs	r2, #2
 8009d16:	2139      	movs	r1, #57	; 0x39
 8009d18:	6938      	ldr	r0, [r7, #16]
 8009d1a:	f000 fa5f 	bl	800a1dc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d22:	4619      	mov	r1, r3
 8009d24:	6938      	ldr	r0, [r7, #16]
 8009d26:	f000 fabb 	bl	800a2a0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	2137      	movs	r1, #55	; 0x37
 8009d2e:	6938      	ldr	r0, [r7, #16]
 8009d30:	f000 fa54 	bl	800a1dc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009d34:	2300      	movs	r3, #0
 8009d36:	75fb      	strb	r3, [r7, #23]
 8009d38:	e009      	b.n	8009d4e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	4a2a      	ldr	r2, [pc, #168]	; (8009de8 <dhcp_renew+0x100>)
 8009d3e:	5cd3      	ldrb	r3, [r2, r3]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6938      	ldr	r0, [r7, #16]
 8009d44:	f000 fa84 	bl	800a250 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	75fb      	strb	r3, [r7, #23]
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d9f2      	bls.n	8009d3a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8009d54:	6938      	ldr	r0, [r7, #16]
 8009d56:	f001 f851 	bl	800adfc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	8a9b      	ldrh	r3, [r3, #20]
 8009d62:	33f0      	adds	r3, #240	; 0xf0
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	4619      	mov	r1, r3
 8009d68:	4610      	mov	r0, r2
 8009d6a:	f7f9 fe47 	bl	80039fc <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8009d6e:	4b1f      	ldr	r3, [pc, #124]	; (8009dec <dhcp_renew+0x104>)
 8009d70:	6818      	ldr	r0, [r3, #0]
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	68d9      	ldr	r1, [r3, #12]
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	2343      	movs	r3, #67	; 0x43
 8009d82:	f7fe ffdd 	bl	8008d40 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009d86:	6938      	ldr	r0, [r7, #16]
 8009d88:	f000 fff6 	bl	800ad78 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	7a9b      	ldrb	r3, [r3, #10]
 8009d90:	2bff      	cmp	r3, #255	; 0xff
 8009d92:	d005      	beq.n	8009da0 <dhcp_renew+0xb8>
    dhcp->tries++;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	7a9b      	ldrb	r3, [r3, #10]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	7a9b      	ldrb	r3, [r3, #10]
 8009da4:	2b09      	cmp	r3, #9
 8009da6:	d80a      	bhi.n	8009dbe <dhcp_renew+0xd6>
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	7a9b      	ldrb	r3, [r3, #10]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	0152      	lsls	r2, r2, #5
 8009db2:	1ad2      	subs	r2, r2, r3
 8009db4:	0092      	lsls	r2, r2, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	e001      	b.n	8009dc2 <dhcp_renew+0xda>
 8009dbe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009dc2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009dc4:	89bb      	ldrh	r3, [r7, #12]
 8009dc6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009dca:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <dhcp_renew+0x108>)
 8009dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8009dd0:	1152      	asrs	r2, r2, #5
 8009dd2:	17db      	asrs	r3, r3, #31
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000014 	.word	0x20000014
 8009dec:	20000110 	.word	0x20000110
 8009df0:	10624dd3 	.word	0x10624dd3

08009df4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8009e02:	2104      	movs	r1, #4
 8009e04:	6938      	ldr	r0, [r7, #16]
 8009e06:	f000 f9cf 	bl	800a1a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009e0a:	2203      	movs	r2, #3
 8009e0c:	6939      	ldr	r1, [r7, #16]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fe50 	bl	800aab4 <dhcp_create_msg>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8009e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d139      	bne.n	8009e94 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009e20:	2202      	movs	r2, #2
 8009e22:	2139      	movs	r1, #57	; 0x39
 8009e24:	6938      	ldr	r0, [r7, #16]
 8009e26:	f000 f9d9 	bl	800a1dc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6938      	ldr	r0, [r7, #16]
 8009e32:	f000 fa35 	bl	800a2a0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009e36:	2203      	movs	r2, #3
 8009e38:	2137      	movs	r1, #55	; 0x37
 8009e3a:	6938      	ldr	r0, [r7, #16]
 8009e3c:	f000 f9ce 	bl	800a1dc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009e40:	2300      	movs	r3, #0
 8009e42:	75fb      	strb	r3, [r7, #23]
 8009e44:	e009      	b.n	8009e5a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	4a29      	ldr	r2, [pc, #164]	; (8009ef0 <dhcp_rebind+0xfc>)
 8009e4a:	5cd3      	ldrb	r3, [r2, r3]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6938      	ldr	r0, [r7, #16]
 8009e50:	f000 f9fe 	bl	800a250 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	3301      	adds	r3, #1
 8009e58:	75fb      	strb	r3, [r7, #23]
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d9f2      	bls.n	8009e46 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8009e60:	6938      	ldr	r0, [r7, #16]
 8009e62:	f000 ffcb 	bl	800adfc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	8a9b      	ldrh	r3, [r3, #20]
 8009e6e:	33f0      	adds	r3, #240	; 0xf0
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	4619      	mov	r1, r3
 8009e74:	4610      	mov	r0, r2
 8009e76:	f7f9 fdc1 	bl	80039fc <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8009e7a:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <dhcp_rebind+0x100>)
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	68d9      	ldr	r1, [r3, #12]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	2343      	movs	r3, #67	; 0x43
 8009e88:	4a1b      	ldr	r2, [pc, #108]	; (8009ef8 <dhcp_rebind+0x104>)
 8009e8a:	f7fe ff59 	bl	8008d40 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009e8e:	6938      	ldr	r0, [r7, #16]
 8009e90:	f000 ff72 	bl	800ad78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	7a9b      	ldrb	r3, [r3, #10]
 8009e98:	2bff      	cmp	r3, #255	; 0xff
 8009e9a:	d005      	beq.n	8009ea8 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	7a9b      	ldrb	r3, [r3, #10]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	7a9b      	ldrb	r3, [r3, #10]
 8009eac:	2b09      	cmp	r3, #9
 8009eae:	d80a      	bhi.n	8009ec6 <dhcp_rebind+0xd2>
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	7a9b      	ldrb	r3, [r3, #10]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	0152      	lsls	r2, r2, #5
 8009eba:	1ad2      	subs	r2, r2, r3
 8009ebc:	0092      	lsls	r2, r2, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	e001      	b.n	8009eca <dhcp_rebind+0xd6>
 8009ec6:	f242 7310 	movw	r3, #10000	; 0x2710
 8009eca:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009ecc:	89bb      	ldrh	r3, [r7, #12]
 8009ece:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	; (8009efc <dhcp_rebind+0x108>)
 8009ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8009ed8:	1152      	asrs	r2, r2, #5
 8009eda:	17db      	asrs	r3, r3, #31
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000014 	.word	0x20000014
 8009ef4:	20000110 	.word	0x20000110
 8009ef8:	08010510 	.word	0x08010510
 8009efc:	10624dd3 	.word	0x10624dd3

08009f00 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8009f0e:	2103      	movs	r1, #3
 8009f10:	6938      	ldr	r0, [r7, #16]
 8009f12:	f000 f949 	bl	800a1a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009f16:	2203      	movs	r2, #3
 8009f18:	6939      	ldr	r1, [r7, #16]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fdca 	bl	800aab4 <dhcp_create_msg>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8009f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d147      	bne.n	8009fbc <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	2139      	movs	r1, #57	; 0x39
 8009f30:	6938      	ldr	r0, [r7, #16]
 8009f32:	f000 f953 	bl	800a1dc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8009f36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f3a:	6938      	ldr	r0, [r7, #16]
 8009f3c:	f000 f9b0 	bl	800a2a0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009f40:	2204      	movs	r2, #4
 8009f42:	2132      	movs	r1, #50	; 0x32
 8009f44:	6938      	ldr	r0, [r7, #16]
 8009f46:	f000 f949 	bl	800a1dc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7f8 fdd8 	bl	8002b04 <lwip_htonl>
 8009f54:	4603      	mov	r3, r0
 8009f56:	4619      	mov	r1, r3
 8009f58:	6938      	ldr	r0, [r7, #16]
 8009f5a:	f000 f9db 	bl	800a314 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009f5e:	2203      	movs	r2, #3
 8009f60:	2137      	movs	r1, #55	; 0x37
 8009f62:	6938      	ldr	r0, [r7, #16]
 8009f64:	f000 f93a 	bl	800a1dc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009f68:	2300      	movs	r3, #0
 8009f6a:	75fb      	strb	r3, [r7, #23]
 8009f6c:	e009      	b.n	8009f82 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	4a29      	ldr	r2, [pc, #164]	; (800a018 <dhcp_reboot+0x118>)
 8009f72:	5cd3      	ldrb	r3, [r2, r3]
 8009f74:	4619      	mov	r1, r3
 8009f76:	6938      	ldr	r0, [r7, #16]
 8009f78:	f000 f96a 	bl	800a250 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	75fb      	strb	r3, [r7, #23]
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d9f2      	bls.n	8009f6e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8009f88:	6938      	ldr	r0, [r7, #16]
 8009f8a:	f000 ff37 	bl	800adfc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	8a9b      	ldrh	r3, [r3, #20]
 8009f96:	33f0      	adds	r3, #240	; 0xf0
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7f9 fd2d 	bl	80039fc <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8009fa2:	4b1e      	ldr	r3, [pc, #120]	; (800a01c <dhcp_reboot+0x11c>)
 8009fa4:	6818      	ldr	r0, [r3, #0]
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	68d9      	ldr	r1, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	2343      	movs	r3, #67	; 0x43
 8009fb0:	4a1b      	ldr	r2, [pc, #108]	; (800a020 <dhcp_reboot+0x120>)
 8009fb2:	f7fe fec5 	bl	8008d40 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009fb6:	6938      	ldr	r0, [r7, #16]
 8009fb8:	f000 fede 	bl	800ad78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	7a9b      	ldrb	r3, [r3, #10]
 8009fc0:	2bff      	cmp	r3, #255	; 0xff
 8009fc2:	d005      	beq.n	8009fd0 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	7a9b      	ldrb	r3, [r3, #10]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	7a9b      	ldrb	r3, [r3, #10]
 8009fd4:	2b09      	cmp	r3, #9
 8009fd6:	d80a      	bhi.n	8009fee <dhcp_reboot+0xee>
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	7a9b      	ldrb	r3, [r3, #10]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	461a      	mov	r2, r3
 8009fe0:	0152      	lsls	r2, r2, #5
 8009fe2:	1ad2      	subs	r2, r2, r3
 8009fe4:	0092      	lsls	r2, r2, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	e001      	b.n	8009ff2 <dhcp_reboot+0xf2>
 8009fee:	f242 7310 	movw	r3, #10000	; 0x2710
 8009ff2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009ff4:	89bb      	ldrh	r3, [r7, #12]
 8009ff6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009ffa:	4a0a      	ldr	r2, [pc, #40]	; (800a024 <dhcp_reboot+0x124>)
 8009ffc:	fb82 1203 	smull	r1, r2, r2, r3
 800a000:	1152      	asrs	r2, r2, #5
 800a002:	17db      	asrs	r3, r3, #31
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	b29a      	uxth	r2, r3
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20000014 	.word	0x20000014
 800a01c:	20000110 	.word	0x20000110
 800a020:	08010510 	.word	0x08010510
 800a024:	10624dd3 	.word	0x10624dd3

0800a028 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b088      	sub	sp, #32
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d102      	bne.n	800a042 <dhcp_release+0x1a>
    return ERR_ARG;
 800a03c:	f06f 030f 	mvn.w	r3, #15
 800a040:	e072      	b.n	800a128 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 ff31 	bl	800aeb0 <dhcp_supplied_address>
 800a04e:	4603      	mov	r3, r0
 800a050:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a052:	2100      	movs	r1, #0
 800a054:	6978      	ldr	r0, [r7, #20]
 800a056:	f000 f8a7 	bl	800a1a8 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2200      	movs	r2, #0
 800a05e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2200      	movs	r2, #0
 800a064:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2200      	movs	r2, #0
 800a06a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2200      	movs	r2, #0
 800a070:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2200      	movs	r2, #0
 800a076:	63da      	str	r2, [r3, #60]	; 0x3c
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	639a      	str	r2, [r3, #56]	; 0x38
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	845a      	strh	r2, [r3, #34]	; 0x22
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	841a      	strh	r2, [r3, #32]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	8c1a      	ldrh	r2, [r3, #32]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	83da      	strh	r2, [r3, #30]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	8bda      	ldrh	r2, [r3, #30]
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800a0a6:	7cfb      	ldrb	r3, [r7, #19]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e03b      	b.n	800a128 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	6979      	ldr	r1, [r7, #20]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fcfd 	bl	800aab4 <dhcp_create_msg>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800a0be:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d128      	bne.n	800a118 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a0c6:	2204      	movs	r2, #4
 800a0c8:	2136      	movs	r1, #54	; 0x36
 800a0ca:	6978      	ldr	r0, [r7, #20]
 800a0cc:	f000 f886 	bl	800a1dc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7f8 fd16 	bl	8002b04 <lwip_htonl>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6978      	ldr	r0, [r7, #20]
 800a0de:	f000 f919 	bl	800a314 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a0e2:	6978      	ldr	r0, [r7, #20]
 800a0e4:	f000 fe8a 	bl	800adfc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	8a9b      	ldrh	r3, [r3, #20]
 800a0f0:	33f0      	adds	r3, #240	; 0xf0
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	f7f9 fc80 	bl	80039fc <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800a0fc:	4b0c      	ldr	r3, [pc, #48]	; (800a130 <dhcp_release+0x108>)
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	68d9      	ldr	r1, [r3, #12]
 800a104:	f107 020c 	add.w	r2, r7, #12
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	2343      	movs	r3, #67	; 0x43
 800a10e:	f7fe fe17 	bl	8008d40 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a112:	6978      	ldr	r0, [r7, #20]
 800a114:	f000 fe30 	bl	800ad78 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a118:	4b06      	ldr	r3, [pc, #24]	; (800a134 <dhcp_release+0x10c>)
 800a11a:	4a06      	ldr	r2, [pc, #24]	; (800a134 <dhcp_release+0x10c>)
 800a11c:	4905      	ldr	r1, [pc, #20]	; (800a134 <dhcp_release+0x10c>)
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7f9 f964 	bl	80033ec <netif_set_addr>

  return result;
 800a124:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20000110 	.word	0x20000110
 800a134:	0801050c 	.word	0x0801050c

0800a138 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d107      	bne.n	800a156 <dhcp_stop+0x1e>
 800a146:	4b14      	ldr	r3, [pc, #80]	; (800a198 <dhcp_stop+0x60>)
 800a148:	f240 5242 	movw	r2, #1346	; 0x542
 800a14c:	4913      	ldr	r1, [pc, #76]	; (800a19c <dhcp_stop+0x64>)
 800a14e:	4814      	ldr	r0, [pc, #80]	; (800a1a0 <dhcp_stop+0x68>)
 800a150:	f003 f942 	bl	800d3d8 <iprintf>
 800a154:	e01d      	b.n	800a192 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d017      	beq.n	800a192 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d006      	beq.n	800a178 <dhcp_stop+0x40>
 800a16a:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <dhcp_stop+0x60>)
 800a16c:	f240 524f 	movw	r2, #1359	; 0x54f
 800a170:	490c      	ldr	r1, [pc, #48]	; (800a1a4 <dhcp_stop+0x6c>)
 800a172:	480b      	ldr	r0, [pc, #44]	; (800a1a0 <dhcp_stop+0x68>)
 800a174:	f003 f930 	bl	800d3d8 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a178:	2100      	movs	r1, #0
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 f814 	bl	800a1a8 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	7a1b      	ldrb	r3, [r3, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a188:	f7ff f854 	bl	8009234 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	0800f8a0 	.word	0x0800f8a0
 800a19c:	0800fa14 	.word	0x0800fa14
 800a1a0:	0800f900 	.word	0x0800f900
 800a1a4:	0800f9cc 	.word	0x0800f9cc

0800a1a8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	7a5b      	ldrb	r3, [r3, #9]
 800a1b8:	78fa      	ldrb	r2, [r7, #3]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d008      	beq.n	800a1d0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	78fa      	ldrb	r2, [r7, #3]
 800a1c2:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	82da      	strh	r2, [r3, #22]
  }
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bc80      	pop	{r7}
 800a1d8:	4770      	bx	lr
	...

0800a1dc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	8a9b      	ldrh	r3, [r3, #20]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	78bb      	ldrb	r3, [r7, #2]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	3302      	adds	r3, #2
 800a1f8:	2b44      	cmp	r3, #68	; 0x44
 800a1fa:	d906      	bls.n	800a20a <dhcp_option+0x2e>
 800a1fc:	4b11      	ldr	r3, [pc, #68]	; (800a244 <dhcp_option+0x68>)
 800a1fe:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a202:	4911      	ldr	r1, [pc, #68]	; (800a248 <dhcp_option+0x6c>)
 800a204:	4811      	ldr	r0, [pc, #68]	; (800a24c <dhcp_option+0x70>)
 800a206:	f003 f8e7 	bl	800d3d8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691a      	ldr	r2, [r3, #16]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	8a9b      	ldrh	r3, [r3, #20]
 800a212:	1c59      	adds	r1, r3, #1
 800a214:	b288      	uxth	r0, r1
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	8288      	strh	r0, [r1, #20]
 800a21a:	4413      	add	r3, r2
 800a21c:	78fa      	ldrb	r2, [r7, #3]
 800a21e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	691a      	ldr	r2, [r3, #16]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	8a9b      	ldrh	r3, [r3, #20]
 800a22a:	1c59      	adds	r1, r3, #1
 800a22c:	b288      	uxth	r0, r1
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	8288      	strh	r0, [r1, #20]
 800a232:	4413      	add	r3, r2
 800a234:	78ba      	ldrb	r2, [r7, #2]
 800a236:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800a23a:	bf00      	nop
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	0800f8a0 	.word	0x0800f8a0
 800a248:	0800fa30 	.word	0x0800fa30
 800a24c:	0800f900 	.word	0x0800f900

0800a250 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	8a9b      	ldrh	r3, [r3, #20]
 800a260:	2b43      	cmp	r3, #67	; 0x43
 800a262:	d906      	bls.n	800a272 <dhcp_option_byte+0x22>
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <dhcp_option_byte+0x44>)
 800a266:	f240 527b 	movw	r2, #1403	; 0x57b
 800a26a:	490b      	ldr	r1, [pc, #44]	; (800a298 <dhcp_option_byte+0x48>)
 800a26c:	480b      	ldr	r0, [pc, #44]	; (800a29c <dhcp_option_byte+0x4c>)
 800a26e:	f003 f8b3 	bl	800d3d8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691a      	ldr	r2, [r3, #16]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	8a9b      	ldrh	r3, [r3, #20]
 800a27a:	1c59      	adds	r1, r3, #1
 800a27c:	b288      	uxth	r0, r1
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	8288      	strh	r0, [r1, #20]
 800a282:	4413      	add	r3, r2
 800a284:	78fa      	ldrb	r2, [r7, #3]
 800a286:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800a28a:	bf00      	nop
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	0800f8a0 	.word	0x0800f8a0
 800a298:	0800fa78 	.word	0x0800fa78
 800a29c:	0800f900 	.word	0x0800f900

0800a2a0 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800a2a0:	b590      	push	{r4, r7, lr}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	8a9b      	ldrh	r3, [r3, #20]
 800a2b0:	3302      	adds	r3, #2
 800a2b2:	2b44      	cmp	r3, #68	; 0x44
 800a2b4:	d906      	bls.n	800a2c4 <dhcp_option_short+0x24>
 800a2b6:	4b14      	ldr	r3, [pc, #80]	; (800a308 <dhcp_option_short+0x68>)
 800a2b8:	f240 5282 	movw	r2, #1410	; 0x582
 800a2bc:	4913      	ldr	r1, [pc, #76]	; (800a30c <dhcp_option_short+0x6c>)
 800a2be:	4814      	ldr	r0, [pc, #80]	; (800a310 <dhcp_option_short+0x70>)
 800a2c0:	f003 f88a 	bl	800d3d8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800a2c4:	887b      	ldrh	r3, [r7, #2]
 800a2c6:	0a1b      	lsrs	r3, r3, #8
 800a2c8:	b298      	uxth	r0, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691a      	ldr	r2, [r3, #16]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	8a9b      	ldrh	r3, [r3, #20]
 800a2d2:	1c59      	adds	r1, r3, #1
 800a2d4:	b28c      	uxth	r4, r1
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	828c      	strh	r4, [r1, #20]
 800a2da:	b2c1      	uxtb	r1, r0
 800a2dc:	4413      	add	r3, r2
 800a2de:	460a      	mov	r2, r1
 800a2e0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691a      	ldr	r2, [r3, #16]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	8a9b      	ldrh	r3, [r3, #20]
 800a2ec:	1c59      	adds	r1, r3, #1
 800a2ee:	b288      	uxth	r0, r1
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	8288      	strh	r0, [r1, #20]
 800a2f4:	8879      	ldrh	r1, [r7, #2]
 800a2f6:	b2c9      	uxtb	r1, r1
 800a2f8:	4413      	add	r3, r2
 800a2fa:	460a      	mov	r2, r1
 800a2fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}
 800a308:	0800f8a0 	.word	0x0800f8a0
 800a30c:	0800fab4 	.word	0x0800fab4
 800a310:	0800f900 	.word	0x0800f900

0800a314 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800a314:	b590      	push	{r4, r7, lr}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8a9b      	ldrh	r3, [r3, #20]
 800a322:	3304      	adds	r3, #4
 800a324:	2b44      	cmp	r3, #68	; 0x44
 800a326:	d906      	bls.n	800a336 <dhcp_option_long+0x22>
 800a328:	4b22      	ldr	r3, [pc, #136]	; (800a3b4 <dhcp_option_long+0xa0>)
 800a32a:	f240 528a 	movw	r2, #1418	; 0x58a
 800a32e:	4922      	ldr	r1, [pc, #136]	; (800a3b8 <dhcp_option_long+0xa4>)
 800a330:	4822      	ldr	r0, [pc, #136]	; (800a3bc <dhcp_option_long+0xa8>)
 800a332:	f003 f851 	bl	800d3d8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	0e18      	lsrs	r0, r3, #24
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	691a      	ldr	r2, [r3, #16]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	8a9b      	ldrh	r3, [r3, #20]
 800a342:	1c59      	adds	r1, r3, #1
 800a344:	b28c      	uxth	r4, r1
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	828c      	strh	r4, [r1, #20]
 800a34a:	b2c1      	uxtb	r1, r0
 800a34c:	4413      	add	r3, r2
 800a34e:	460a      	mov	r2, r1
 800a350:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	0c18      	lsrs	r0, r3, #16
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8a9b      	ldrh	r3, [r3, #20]
 800a360:	1c59      	adds	r1, r3, #1
 800a362:	b28c      	uxth	r4, r1
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	828c      	strh	r4, [r1, #20]
 800a368:	b2c1      	uxtb	r1, r0
 800a36a:	4413      	add	r3, r2
 800a36c:	460a      	mov	r2, r1
 800a36e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	0a18      	lsrs	r0, r3, #8
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	8a9b      	ldrh	r3, [r3, #20]
 800a37e:	1c59      	adds	r1, r3, #1
 800a380:	b28c      	uxth	r4, r1
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	828c      	strh	r4, [r1, #20]
 800a386:	b2c1      	uxtb	r1, r0
 800a388:	4413      	add	r3, r2
 800a38a:	460a      	mov	r2, r1
 800a38c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	8a9b      	ldrh	r3, [r3, #20]
 800a398:	1c59      	adds	r1, r3, #1
 800a39a:	b288      	uxth	r0, r1
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	8288      	strh	r0, [r1, #20]
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	b2c9      	uxtb	r1, r1
 800a3a4:	4413      	add	r3, r2
 800a3a6:	460a      	mov	r2, r1
 800a3a8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd90      	pop	{r4, r7, pc}
 800a3b4:	0800f8a0 	.word	0x0800f8a0
 800a3b8:	0800faf8 	.word	0x0800faf8
 800a3bc:	0800f900 	.word	0x0800f900

0800a3c0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	; 0x38
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	48b3      	ldr	r0, [pc, #716]	; (800a6a4 <dhcp_parse_reply+0x2e4>)
 800a3d8:	f002 fff6 	bl	800d3c8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	895b      	ldrh	r3, [r3, #10]
 800a3e0:	2b2b      	cmp	r3, #43	; 0x2b
 800a3e2:	d802      	bhi.n	800a3ea <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800a3e4:	f06f 0301 	mvn.w	r3, #1
 800a3e8:	e26a      	b.n	800a8c0 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800a3f2:	23f0      	movs	r3, #240	; 0xf0
 800a3f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	891b      	ldrh	r3, [r3, #8]
 800a3fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800a400:	e00c      	b.n	800a41c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	895b      	ldrh	r3, [r3, #10]
 800a406:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	895b      	ldrh	r3, [r3, #10]
 800a410:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d004      	beq.n	800a42c <dhcp_parse_reply+0x6c>
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	895b      	ldrh	r3, [r3, #10]
 800a426:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a428:	429a      	cmp	r2, r3
 800a42a:	d2ea      	bcs.n	800a402 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d102      	bne.n	800a438 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800a432:	f06f 0301 	mvn.w	r3, #1
 800a436:	e243      	b.n	800a8c0 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800a438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a43a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800a43c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a43e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800a446:	e1fb      	b.n	800a840 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800a448:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a44a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a44c:	4413      	add	r3, r2
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800a456:	f04f 33ff 	mov.w	r3, #4294967295
 800a45a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800a45c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a45e:	3302      	adds	r3, #2
 800a460:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800a462:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a464:	3301      	adds	r3, #1
 800a466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a468:	8952      	ldrh	r2, [r2, #10]
 800a46a:	4293      	cmp	r3, r2
 800a46c:	da06      	bge.n	800a47c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800a46e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a470:	3301      	adds	r3, #1
 800a472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a474:	4413      	add	r3, r2
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	77fb      	strb	r3, [r7, #31]
 800a47a:	e00a      	b.n	800a492 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d004      	beq.n	800a48e <dhcp_parse_reply+0xce>
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	e000      	b.n	800a490 <dhcp_parse_reply+0xd0>
 800a48e:	2300      	movs	r3, #0
 800a490:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800a492:	7ffb      	ldrb	r3, [r7, #31]
 800a494:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800a496:	7d7b      	ldrb	r3, [r7, #21]
 800a498:	2b3b      	cmp	r3, #59	; 0x3b
 800a49a:	f200 8121 	bhi.w	800a6e0 <dhcp_parse_reply+0x320>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <dhcp_parse_reply+0xe4>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a595 	.word	0x0800a595
 800a4a8:	0800a5a5 	.word	0x0800a5a5
 800a4ac:	0800a6e1 	.word	0x0800a6e1
 800a4b0:	0800a5c5 	.word	0x0800a5c5
 800a4b4:	0800a6e1 	.word	0x0800a6e1
 800a4b8:	0800a6e1 	.word	0x0800a6e1
 800a4bc:	0800a6e1 	.word	0x0800a6e1
 800a4c0:	0800a6e1 	.word	0x0800a6e1
 800a4c4:	0800a6e1 	.word	0x0800a6e1
 800a4c8:	0800a6e1 	.word	0x0800a6e1
 800a4cc:	0800a6e1 	.word	0x0800a6e1
 800a4d0:	0800a6e1 	.word	0x0800a6e1
 800a4d4:	0800a6e1 	.word	0x0800a6e1
 800a4d8:	0800a6e1 	.word	0x0800a6e1
 800a4dc:	0800a6e1 	.word	0x0800a6e1
 800a4e0:	0800a6e1 	.word	0x0800a6e1
 800a4e4:	0800a6e1 	.word	0x0800a6e1
 800a4e8:	0800a6e1 	.word	0x0800a6e1
 800a4ec:	0800a6e1 	.word	0x0800a6e1
 800a4f0:	0800a6e1 	.word	0x0800a6e1
 800a4f4:	0800a6e1 	.word	0x0800a6e1
 800a4f8:	0800a6e1 	.word	0x0800a6e1
 800a4fc:	0800a6e1 	.word	0x0800a6e1
 800a500:	0800a6e1 	.word	0x0800a6e1
 800a504:	0800a6e1 	.word	0x0800a6e1
 800a508:	0800a6e1 	.word	0x0800a6e1
 800a50c:	0800a6e1 	.word	0x0800a6e1
 800a510:	0800a6e1 	.word	0x0800a6e1
 800a514:	0800a6e1 	.word	0x0800a6e1
 800a518:	0800a6e1 	.word	0x0800a6e1
 800a51c:	0800a6e1 	.word	0x0800a6e1
 800a520:	0800a6e1 	.word	0x0800a6e1
 800a524:	0800a6e1 	.word	0x0800a6e1
 800a528:	0800a6e1 	.word	0x0800a6e1
 800a52c:	0800a6e1 	.word	0x0800a6e1
 800a530:	0800a6e1 	.word	0x0800a6e1
 800a534:	0800a6e1 	.word	0x0800a6e1
 800a538:	0800a6e1 	.word	0x0800a6e1
 800a53c:	0800a6e1 	.word	0x0800a6e1
 800a540:	0800a6e1 	.word	0x0800a6e1
 800a544:	0800a6e1 	.word	0x0800a6e1
 800a548:	0800a6e1 	.word	0x0800a6e1
 800a54c:	0800a6e1 	.word	0x0800a6e1
 800a550:	0800a6e1 	.word	0x0800a6e1
 800a554:	0800a6e1 	.word	0x0800a6e1
 800a558:	0800a6e1 	.word	0x0800a6e1
 800a55c:	0800a6e1 	.word	0x0800a6e1
 800a560:	0800a6e1 	.word	0x0800a6e1
 800a564:	0800a6e1 	.word	0x0800a6e1
 800a568:	0800a6e1 	.word	0x0800a6e1
 800a56c:	0800a6e1 	.word	0x0800a6e1
 800a570:	0800a5eb 	.word	0x0800a5eb
 800a574:	0800a60b 	.word	0x0800a60b
 800a578:	0800a645 	.word	0x0800a645
 800a57c:	0800a665 	.word	0x0800a665
 800a580:	0800a6e1 	.word	0x0800a6e1
 800a584:	0800a6e1 	.word	0x0800a6e1
 800a588:	0800a6e1 	.word	0x0800a6e1
 800a58c:	0800a685 	.word	0x0800a685
 800a590:	0800a6c1 	.word	0x0800a6c1
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	77fb      	strb	r3, [r7, #31]
 800a598:	7ffb      	ldrb	r3, [r7, #31]
 800a59a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800a59c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800a5a2:	e0a0      	b.n	800a6e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a5a4:	7ffb      	ldrb	r3, [r7, #31]
 800a5a6:	2b04      	cmp	r3, #4
 800a5a8:	d009      	beq.n	800a5be <dhcp_parse_reply+0x1fe>
 800a5aa:	4b3f      	ldr	r3, [pc, #252]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a5ac:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800a5b0:	493e      	ldr	r1, [pc, #248]	; (800a6ac <dhcp_parse_reply+0x2ec>)
 800a5b2:	483f      	ldr	r0, [pc, #252]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a5b4:	f002 ff10 	bl	800d3d8 <iprintf>
 800a5b8:	f06f 0305 	mvn.w	r3, #5
 800a5bc:	e180      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800a5be:	2306      	movs	r3, #6
 800a5c0:	61bb      	str	r3, [r7, #24]
        break;
 800a5c2:	e090      	b.n	800a6e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a5c8:	7ffa      	ldrb	r2, [r7, #31]
 800a5ca:	7fbb      	ldrb	r3, [r7, #30]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d209      	bcs.n	800a5e4 <dhcp_parse_reply+0x224>
 800a5d0:	4b35      	ldr	r3, [pc, #212]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a5d2:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800a5d6:	4937      	ldr	r1, [pc, #220]	; (800a6b4 <dhcp_parse_reply+0x2f4>)
 800a5d8:	4835      	ldr	r0, [pc, #212]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a5da:	f002 fefd 	bl	800d3d8 <iprintf>
 800a5de:	f06f 0305 	mvn.w	r3, #5
 800a5e2:	e16d      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800a5e4:	2307      	movs	r3, #7
 800a5e6:	61bb      	str	r3, [r7, #24]
        break;
 800a5e8:	e07d      	b.n	800a6e6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a5ea:	7ffb      	ldrb	r3, [r7, #31]
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d009      	beq.n	800a604 <dhcp_parse_reply+0x244>
 800a5f0:	4b2d      	ldr	r3, [pc, #180]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a5f2:	f240 6209 	movw	r2, #1545	; 0x609
 800a5f6:	492d      	ldr	r1, [pc, #180]	; (800a6ac <dhcp_parse_reply+0x2ec>)
 800a5f8:	482d      	ldr	r0, [pc, #180]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a5fa:	f002 feed 	bl	800d3d8 <iprintf>
 800a5fe:	f06f 0305 	mvn.w	r3, #5
 800a602:	e15d      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800a604:	2303      	movs	r3, #3
 800a606:	61bb      	str	r3, [r7, #24]
        break;
 800a608:	e06d      	b.n	800a6e6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a60a:	7ffb      	ldrb	r3, [r7, #31]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d009      	beq.n	800a624 <dhcp_parse_reply+0x264>
 800a610:	4b25      	ldr	r3, [pc, #148]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a612:	f240 6217 	movw	r2, #1559	; 0x617
 800a616:	4928      	ldr	r1, [pc, #160]	; (800a6b8 <dhcp_parse_reply+0x2f8>)
 800a618:	4825      	ldr	r0, [pc, #148]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a61a:	f002 fedd 	bl	800d3d8 <iprintf>
 800a61e:	f06f 0305 	mvn.w	r3, #5
 800a622:	e14d      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800a624:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a626:	2bf0      	cmp	r3, #240	; 0xf0
 800a628:	d009      	beq.n	800a63e <dhcp_parse_reply+0x27e>
 800a62a:	4b1f      	ldr	r3, [pc, #124]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a62c:	f240 6219 	movw	r2, #1561	; 0x619
 800a630:	4922      	ldr	r1, [pc, #136]	; (800a6bc <dhcp_parse_reply+0x2fc>)
 800a632:	481f      	ldr	r0, [pc, #124]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a634:	f002 fed0 	bl	800d3d8 <iprintf>
 800a638:	f06f 0305 	mvn.w	r3, #5
 800a63c:	e140      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800a63e:	2300      	movs	r3, #0
 800a640:	61bb      	str	r3, [r7, #24]
        break;
 800a642:	e050      	b.n	800a6e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a644:	7ffb      	ldrb	r3, [r7, #31]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d009      	beq.n	800a65e <dhcp_parse_reply+0x29e>
 800a64a:	4b17      	ldr	r3, [pc, #92]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a64c:	f240 621d 	movw	r2, #1565	; 0x61d
 800a650:	4919      	ldr	r1, [pc, #100]	; (800a6b8 <dhcp_parse_reply+0x2f8>)
 800a652:	4817      	ldr	r0, [pc, #92]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a654:	f002 fec0 	bl	800d3d8 <iprintf>
 800a658:	f06f 0305 	mvn.w	r3, #5
 800a65c:	e130      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800a65e:	2301      	movs	r3, #1
 800a660:	61bb      	str	r3, [r7, #24]
        break;
 800a662:	e040      	b.n	800a6e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a664:	7ffb      	ldrb	r3, [r7, #31]
 800a666:	2b04      	cmp	r3, #4
 800a668:	d009      	beq.n	800a67e <dhcp_parse_reply+0x2be>
 800a66a:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a66c:	f240 6221 	movw	r2, #1569	; 0x621
 800a670:	490e      	ldr	r1, [pc, #56]	; (800a6ac <dhcp_parse_reply+0x2ec>)
 800a672:	480f      	ldr	r0, [pc, #60]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a674:	f002 feb0 	bl	800d3d8 <iprintf>
 800a678:	f06f 0305 	mvn.w	r3, #5
 800a67c:	e120      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800a67e:	2302      	movs	r3, #2
 800a680:	61bb      	str	r3, [r7, #24]
        break;
 800a682:	e030      	b.n	800a6e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a684:	7ffb      	ldrb	r3, [r7, #31]
 800a686:	2b04      	cmp	r3, #4
 800a688:	d009      	beq.n	800a69e <dhcp_parse_reply+0x2de>
 800a68a:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <dhcp_parse_reply+0x2e8>)
 800a68c:	f240 6225 	movw	r2, #1573	; 0x625
 800a690:	4906      	ldr	r1, [pc, #24]	; (800a6ac <dhcp_parse_reply+0x2ec>)
 800a692:	4807      	ldr	r0, [pc, #28]	; (800a6b0 <dhcp_parse_reply+0x2f0>)
 800a694:	f002 fea0 	bl	800d3d8 <iprintf>
 800a698:	f06f 0305 	mvn.w	r3, #5
 800a69c:	e110      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800a69e:	2304      	movs	r3, #4
 800a6a0:	61bb      	str	r3, [r7, #24]
        break;
 800a6a2:	e020      	b.n	800a6e6 <dhcp_parse_reply+0x326>
 800a6a4:	20008048 	.word	0x20008048
 800a6a8:	0800f8a0 	.word	0x0800f8a0
 800a6ac:	0800fb38 	.word	0x0800fb38
 800a6b0:	0800f900 	.word	0x0800f900
 800a6b4:	0800fb44 	.word	0x0800fb44
 800a6b8:	0800fb58 	.word	0x0800fb58
 800a6bc:	0800fb64 	.word	0x0800fb64
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a6c0:	7ffb      	ldrb	r3, [r7, #31]
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d009      	beq.n	800a6da <dhcp_parse_reply+0x31a>
 800a6c6:	4b80      	ldr	r3, [pc, #512]	; (800a8c8 <dhcp_parse_reply+0x508>)
 800a6c8:	f240 6229 	movw	r2, #1577	; 0x629
 800a6cc:	497f      	ldr	r1, [pc, #508]	; (800a8cc <dhcp_parse_reply+0x50c>)
 800a6ce:	4880      	ldr	r0, [pc, #512]	; (800a8d0 <dhcp_parse_reply+0x510>)
 800a6d0:	f002 fe82 	bl	800d3d8 <iprintf>
 800a6d4:	f06f 0305 	mvn.w	r3, #5
 800a6d8:	e0f2      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800a6da:	2305      	movs	r3, #5
 800a6dc:	61bb      	str	r3, [r7, #24]
        break;
 800a6de:	e002      	b.n	800a6e6 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800a6e4:	bf00      	nop
    }
    offset += len + 2;
 800a6e6:	7ffb      	ldrb	r3, [r7, #31]
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6ec:	4413      	add	r3, r2
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	3302      	adds	r3, #2
 800a6f2:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800a6f4:	7fbb      	ldrb	r3, [r7, #30]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d079      	beq.n	800a7ee <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	2b00      	cmp	r3, #0
 800a702:	db02      	blt.n	800a70a <dhcp_parse_reply+0x34a>
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	2b07      	cmp	r3, #7
 800a708:	dd06      	ble.n	800a718 <dhcp_parse_reply+0x358>
 800a70a:	4b6f      	ldr	r3, [pc, #444]	; (800a8c8 <dhcp_parse_reply+0x508>)
 800a70c:	f240 6236 	movw	r2, #1590	; 0x636
 800a710:	4970      	ldr	r1, [pc, #448]	; (800a8d4 <dhcp_parse_reply+0x514>)
 800a712:	486f      	ldr	r0, [pc, #444]	; (800a8d0 <dhcp_parse_reply+0x510>)
 800a714:	f002 fe60 	bl	800d3d8 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800a718:	4a6f      	ldr	r2, [pc, #444]	; (800a8d8 <dhcp_parse_reply+0x518>)
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	4413      	add	r3, r2
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d164      	bne.n	800a7ee <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800a724:	7fbb      	ldrb	r3, [r7, #30]
 800a726:	2b04      	cmp	r3, #4
 800a728:	bf28      	it	cs
 800a72a:	2304      	movcs	r3, #4
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800a730:	8afb      	ldrh	r3, [r7, #22]
 800a732:	8a7a      	ldrh	r2, [r7, #18]
 800a734:	f107 0108 	add.w	r1, r7, #8
 800a738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a73a:	f7f9 fcd1 	bl	80040e0 <pbuf_copy_partial>
 800a73e:	4603      	mov	r3, r0
 800a740:	461a      	mov	r2, r3
 800a742:	8a7b      	ldrh	r3, [r7, #18]
 800a744:	4293      	cmp	r3, r2
 800a746:	d002      	beq.n	800a74e <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800a748:	f06f 0301 	mvn.w	r3, #1
 800a74c:	e0b8      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800a74e:	7fbb      	ldrb	r3, [r7, #30]
 800a750:	2b04      	cmp	r3, #4
 800a752:	d927      	bls.n	800a7a4 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800a754:	7fbb      	ldrb	r3, [r7, #30]
 800a756:	f003 0303 	and.w	r3, r3, #3
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d009      	beq.n	800a774 <dhcp_parse_reply+0x3b4>
 800a760:	4b59      	ldr	r3, [pc, #356]	; (800a8c8 <dhcp_parse_reply+0x508>)
 800a762:	f240 623e 	movw	r2, #1598	; 0x63e
 800a766:	495d      	ldr	r1, [pc, #372]	; (800a8dc <dhcp_parse_reply+0x51c>)
 800a768:	4859      	ldr	r0, [pc, #356]	; (800a8d0 <dhcp_parse_reply+0x510>)
 800a76a:	f002 fe35 	bl	800d3d8 <iprintf>
 800a76e:	f06f 0305 	mvn.w	r3, #5
 800a772:	e0a5      	b.n	800a8c0 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800a774:	4a58      	ldr	r2, [pc, #352]	; (800a8d8 <dhcp_parse_reply+0x518>)
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	4413      	add	r3, r2
 800a77a:	2201      	movs	r2, #1
 800a77c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	4618      	mov	r0, r3
 800a782:	f7f8 f9bf 	bl	8002b04 <lwip_htonl>
 800a786:	4601      	mov	r1, r0
 800a788:	4a55      	ldr	r2, [pc, #340]	; (800a8e0 <dhcp_parse_reply+0x520>)
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800a790:	7fbb      	ldrb	r3, [r7, #30]
 800a792:	3b04      	subs	r3, #4
 800a794:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800a796:	8afb      	ldrh	r3, [r7, #22]
 800a798:	3304      	adds	r3, #4
 800a79a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800a7a2:	e7ac      	b.n	800a6fe <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800a7a4:	7fbb      	ldrb	r3, [r7, #30]
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d106      	bne.n	800a7b8 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7f8 f9a9 	bl	8002b04 <lwip_htonl>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	60bb      	str	r3, [r7, #8]
 800a7b6:	e010      	b.n	800a7da <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800a7b8:	7fbb      	ldrb	r3, [r7, #30]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d009      	beq.n	800a7d2 <dhcp_parse_reply+0x412>
 800a7be:	4b42      	ldr	r3, [pc, #264]	; (800a8c8 <dhcp_parse_reply+0x508>)
 800a7c0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800a7c4:	4947      	ldr	r1, [pc, #284]	; (800a8e4 <dhcp_parse_reply+0x524>)
 800a7c6:	4842      	ldr	r0, [pc, #264]	; (800a8d0 <dhcp_parse_reply+0x510>)
 800a7c8:	f002 fe06 	bl	800d3d8 <iprintf>
 800a7cc:	f06f 0305 	mvn.w	r3, #5
 800a7d0:	e076      	b.n	800a8c0 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800a7d2:	f107 0308 	add.w	r3, r7, #8
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800a7da:	4a3f      	ldr	r2, [pc, #252]	; (800a8d8 <dhcp_parse_reply+0x518>)
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	4413      	add	r3, r2
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	493e      	ldr	r1, [pc, #248]	; (800a8e0 <dhcp_parse_reply+0x520>)
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	895b      	ldrh	r3, [r3, #10]
 800a7f2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d323      	bcc.n	800a840 <dhcp_parse_reply+0x480>
      offset -= q->len;
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	895b      	ldrh	r3, [r3, #10]
 800a7fc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	895b      	ldrh	r3, [r3, #10]
 800a806:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800a80c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a80e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a810:	429a      	cmp	r2, r3
 800a812:	d223      	bcs.n	800a85c <dhcp_parse_reply+0x49c>
 800a814:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a816:	2b00      	cmp	r3, #0
 800a818:	d020      	beq.n	800a85c <dhcp_parse_reply+0x49c>
        q = q->next;
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	2b00      	cmp	r3, #0
 800a824:	d109      	bne.n	800a83a <dhcp_parse_reply+0x47a>
 800a826:	4b28      	ldr	r3, [pc, #160]	; (800a8c8 <dhcp_parse_reply+0x508>)
 800a828:	f240 6254 	movw	r2, #1620	; 0x654
 800a82c:	492e      	ldr	r1, [pc, #184]	; (800a8e8 <dhcp_parse_reply+0x528>)
 800a82e:	4828      	ldr	r0, [pc, #160]	; (800a8d0 <dhcp_parse_reply+0x510>)
 800a830:	f002 fdd2 	bl	800d3d8 <iprintf>
 800a834:	f06f 0305 	mvn.w	r3, #5
 800a838:	e042      	b.n	800a8c0 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <dhcp_parse_reply+0x49c>
 800a846:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a848:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d206      	bcs.n	800a85c <dhcp_parse_reply+0x49c>
 800a84e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a852:	4413      	add	r3, r2
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2bff      	cmp	r3, #255	; 0xff
 800a858:	f47f adf6 	bne.w	800a448 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800a85c:	4b1e      	ldr	r3, [pc, #120]	; (800a8d8 <dhcp_parse_reply+0x518>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d018      	beq.n	800a896 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800a864:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <dhcp_parse_reply+0x520>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800a86a:	4b1b      	ldr	r3, [pc, #108]	; (800a8d8 <dhcp_parse_reply+0x518>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d102      	bne.n	800a87c <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800a876:	2301      	movs	r3, #1
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
 800a87a:	e00c      	b.n	800a896 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d102      	bne.n	800a888 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800a882:	2301      	movs	r3, #1
 800a884:	623b      	str	r3, [r7, #32]
 800a886:	e006      	b.n	800a896 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d103      	bne.n	800a896 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800a88e:	2301      	movs	r3, #1
 800a890:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800a892:	2301      	movs	r3, #1
 800a894:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d006      	beq.n	800a8aa <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800a8a0:	236c      	movs	r3, #108	; 0x6c
 800a8a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800a8a4:	23ec      	movs	r3, #236	; 0xec
 800a8a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800a8a8:	e5a8      	b.n	800a3fc <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d006      	beq.n	800a8be <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800a8b4:	232c      	movs	r3, #44	; 0x2c
 800a8b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800a8b8:	236c      	movs	r3, #108	; 0x6c
 800a8ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800a8bc:	e59e      	b.n	800a3fc <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3738      	adds	r7, #56	; 0x38
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	0800f8a0 	.word	0x0800f8a0
 800a8cc:	0800fb38 	.word	0x0800fb38
 800a8d0:	0800f900 	.word	0x0800f900
 800a8d4:	0800fb7c 	.word	0x0800fb7c
 800a8d8:	20008048 	.word	0x20008048
 800a8dc:	0800fb90 	.word	0x0800fb90
 800a8e0:	20008050 	.word	0x20008050
 800a8e4:	0800fba8 	.word	0x0800fba8
 800a8e8:	0800fbbc 	.word	0x0800fbbc

0800a8ec <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800a8fa:	4b68      	ldr	r3, [pc, #416]	; (800aa9c <dhcp_recv+0x1b0>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	6a1b      	ldr	r3, [r3, #32]
 800a904:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 80a9 	beq.w	800aa66 <dhcp_recv+0x17a>
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	7a1b      	ldrb	r3, [r3, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 80a4 	beq.w	800aa66 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d006      	beq.n	800a934 <dhcp_recv+0x48>
 800a926:	4b5e      	ldr	r3, [pc, #376]	; (800aaa0 <dhcp_recv+0x1b4>)
 800a928:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800a92c:	495d      	ldr	r1, [pc, #372]	; (800aaa4 <dhcp_recv+0x1b8>)
 800a92e:	485e      	ldr	r0, [pc, #376]	; (800aaa8 <dhcp_recv+0x1bc>)
 800a930:	f002 fd52 	bl	800d3d8 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	895b      	ldrh	r3, [r3, #10]
 800a938:	2b2b      	cmp	r3, #43	; 0x2b
 800a93a:	f240 8096 	bls.w	800aa6a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2b02      	cmp	r3, #2
 800a944:	f040 8093 	bne.w	800aa6e <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800a948:	2300      	movs	r3, #0
 800a94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a94e:	e012      	b.n	800a976 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800a950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a954:	6a3a      	ldr	r2, [r7, #32]
 800a956:	4413      	add	r3, r2
 800a958:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800a95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a960:	69b9      	ldr	r1, [r7, #24]
 800a962:	440b      	add	r3, r1
 800a964:	7f1b      	ldrb	r3, [r3, #28]
 800a966:	429a      	cmp	r2, r3
 800a968:	f040 8083 	bne.w	800aa72 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800a96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a970:	3301      	adds	r3, #1
 800a972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a97c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a980:	429a      	cmp	r2, r3
 800a982:	d207      	bcs.n	800a994 <dhcp_recv+0xa8>
 800a984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a988:	2b05      	cmp	r3, #5
 800a98a:	d803      	bhi.n	800a994 <dhcp_recv+0xa8>
 800a98c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a990:	2b0f      	cmp	r3, #15
 800a992:	d9dd      	bls.n	800a950 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7f8 f8b3 	bl	8002b04 <lwip_htonl>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d166      	bne.n	800aa76 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	69f8      	ldr	r0, [r7, #28]
 800a9ac:	f7ff fd08 	bl	800a3c0 <dhcp_parse_reply>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d161      	bne.n	800aa7a <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800a9b6:	4b3d      	ldr	r3, [pc, #244]	; (800aaac <dhcp_recv+0x1c0>)
 800a9b8:	785b      	ldrb	r3, [r3, #1]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d05f      	beq.n	800aa7e <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800a9be:	4b3c      	ldr	r3, [pc, #240]	; (800aab0 <dhcp_recv+0x1c4>)
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	2b05      	cmp	r3, #5
 800a9c8:	d128      	bne.n	800aa1c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	7a5b      	ldrb	r3, [r3, #9]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d111      	bne.n	800a9f6 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800a9d2:	6a38      	ldr	r0, [r7, #32]
 800a9d4:	f7fe fea0 	bl	8009718 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a9de:	f003 0308 	and.w	r3, r3, #8
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800a9e6:	6a38      	ldr	r0, [r7, #32]
 800a9e8:	f7fe fc68 	bl	80092bc <dhcp_check>
 800a9ec:	e048      	b.n	800aa80 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800a9ee:	6a38      	ldr	r0, [r7, #32]
 800a9f0:	f7ff f8a0 	bl	8009b34 <dhcp_bind>
 800a9f4:	e044      	b.n	800aa80 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	7a5b      	ldrb	r3, [r3, #9]
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d007      	beq.n	800aa0e <dhcp_recv+0x122>
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	7a5b      	ldrb	r3, [r3, #9]
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d003      	beq.n	800aa0e <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800aa0a:	2b05      	cmp	r3, #5
 800aa0c:	d138      	bne.n	800aa80 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 800aa0e:	6a38      	ldr	r0, [r7, #32]
 800aa10:	f7fe fe82 	bl	8009718 <dhcp_handle_ack>
      dhcp_bind(netif);
 800aa14:	6a38      	ldr	r0, [r7, #32]
 800aa16:	f7ff f88d 	bl	8009b34 <dhcp_bind>
 800aa1a:	e031      	b.n	800aa80 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	2b06      	cmp	r3, #6
 800aa20:	d113      	bne.n	800aa4a <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d00b      	beq.n	800aa42 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	7a5b      	ldrb	r3, [r3, #9]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d007      	beq.n	800aa42 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d003      	beq.n	800aa42 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	7a5b      	ldrb	r3, [r3, #9]
 800aa3e:	2b05      	cmp	r3, #5
 800aa40:	d103      	bne.n	800aa4a <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800aa42:	6a38      	ldr	r0, [r7, #32]
 800aa44:	f7fe fc20 	bl	8009288 <dhcp_handle_nak>
 800aa48:	e01a      	b.n	800aa80 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d10a      	bne.n	800aa66 <dhcp_recv+0x17a>
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	7a5b      	ldrb	r3, [r3, #9]
 800aa54:	2b06      	cmp	r3, #6
 800aa56:	d106      	bne.n	800aa66 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800aa5e:	6a38      	ldr	r0, [r7, #32]
 800aa60:	f7fe fc60 	bl	8009324 <dhcp_handle_offer>
 800aa64:	e00c      	b.n	800aa80 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 800aa66:	bf00      	nop
 800aa68:	e00a      	b.n	800aa80 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800aa6a:	bf00      	nop
 800aa6c:	e008      	b.n	800aa80 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800aa6e:	bf00      	nop
 800aa70:	e006      	b.n	800aa80 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 800aa72:	bf00      	nop
 800aa74:	e004      	b.n	800aa80 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800aa76:	bf00      	nop
 800aa78:	e002      	b.n	800aa80 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800aa7a:	bf00      	nop
 800aa7c:	e000      	b.n	800aa80 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800aa7e:	bf00      	nop
  if (dhcp != NULL) {
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7f9 f929 	bl	8003ce4 <pbuf_free>
}
 800aa92:	bf00      	nop
 800aa94:	3728      	adds	r7, #40	; 0x28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20004adc 	.word	0x20004adc
 800aaa0:	0800f8a0 	.word	0x0800f8a0
 800aaa4:	0800f9cc 	.word	0x0800f9cc
 800aaa8:	0800f900 	.word	0x0800f900
 800aaac:	20008048 	.word	0x20008048
 800aab0:	20008050 	.word	0x20008050

0800aab4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d109      	bne.n	800aadc <dhcp_create_msg+0x28>
 800aac8:	4ba3      	ldr	r3, [pc, #652]	; (800ad58 <dhcp_create_msg+0x2a4>)
 800aaca:	f240 721d 	movw	r2, #1821	; 0x71d
 800aace:	49a3      	ldr	r1, [pc, #652]	; (800ad5c <dhcp_create_msg+0x2a8>)
 800aad0:	48a3      	ldr	r0, [pc, #652]	; (800ad60 <dhcp_create_msg+0x2ac>)
 800aad2:	f002 fc81 	bl	800d3d8 <iprintf>
 800aad6:	f06f 030f 	mvn.w	r3, #15
 800aada:	e138      	b.n	800ad4e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d109      	bne.n	800aaf6 <dhcp_create_msg+0x42>
 800aae2:	4b9d      	ldr	r3, [pc, #628]	; (800ad58 <dhcp_create_msg+0x2a4>)
 800aae4:	f240 721e 	movw	r2, #1822	; 0x71e
 800aae8:	499e      	ldr	r1, [pc, #632]	; (800ad64 <dhcp_create_msg+0x2b0>)
 800aaea:	489d      	ldr	r0, [pc, #628]	; (800ad60 <dhcp_create_msg+0x2ac>)
 800aaec:	f002 fc74 	bl	800d3d8 <iprintf>
 800aaf0:	f06f 0305 	mvn.w	r3, #5
 800aaf4:	e12b      	b.n	800ad4e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d006      	beq.n	800ab0c <dhcp_create_msg+0x58>
 800aafe:	4b96      	ldr	r3, [pc, #600]	; (800ad58 <dhcp_create_msg+0x2a4>)
 800ab00:	f240 721f 	movw	r2, #1823	; 0x71f
 800ab04:	4998      	ldr	r1, [pc, #608]	; (800ad68 <dhcp_create_msg+0x2b4>)
 800ab06:	4896      	ldr	r0, [pc, #600]	; (800ad60 <dhcp_create_msg+0x2ac>)
 800ab08:	f002 fc66 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d006      	beq.n	800ab22 <dhcp_create_msg+0x6e>
 800ab14:	4b90      	ldr	r3, [pc, #576]	; (800ad58 <dhcp_create_msg+0x2a4>)
 800ab16:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800ab1a:	4994      	ldr	r1, [pc, #592]	; (800ad6c <dhcp_create_msg+0x2b8>)
 800ab1c:	4890      	ldr	r0, [pc, #576]	; (800ad60 <dhcp_create_msg+0x2ac>)
 800ab1e:	f002 fc5b 	bl	800d3d8 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800ab22:	2200      	movs	r2, #0
 800ab24:	f44f 719a 	mov.w	r1, #308	; 0x134
 800ab28:	2000      	movs	r0, #0
 800ab2a:	f7f8 fd69 	bl	8003600 <pbuf_alloc>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d102      	bne.n	800ab42 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800ab3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab40:	e105      	b.n	800ad4e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	895b      	ldrh	r3, [r3, #10]
 800ab48:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800ab4c:	d206      	bcs.n	800ab5c <dhcp_create_msg+0xa8>
 800ab4e:	4b82      	ldr	r3, [pc, #520]	; (800ad58 <dhcp_create_msg+0x2a4>)
 800ab50:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ab54:	4986      	ldr	r1, [pc, #536]	; (800ad70 <dhcp_create_msg+0x2bc>)
 800ab56:	4882      	ldr	r0, [pc, #520]	; (800ad60 <dhcp_create_msg+0x2ac>)
 800ab58:	f002 fc3e 	bl	800d3d8 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d103      	bne.n	800ab6a <dhcp_create_msg+0xb6>
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	7a5b      	ldrb	r3, [r3, #9]
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d10d      	bne.n	800ab86 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	7a9b      	ldrb	r3, [r3, #10]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d105      	bne.n	800ab7e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800ab72:	f002 fc49 	bl	800d408 <rand>
 800ab76:	4603      	mov	r3, r0
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4b7e      	ldr	r3, [pc, #504]	; (800ad74 <dhcp_create_msg+0x2c0>)
 800ab7c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800ab7e:	4b7d      	ldr	r3, [pc, #500]	; (800ad74 <dhcp_create_msg+0x2c0>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2201      	movs	r2, #1
 800ab96:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800abaa:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	2200      	movs	r2, #0
 800abb2:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	691c      	ldr	r4, [r3, #16]
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7f7 ffa1 	bl	8002b04 <lwip_htonl>
 800abc2:	4603      	mov	r3, r0
 800abc4:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2200      	movs	r2, #0
 800abcc:	721a      	strb	r2, [r3, #8]
 800abce:	2200      	movs	r2, #0
 800abd0:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2200      	movs	r2, #0
 800abd8:	729a      	strb	r2, [r3, #10]
 800abda:	2200      	movs	r2, #0
 800abdc:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	2200      	movs	r2, #0
 800abe4:	731a      	strb	r2, [r3, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	735a      	strb	r2, [r3, #13]
 800abea:	2200      	movs	r2, #0
 800abec:	739a      	strb	r2, [r3, #14]
 800abee:	2200      	movs	r2, #0
 800abf0:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	2b08      	cmp	r3, #8
 800abf6:	d010      	beq.n	800ac1a <dhcp_create_msg+0x166>
 800abf8:	79fb      	ldrb	r3, [r7, #7]
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d00d      	beq.n	800ac1a <dhcp_create_msg+0x166>
 800abfe:	79fb      	ldrb	r3, [r7, #7]
 800ac00:	2b07      	cmp	r3, #7
 800ac02:	d00a      	beq.n	800ac1a <dhcp_create_msg+0x166>
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d10d      	bne.n	800ac26 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	d003      	beq.n	800ac1a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	7a5b      	ldrb	r3, [r3, #9]
 800ac16:	2b04      	cmp	r3, #4
 800ac18:	d105      	bne.n	800ac26 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1d1a      	adds	r2, r3, #4
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	6812      	ldr	r2, [r2, #0]
 800ac24:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	741a      	strb	r2, [r3, #16]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	745a      	strb	r2, [r3, #17]
 800ac32:	2200      	movs	r2, #0
 800ac34:	749a      	strb	r2, [r3, #18]
 800ac36:	2200      	movs	r2, #0
 800ac38:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	751a      	strb	r2, [r3, #20]
 800ac42:	2200      	movs	r2, #0
 800ac44:	755a      	strb	r2, [r3, #21]
 800ac46:	2200      	movs	r2, #0
 800ac48:	759a      	strb	r2, [r3, #22]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2200      	movs	r2, #0
 800ac54:	761a      	strb	r2, [r3, #24]
 800ac56:	2200      	movs	r2, #0
 800ac58:	765a      	strb	r2, [r3, #25]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	769a      	strb	r2, [r3, #26]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800ac62:	2300      	movs	r3, #0
 800ac64:	82fb      	strh	r3, [r7, #22]
 800ac66:	e019      	b.n	800ac9c <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	8afa      	ldrh	r2, [r7, #22]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d208      	bcs.n	800ac88 <dhcp_create_msg+0x1d4>
 800ac76:	8afb      	ldrh	r3, [r7, #22]
 800ac78:	2b05      	cmp	r3, #5
 800ac7a:	d805      	bhi.n	800ac88 <dhcp_create_msg+0x1d4>
 800ac7c:	8afb      	ldrh	r3, [r7, #22]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800ac86:	e000      	b.n	800ac8a <dhcp_create_msg+0x1d6>
 800ac88:	2100      	movs	r1, #0
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	691a      	ldr	r2, [r3, #16]
 800ac8e:	8afb      	ldrh	r3, [r7, #22]
 800ac90:	4413      	add	r3, r2
 800ac92:	460a      	mov	r2, r1
 800ac94:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800ac96:	8afb      	ldrh	r3, [r7, #22]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	82fb      	strh	r3, [r7, #22]
 800ac9c:	8afb      	ldrh	r3, [r7, #22]
 800ac9e:	2b0f      	cmp	r3, #15
 800aca0:	d9e2      	bls.n	800ac68 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800aca2:	2300      	movs	r3, #0
 800aca4:	82fb      	strh	r3, [r7, #22]
 800aca6:	e009      	b.n	800acbc <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	8afb      	ldrh	r3, [r7, #22]
 800acae:	4413      	add	r3, r2
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800acb6:	8afb      	ldrh	r3, [r7, #22]
 800acb8:	3301      	adds	r3, #1
 800acba:	82fb      	strh	r3, [r7, #22]
 800acbc:	8afb      	ldrh	r3, [r7, #22]
 800acbe:	2b3f      	cmp	r3, #63	; 0x3f
 800acc0:	d9f2      	bls.n	800aca8 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800acc2:	2300      	movs	r3, #0
 800acc4:	82fb      	strh	r3, [r7, #22]
 800acc6:	e009      	b.n	800acdc <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	691a      	ldr	r2, [r3, #16]
 800accc:	8afb      	ldrh	r3, [r7, #22]
 800acce:	4413      	add	r3, r2
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800acd6:	8afb      	ldrh	r3, [r7, #22]
 800acd8:	3301      	adds	r3, #1
 800acda:	82fb      	strh	r3, [r7, #22]
 800acdc:	8afb      	ldrh	r3, [r7, #22]
 800acde:	2b7f      	cmp	r3, #127	; 0x7f
 800ace0:	d9f2      	bls.n	800acc8 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800acec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800acf0:	2200      	movs	r2, #0
 800acf2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800acf6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800acfa:	2200      	movs	r2, #0
 800acfc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800ad00:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800ad04:	2200      	movs	r2, #0
 800ad06:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800ad0a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2200      	movs	r2, #0
 800ad12:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800ad14:	2300      	movs	r3, #0
 800ad16:	82fb      	strh	r3, [r7, #22]
 800ad18:	e00b      	b.n	800ad32 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	691a      	ldr	r2, [r3, #16]
 800ad1e:	8afb      	ldrh	r3, [r7, #22]
 800ad20:	8af9      	ldrh	r1, [r7, #22]
 800ad22:	b2c9      	uxtb	r1, r1
 800ad24:	4413      	add	r3, r2
 800ad26:	460a      	mov	r2, r1
 800ad28:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800ad2c:	8afb      	ldrh	r3, [r7, #22]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	82fb      	strh	r3, [r7, #22]
 800ad32:	8afb      	ldrh	r3, [r7, #22]
 800ad34:	2b43      	cmp	r3, #67	; 0x43
 800ad36:	d9f0      	bls.n	800ad1a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800ad38:	2201      	movs	r2, #1
 800ad3a:	2135      	movs	r1, #53	; 0x35
 800ad3c:	68b8      	ldr	r0, [r7, #8]
 800ad3e:	f7ff fa4d 	bl	800a1dc <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	4619      	mov	r1, r3
 800ad46:	68b8      	ldr	r0, [r7, #8]
 800ad48:	f7ff fa82 	bl	800a250 <dhcp_option_byte>
  return ERR_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	371c      	adds	r7, #28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd90      	pop	{r4, r7, pc}
 800ad56:	bf00      	nop
 800ad58:	0800f8a0 	.word	0x0800f8a0
 800ad5c:	0800fbd0 	.word	0x0800fbd0
 800ad60:	0800f900 	.word	0x0800f900
 800ad64:	0800fbf0 	.word	0x0800fbf0
 800ad68:	0800fc10 	.word	0x0800fc10
 800ad6c:	0800fc38 	.word	0x0800fc38
 800ad70:	0800fc60 	.word	0x0800fc60
 800ad74:	20000118 	.word	0x20000118

0800ad78 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d107      	bne.n	800ad96 <dhcp_delete_msg+0x1e>
 800ad86:	4b18      	ldr	r3, [pc, #96]	; (800ade8 <dhcp_delete_msg+0x70>)
 800ad88:	f240 726d 	movw	r2, #1901	; 0x76d
 800ad8c:	4917      	ldr	r1, [pc, #92]	; (800adec <dhcp_delete_msg+0x74>)
 800ad8e:	4818      	ldr	r0, [pc, #96]	; (800adf0 <dhcp_delete_msg+0x78>)
 800ad90:	f002 fb22 	bl	800d3d8 <iprintf>
 800ad94:	e024      	b.n	800ade0 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d106      	bne.n	800adac <dhcp_delete_msg+0x34>
 800ad9e:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <dhcp_delete_msg+0x70>)
 800ada0:	f240 726e 	movw	r2, #1902	; 0x76e
 800ada4:	4913      	ldr	r1, [pc, #76]	; (800adf4 <dhcp_delete_msg+0x7c>)
 800ada6:	4812      	ldr	r0, [pc, #72]	; (800adf0 <dhcp_delete_msg+0x78>)
 800ada8:	f002 fb16 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d106      	bne.n	800adc2 <dhcp_delete_msg+0x4a>
 800adb4:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <dhcp_delete_msg+0x70>)
 800adb6:	f240 726f 	movw	r2, #1903	; 0x76f
 800adba:	490f      	ldr	r1, [pc, #60]	; (800adf8 <dhcp_delete_msg+0x80>)
 800adbc:	480c      	ldr	r0, [pc, #48]	; (800adf0 <dhcp_delete_msg+0x78>)
 800adbe:	f002 fb0b 	bl	800d3d8 <iprintf>
  if (dhcp->p_out != NULL) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d004      	beq.n	800add4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	4618      	mov	r0, r3
 800add0:	f7f8 ff88 	bl	8003ce4 <pbuf_free>
  }
  dhcp->p_out = NULL;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	611a      	str	r2, [r3, #16]
}
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	0800f8a0 	.word	0x0800f8a0
 800adec:	0800fca0 	.word	0x0800fca0
 800adf0:	0800f900 	.word	0x0800f900
 800adf4:	0800fcc0 	.word	0x0800fcc0
 800adf8:	0800fce8 	.word	0x0800fce8

0800adfc <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d107      	bne.n	800ae1a <dhcp_option_trailer+0x1e>
 800ae0a:	4b24      	ldr	r3, [pc, #144]	; (800ae9c <dhcp_option_trailer+0xa0>)
 800ae0c:	f240 7282 	movw	r2, #1922	; 0x782
 800ae10:	4923      	ldr	r1, [pc, #140]	; (800aea0 <dhcp_option_trailer+0xa4>)
 800ae12:	4824      	ldr	r0, [pc, #144]	; (800aea4 <dhcp_option_trailer+0xa8>)
 800ae14:	f002 fae0 	bl	800d3d8 <iprintf>
 800ae18:	e03c      	b.n	800ae94 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <dhcp_option_trailer+0x34>
 800ae22:	4b1e      	ldr	r3, [pc, #120]	; (800ae9c <dhcp_option_trailer+0xa0>)
 800ae24:	f240 7283 	movw	r2, #1923	; 0x783
 800ae28:	491f      	ldr	r1, [pc, #124]	; (800aea8 <dhcp_option_trailer+0xac>)
 800ae2a:	481e      	ldr	r0, [pc, #120]	; (800aea4 <dhcp_option_trailer+0xa8>)
 800ae2c:	f002 fad4 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	8a9b      	ldrh	r3, [r3, #20]
 800ae34:	2b43      	cmp	r3, #67	; 0x43
 800ae36:	d906      	bls.n	800ae46 <dhcp_option_trailer+0x4a>
 800ae38:	4b18      	ldr	r3, [pc, #96]	; (800ae9c <dhcp_option_trailer+0xa0>)
 800ae3a:	f240 7284 	movw	r2, #1924	; 0x784
 800ae3e:	491b      	ldr	r1, [pc, #108]	; (800aeac <dhcp_option_trailer+0xb0>)
 800ae40:	4818      	ldr	r0, [pc, #96]	; (800aea4 <dhcp_option_trailer+0xa8>)
 800ae42:	f002 fac9 	bl	800d3d8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	691a      	ldr	r2, [r3, #16]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	8a9b      	ldrh	r3, [r3, #20]
 800ae4e:	1c59      	adds	r1, r3, #1
 800ae50:	b288      	uxth	r0, r1
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	8288      	strh	r0, [r1, #20]
 800ae56:	4413      	add	r3, r2
 800ae58:	22ff      	movs	r2, #255	; 0xff
 800ae5a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800ae5e:	e00b      	b.n	800ae78 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	8a9b      	ldrh	r3, [r3, #20]
 800ae68:	1c59      	adds	r1, r3, #1
 800ae6a:	b288      	uxth	r0, r1
 800ae6c:	6879      	ldr	r1, [r7, #4]
 800ae6e:	8288      	strh	r0, [r1, #20]
 800ae70:	4413      	add	r3, r2
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	8a9b      	ldrh	r3, [r3, #20]
 800ae7c:	2b43      	cmp	r3, #67	; 0x43
 800ae7e:	d905      	bls.n	800ae8c <dhcp_option_trailer+0x90>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	8a9b      	ldrh	r3, [r3, #20]
 800ae84:	f003 0303 	and.w	r3, r3, #3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d003      	beq.n	800ae94 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800ae90:	2b43      	cmp	r3, #67	; 0x43
 800ae92:	d9e5      	bls.n	800ae60 <dhcp_option_trailer+0x64>
  }
}
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800f8a0 	.word	0x0800f8a0
 800aea0:	0800fd10 	.word	0x0800fd10
 800aea4:	0800f900 	.word	0x0800f900
 800aea8:	0800fd34 	.word	0x0800fd34
 800aeac:	0800fd60 	.word	0x0800fd60

0800aeb0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d017      	beq.n	800aeee <dhcp_supplied_address+0x3e>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d013      	beq.n	800aeee <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	7a5b      	ldrb	r3, [r3, #9]
 800aed0:	2b0a      	cmp	r3, #10
 800aed2:	d007      	beq.n	800aee4 <dhcp_supplied_address+0x34>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	7a5b      	ldrb	r3, [r3, #9]
 800aed8:	2b05      	cmp	r3, #5
 800aeda:	d003      	beq.n	800aee4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	d101      	bne.n	800aee8 <dhcp_supplied_address+0x38>
 800aee4:	2301      	movs	r3, #1
 800aee6:	e000      	b.n	800aeea <dhcp_supplied_address+0x3a>
 800aee8:	2300      	movs	r3, #0
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	e000      	b.n	800aef0 <dhcp_supplied_address+0x40>
  }
  return 0;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr
	...

0800aefc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800af04:	4915      	ldr	r1, [pc, #84]	; (800af5c <etharp_free_entry+0x60>)
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	4613      	mov	r3, r2
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	4413      	add	r3, r2
 800af0e:	00db      	lsls	r3, r3, #3
 800af10:	440b      	add	r3, r1
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d013      	beq.n	800af40 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800af18:	4910      	ldr	r1, [pc, #64]	; (800af5c <etharp_free_entry+0x60>)
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	4613      	mov	r3, r2
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	4413      	add	r3, r2
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	440b      	add	r3, r1
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f8 fedb 	bl	8003ce4 <pbuf_free>
    arp_table[i].q = NULL;
 800af2e:	490b      	ldr	r1, [pc, #44]	; (800af5c <etharp_free_entry+0x60>)
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	4413      	add	r3, r2
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	440b      	add	r3, r1
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800af40:	4906      	ldr	r1, [pc, #24]	; (800af5c <etharp_free_entry+0x60>)
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	4613      	mov	r3, r2
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	4413      	add	r3, r2
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	440b      	add	r3, r1
 800af4e:	3314      	adds	r3, #20
 800af50:	2200      	movs	r2, #0
 800af52:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	2000011c 	.word	0x2000011c

0800af60 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af66:	2300      	movs	r3, #0
 800af68:	71fb      	strb	r3, [r7, #7]
 800af6a:	e096      	b.n	800b09a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800af6c:	79fa      	ldrb	r2, [r7, #7]
 800af6e:	494f      	ldr	r1, [pc, #316]	; (800b0ac <etharp_tmr+0x14c>)
 800af70:	4613      	mov	r3, r2
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	4413      	add	r3, r2
 800af76:	00db      	lsls	r3, r3, #3
 800af78:	440b      	add	r3, r1
 800af7a:	3314      	adds	r3, #20
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800af80:	79bb      	ldrb	r3, [r7, #6]
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 8086 	beq.w	800b094 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800af88:	79fa      	ldrb	r2, [r7, #7]
 800af8a:	4948      	ldr	r1, [pc, #288]	; (800b0ac <etharp_tmr+0x14c>)
 800af8c:	4613      	mov	r3, r2
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	4413      	add	r3, r2
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	440b      	add	r3, r1
 800af96:	3312      	adds	r3, #18
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	3301      	adds	r3, #1
 800af9c:	b298      	uxth	r0, r3
 800af9e:	4943      	ldr	r1, [pc, #268]	; (800b0ac <etharp_tmr+0x14c>)
 800afa0:	4613      	mov	r3, r2
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	4413      	add	r3, r2
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	440b      	add	r3, r1
 800afaa:	3312      	adds	r3, #18
 800afac:	4602      	mov	r2, r0
 800afae:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800afb0:	79fa      	ldrb	r2, [r7, #7]
 800afb2:	493e      	ldr	r1, [pc, #248]	; (800b0ac <etharp_tmr+0x14c>)
 800afb4:	4613      	mov	r3, r2
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	4413      	add	r3, r2
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	440b      	add	r3, r1
 800afbe:	3312      	adds	r3, #18
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800afc6:	d215      	bcs.n	800aff4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800afc8:	79fa      	ldrb	r2, [r7, #7]
 800afca:	4938      	ldr	r1, [pc, #224]	; (800b0ac <etharp_tmr+0x14c>)
 800afcc:	4613      	mov	r3, r2
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	4413      	add	r3, r2
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	440b      	add	r3, r1
 800afd6:	3314      	adds	r3, #20
 800afd8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d10f      	bne.n	800affe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800afde:	79fa      	ldrb	r2, [r7, #7]
 800afe0:	4932      	ldr	r1, [pc, #200]	; (800b0ac <etharp_tmr+0x14c>)
 800afe2:	4613      	mov	r3, r2
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	4413      	add	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	440b      	add	r3, r1
 800afec:	3312      	adds	r3, #18
 800afee:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d904      	bls.n	800affe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800aff4:	79fb      	ldrb	r3, [r7, #7]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff ff80 	bl	800aefc <etharp_free_entry>
 800affc:	e04a      	b.n	800b094 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800affe:	79fa      	ldrb	r2, [r7, #7]
 800b000:	492a      	ldr	r1, [pc, #168]	; (800b0ac <etharp_tmr+0x14c>)
 800b002:	4613      	mov	r3, r2
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	4413      	add	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	440b      	add	r3, r1
 800b00c:	3314      	adds	r3, #20
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b03      	cmp	r3, #3
 800b012:	d10a      	bne.n	800b02a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b014:	79fa      	ldrb	r2, [r7, #7]
 800b016:	4925      	ldr	r1, [pc, #148]	; (800b0ac <etharp_tmr+0x14c>)
 800b018:	4613      	mov	r3, r2
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	4413      	add	r3, r2
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	440b      	add	r3, r1
 800b022:	3314      	adds	r3, #20
 800b024:	2204      	movs	r2, #4
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	e034      	b.n	800b094 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b02a:	79fa      	ldrb	r2, [r7, #7]
 800b02c:	491f      	ldr	r1, [pc, #124]	; (800b0ac <etharp_tmr+0x14c>)
 800b02e:	4613      	mov	r3, r2
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	4413      	add	r3, r2
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	440b      	add	r3, r1
 800b038:	3314      	adds	r3, #20
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d10a      	bne.n	800b056 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b040:	79fa      	ldrb	r2, [r7, #7]
 800b042:	491a      	ldr	r1, [pc, #104]	; (800b0ac <etharp_tmr+0x14c>)
 800b044:	4613      	mov	r3, r2
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	4413      	add	r3, r2
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	440b      	add	r3, r1
 800b04e:	3314      	adds	r3, #20
 800b050:	2202      	movs	r2, #2
 800b052:	701a      	strb	r2, [r3, #0]
 800b054:	e01e      	b.n	800b094 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b056:	79fa      	ldrb	r2, [r7, #7]
 800b058:	4914      	ldr	r1, [pc, #80]	; (800b0ac <etharp_tmr+0x14c>)
 800b05a:	4613      	mov	r3, r2
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	4413      	add	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	440b      	add	r3, r1
 800b064:	3314      	adds	r3, #20
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d113      	bne.n	800b094 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b06c:	79fa      	ldrb	r2, [r7, #7]
 800b06e:	490f      	ldr	r1, [pc, #60]	; (800b0ac <etharp_tmr+0x14c>)
 800b070:	4613      	mov	r3, r2
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	4413      	add	r3, r2
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	440b      	add	r3, r1
 800b07a:	3308      	adds	r3, #8
 800b07c:	6818      	ldr	r0, [r3, #0]
 800b07e:	79fa      	ldrb	r2, [r7, #7]
 800b080:	4613      	mov	r3, r2
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	4413      	add	r3, r2
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	4a08      	ldr	r2, [pc, #32]	; (800b0ac <etharp_tmr+0x14c>)
 800b08a:	4413      	add	r3, r2
 800b08c:	3304      	adds	r3, #4
 800b08e:	4619      	mov	r1, r3
 800b090:	f000 fe3c 	bl	800bd0c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b094:	79fb      	ldrb	r3, [r7, #7]
 800b096:	3301      	adds	r3, #1
 800b098:	71fb      	strb	r3, [r7, #7]
 800b09a:	79fb      	ldrb	r3, [r7, #7]
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	f67f af65 	bls.w	800af6c <etharp_tmr+0xc>
      }
    }
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	2000011c 	.word	0x2000011c

0800b0b0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b0be:	230a      	movs	r3, #10
 800b0c0:	77fb      	strb	r3, [r7, #31]
 800b0c2:	230a      	movs	r3, #10
 800b0c4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b0c6:	230a      	movs	r3, #10
 800b0c8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b0ce:	230a      	movs	r3, #10
 800b0d0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	833b      	strh	r3, [r7, #24]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	82fb      	strh	r3, [r7, #22]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b0de:	2300      	movs	r3, #0
 800b0e0:	773b      	strb	r3, [r7, #28]
 800b0e2:	e093      	b.n	800b20c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b0e4:	7f3a      	ldrb	r2, [r7, #28]
 800b0e6:	4990      	ldr	r1, [pc, #576]	; (800b328 <etharp_find_entry+0x278>)
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	4413      	add	r3, r2
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	440b      	add	r3, r1
 800b0f2:	3314      	adds	r3, #20
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b0f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b0fc:	2b0a      	cmp	r3, #10
 800b0fe:	d105      	bne.n	800b10c <etharp_find_entry+0x5c>
 800b100:	7cfb      	ldrb	r3, [r7, #19]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d102      	bne.n	800b10c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b106:	7f3b      	ldrb	r3, [r7, #28]
 800b108:	777b      	strb	r3, [r7, #29]
 800b10a:	e07c      	b.n	800b206 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b10c:	7cfb      	ldrb	r3, [r7, #19]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d079      	beq.n	800b206 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b112:	7cfb      	ldrb	r3, [r7, #19]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d009      	beq.n	800b12c <etharp_find_entry+0x7c>
 800b118:	7cfb      	ldrb	r3, [r7, #19]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d806      	bhi.n	800b12c <etharp_find_entry+0x7c>
 800b11e:	4b83      	ldr	r3, [pc, #524]	; (800b32c <etharp_find_entry+0x27c>)
 800b120:	f44f 7293 	mov.w	r2, #294	; 0x126
 800b124:	4982      	ldr	r1, [pc, #520]	; (800b330 <etharp_find_entry+0x280>)
 800b126:	4883      	ldr	r0, [pc, #524]	; (800b334 <etharp_find_entry+0x284>)
 800b128:	f002 f956 	bl	800d3d8 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00f      	beq.n	800b152 <etharp_find_entry+0xa2>
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6819      	ldr	r1, [r3, #0]
 800b136:	7f3a      	ldrb	r2, [r7, #28]
 800b138:	487b      	ldr	r0, [pc, #492]	; (800b328 <etharp_find_entry+0x278>)
 800b13a:	4613      	mov	r3, r2
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	4413      	add	r3, r2
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	4403      	add	r3, r0
 800b144:	3304      	adds	r3, #4
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4299      	cmp	r1, r3
 800b14a:	d102      	bne.n	800b152 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b14c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b150:	e0e5      	b.n	800b31e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b152:	7cfb      	ldrb	r3, [r7, #19]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d13b      	bne.n	800b1d0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b158:	7f3a      	ldrb	r2, [r7, #28]
 800b15a:	4973      	ldr	r1, [pc, #460]	; (800b328 <etharp_find_entry+0x278>)
 800b15c:	4613      	mov	r3, r2
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	4413      	add	r3, r2
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	440b      	add	r3, r1
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d018      	beq.n	800b19e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b16c:	7f3a      	ldrb	r2, [r7, #28]
 800b16e:	496e      	ldr	r1, [pc, #440]	; (800b328 <etharp_find_entry+0x278>)
 800b170:	4613      	mov	r3, r2
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	4413      	add	r3, r2
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	440b      	add	r3, r1
 800b17a:	3312      	adds	r3, #18
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	8b3a      	ldrh	r2, [r7, #24]
 800b180:	429a      	cmp	r2, r3
 800b182:	d840      	bhi.n	800b206 <etharp_find_entry+0x156>
            old_queue = i;
 800b184:	7f3b      	ldrb	r3, [r7, #28]
 800b186:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b188:	7f3a      	ldrb	r2, [r7, #28]
 800b18a:	4967      	ldr	r1, [pc, #412]	; (800b328 <etharp_find_entry+0x278>)
 800b18c:	4613      	mov	r3, r2
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	4413      	add	r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	440b      	add	r3, r1
 800b196:	3312      	adds	r3, #18
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	833b      	strh	r3, [r7, #24]
 800b19c:	e033      	b.n	800b206 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b19e:	7f3a      	ldrb	r2, [r7, #28]
 800b1a0:	4961      	ldr	r1, [pc, #388]	; (800b328 <etharp_find_entry+0x278>)
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	4413      	add	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	440b      	add	r3, r1
 800b1ac:	3312      	adds	r3, #18
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	8afa      	ldrh	r2, [r7, #22]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d827      	bhi.n	800b206 <etharp_find_entry+0x156>
            old_pending = i;
 800b1b6:	7f3b      	ldrb	r3, [r7, #28]
 800b1b8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b1ba:	7f3a      	ldrb	r2, [r7, #28]
 800b1bc:	495a      	ldr	r1, [pc, #360]	; (800b328 <etharp_find_entry+0x278>)
 800b1be:	4613      	mov	r3, r2
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	4413      	add	r3, r2
 800b1c4:	00db      	lsls	r3, r3, #3
 800b1c6:	440b      	add	r3, r1
 800b1c8:	3312      	adds	r3, #18
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	82fb      	strh	r3, [r7, #22]
 800b1ce:	e01a      	b.n	800b206 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b1d0:	7cfb      	ldrb	r3, [r7, #19]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d917      	bls.n	800b206 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b1d6:	7f3a      	ldrb	r2, [r7, #28]
 800b1d8:	4953      	ldr	r1, [pc, #332]	; (800b328 <etharp_find_entry+0x278>)
 800b1da:	4613      	mov	r3, r2
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	4413      	add	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	440b      	add	r3, r1
 800b1e4:	3312      	adds	r3, #18
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	8aba      	ldrh	r2, [r7, #20]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d80b      	bhi.n	800b206 <etharp_find_entry+0x156>
            old_stable = i;
 800b1ee:	7f3b      	ldrb	r3, [r7, #28]
 800b1f0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b1f2:	7f3a      	ldrb	r2, [r7, #28]
 800b1f4:	494c      	ldr	r1, [pc, #304]	; (800b328 <etharp_find_entry+0x278>)
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	440b      	add	r3, r1
 800b200:	3312      	adds	r3, #18
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b206:	7f3b      	ldrb	r3, [r7, #28]
 800b208:	3301      	adds	r3, #1
 800b20a:	773b      	strb	r3, [r7, #28]
 800b20c:	7f3b      	ldrb	r3, [r7, #28]
 800b20e:	2b09      	cmp	r3, #9
 800b210:	f67f af68 	bls.w	800b0e4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b214:	7afb      	ldrb	r3, [r7, #11]
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d108      	bne.n	800b230 <etharp_find_entry+0x180>
 800b21e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b222:	2b0a      	cmp	r3, #10
 800b224:	d107      	bne.n	800b236 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b226:	7afb      	ldrb	r3, [r7, #11]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d102      	bne.n	800b236 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b230:	f04f 33ff 	mov.w	r3, #4294967295
 800b234:	e073      	b.n	800b31e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b236:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b23a:	2b09      	cmp	r3, #9
 800b23c:	dc02      	bgt.n	800b244 <etharp_find_entry+0x194>
    i = empty;
 800b23e:	7f7b      	ldrb	r3, [r7, #29]
 800b240:	773b      	strb	r3, [r7, #28]
 800b242:	e036      	b.n	800b2b2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b244:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b248:	2b09      	cmp	r3, #9
 800b24a:	dc13      	bgt.n	800b274 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b24c:	7fbb      	ldrb	r3, [r7, #30]
 800b24e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b250:	7f3a      	ldrb	r2, [r7, #28]
 800b252:	4935      	ldr	r1, [pc, #212]	; (800b328 <etharp_find_entry+0x278>)
 800b254:	4613      	mov	r3, r2
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	4413      	add	r3, r2
 800b25a:	00db      	lsls	r3, r3, #3
 800b25c:	440b      	add	r3, r1
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d018      	beq.n	800b296 <etharp_find_entry+0x1e6>
 800b264:	4b31      	ldr	r3, [pc, #196]	; (800b32c <etharp_find_entry+0x27c>)
 800b266:	f240 126f 	movw	r2, #367	; 0x16f
 800b26a:	4933      	ldr	r1, [pc, #204]	; (800b338 <etharp_find_entry+0x288>)
 800b26c:	4831      	ldr	r0, [pc, #196]	; (800b334 <etharp_find_entry+0x284>)
 800b26e:	f002 f8b3 	bl	800d3d8 <iprintf>
 800b272:	e010      	b.n	800b296 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b274:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b278:	2b09      	cmp	r3, #9
 800b27a:	dc02      	bgt.n	800b282 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b27c:	7ffb      	ldrb	r3, [r7, #31]
 800b27e:	773b      	strb	r3, [r7, #28]
 800b280:	e009      	b.n	800b296 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b282:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b286:	2b09      	cmp	r3, #9
 800b288:	dc02      	bgt.n	800b290 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b28a:	7efb      	ldrb	r3, [r7, #27]
 800b28c:	773b      	strb	r3, [r7, #28]
 800b28e:	e002      	b.n	800b296 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b290:	f04f 33ff 	mov.w	r3, #4294967295
 800b294:	e043      	b.n	800b31e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b296:	7f3b      	ldrb	r3, [r7, #28]
 800b298:	2b09      	cmp	r3, #9
 800b29a:	d906      	bls.n	800b2aa <etharp_find_entry+0x1fa>
 800b29c:	4b23      	ldr	r3, [pc, #140]	; (800b32c <etharp_find_entry+0x27c>)
 800b29e:	f240 1281 	movw	r2, #385	; 0x181
 800b2a2:	4926      	ldr	r1, [pc, #152]	; (800b33c <etharp_find_entry+0x28c>)
 800b2a4:	4823      	ldr	r0, [pc, #140]	; (800b334 <etharp_find_entry+0x284>)
 800b2a6:	f002 f897 	bl	800d3d8 <iprintf>
    etharp_free_entry(i);
 800b2aa:	7f3b      	ldrb	r3, [r7, #28]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff fe25 	bl	800aefc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b2b2:	7f3b      	ldrb	r3, [r7, #28]
 800b2b4:	2b09      	cmp	r3, #9
 800b2b6:	d906      	bls.n	800b2c6 <etharp_find_entry+0x216>
 800b2b8:	4b1c      	ldr	r3, [pc, #112]	; (800b32c <etharp_find_entry+0x27c>)
 800b2ba:	f240 1285 	movw	r2, #389	; 0x185
 800b2be:	491f      	ldr	r1, [pc, #124]	; (800b33c <etharp_find_entry+0x28c>)
 800b2c0:	481c      	ldr	r0, [pc, #112]	; (800b334 <etharp_find_entry+0x284>)
 800b2c2:	f002 f889 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b2c6:	7f3a      	ldrb	r2, [r7, #28]
 800b2c8:	4917      	ldr	r1, [pc, #92]	; (800b328 <etharp_find_entry+0x278>)
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	440b      	add	r3, r1
 800b2d4:	3314      	adds	r3, #20
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d006      	beq.n	800b2ea <etharp_find_entry+0x23a>
 800b2dc:	4b13      	ldr	r3, [pc, #76]	; (800b32c <etharp_find_entry+0x27c>)
 800b2de:	f240 1287 	movw	r2, #391	; 0x187
 800b2e2:	4917      	ldr	r1, [pc, #92]	; (800b340 <etharp_find_entry+0x290>)
 800b2e4:	4813      	ldr	r0, [pc, #76]	; (800b334 <etharp_find_entry+0x284>)
 800b2e6:	f002 f877 	bl	800d3d8 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b2f0:	7f3a      	ldrb	r2, [r7, #28]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6819      	ldr	r1, [r3, #0]
 800b2f6:	480c      	ldr	r0, [pc, #48]	; (800b328 <etharp_find_entry+0x278>)
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	4413      	add	r3, r2
 800b2fe:	00db      	lsls	r3, r3, #3
 800b300:	4403      	add	r3, r0
 800b302:	3304      	adds	r3, #4
 800b304:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b306:	7f3a      	ldrb	r2, [r7, #28]
 800b308:	4907      	ldr	r1, [pc, #28]	; (800b328 <etharp_find_entry+0x278>)
 800b30a:	4613      	mov	r3, r2
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	4413      	add	r3, r2
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	440b      	add	r3, r1
 800b314:	3312      	adds	r3, #18
 800b316:	2200      	movs	r2, #0
 800b318:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b31a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3720      	adds	r7, #32
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	2000011c 	.word	0x2000011c
 800b32c:	0800fda0 	.word	0x0800fda0
 800b330:	0800fdd8 	.word	0x0800fdd8
 800b334:	0800fe18 	.word	0x0800fe18
 800b338:	0800fe40 	.word	0x0800fe40
 800b33c:	0800fe58 	.word	0x0800fe58
 800b340:	0800fe6c 	.word	0x0800fe6c

0800b344 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b088      	sub	sp, #32
 800b348:	af02      	add	r7, sp, #8
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b358:	2b06      	cmp	r3, #6
 800b35a:	d006      	beq.n	800b36a <etharp_update_arp_entry+0x26>
 800b35c:	4b48      	ldr	r3, [pc, #288]	; (800b480 <etharp_update_arp_entry+0x13c>)
 800b35e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b362:	4948      	ldr	r1, [pc, #288]	; (800b484 <etharp_update_arp_entry+0x140>)
 800b364:	4848      	ldr	r0, [pc, #288]	; (800b488 <etharp_update_arp_entry+0x144>)
 800b366:	f002 f837 	bl	800d3d8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d012      	beq.n	800b396 <etharp_update_arp_entry+0x52>
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00e      	beq.n	800b396 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68f9      	ldr	r1, [r7, #12]
 800b37e:	4618      	mov	r0, r3
 800b380:	f001 f8fc 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800b384:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b386:	2b00      	cmp	r3, #0
 800b388:	d105      	bne.n	800b396 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b392:	2be0      	cmp	r3, #224	; 0xe0
 800b394:	d102      	bne.n	800b39c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b396:	f06f 030f 	mvn.w	r3, #15
 800b39a:	e06c      	b.n	800b476 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	68b8      	ldr	r0, [r7, #8]
 800b3a4:	f7ff fe84 	bl	800b0b0 <etharp_find_entry>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b3ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	da02      	bge.n	800b3ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b3b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3b8:	e05d      	b.n	800b476 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b3ba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b3be:	4933      	ldr	r1, [pc, #204]	; (800b48c <etharp_update_arp_entry+0x148>)
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	005b      	lsls	r3, r3, #1
 800b3c4:	4413      	add	r3, r2
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	440b      	add	r3, r1
 800b3ca:	3314      	adds	r3, #20
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b3d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b3d4:	492d      	ldr	r1, [pc, #180]	; (800b48c <etharp_update_arp_entry+0x148>)
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	4413      	add	r3, r2
 800b3dc:	00db      	lsls	r3, r3, #3
 800b3de:	440b      	add	r3, r1
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800b3e6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	00db      	lsls	r3, r3, #3
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	4a25      	ldr	r2, [pc, #148]	; (800b48c <etharp_update_arp_entry+0x148>)
 800b3f6:	4413      	add	r3, r2
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	2206      	movs	r2, #6
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f001 ffd7 	bl	800d3b2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b404:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b408:	4920      	ldr	r1, [pc, #128]	; (800b48c <etharp_update_arp_entry+0x148>)
 800b40a:	4613      	mov	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4413      	add	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	440b      	add	r3, r1
 800b414:	3312      	adds	r3, #18
 800b416:	2200      	movs	r2, #0
 800b418:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b41a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b41e:	491b      	ldr	r1, [pc, #108]	; (800b48c <etharp_update_arp_entry+0x148>)
 800b420:	4613      	mov	r3, r2
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	4413      	add	r3, r2
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	440b      	add	r3, r1
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d021      	beq.n	800b474 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b430:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b434:	4915      	ldr	r1, [pc, #84]	; (800b48c <etharp_update_arp_entry+0x148>)
 800b436:	4613      	mov	r3, r2
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	4413      	add	r3, r2
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	440b      	add	r3, r1
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b444:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b448:	4910      	ldr	r1, [pc, #64]	; (800b48c <etharp_update_arp_entry+0x148>)
 800b44a:	4613      	mov	r3, r2
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	4413      	add	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	440b      	add	r3, r1
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800b45e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6939      	ldr	r1, [r7, #16]
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f001 ff27 	bl	800d2bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b46e:	6938      	ldr	r0, [r7, #16]
 800b470:	f7f8 fc38 	bl	8003ce4 <pbuf_free>
  }
  return ERR_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	0800fda0 	.word	0x0800fda0
 800b484:	0800fe98 	.word	0x0800fe98
 800b488:	0800fe18 	.word	0x0800fe18
 800b48c:	2000011c 	.word	0x2000011c

0800b490 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e01f      	b.n	800b4de <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800b49e:	7bfa      	ldrb	r2, [r7, #15]
 800b4a0:	4912      	ldr	r1, [pc, #72]	; (800b4ec <etharp_cleanup_netif+0x5c>)
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	4413      	add	r3, r2
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3314      	adds	r3, #20
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00f      	beq.n	800b4d8 <etharp_cleanup_netif+0x48>
 800b4b8:	7bfa      	ldrb	r2, [r7, #15]
 800b4ba:	490c      	ldr	r1, [pc, #48]	; (800b4ec <etharp_cleanup_netif+0x5c>)
 800b4bc:	4613      	mov	r3, r2
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	4413      	add	r3, r2
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	440b      	add	r3, r1
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d103      	bne.n	800b4d8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fd12 	bl	800aefc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	73fb      	strb	r3, [r7, #15]
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	2b09      	cmp	r3, #9
 800b4e2:	d9dc      	bls.n	800b49e <etharp_cleanup_netif+0xe>
    }
  }
}
 800b4e4:	bf00      	nop
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	2000011c 	.word	0x2000011c

0800b4f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b4f0:	b5b0      	push	{r4, r5, r7, lr}
 800b4f2:	b08a      	sub	sp, #40	; 0x28
 800b4f4:	af04      	add	r7, sp, #16
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d107      	bne.n	800b510 <etharp_input+0x20>
 800b500:	4b3f      	ldr	r3, [pc, #252]	; (800b600 <etharp_input+0x110>)
 800b502:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b506:	493f      	ldr	r1, [pc, #252]	; (800b604 <etharp_input+0x114>)
 800b508:	483f      	ldr	r0, [pc, #252]	; (800b608 <etharp_input+0x118>)
 800b50a:	f001 ff65 	bl	800d3d8 <iprintf>
 800b50e:	e074      	b.n	800b5fa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b520:	d10c      	bne.n	800b53c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b526:	2b06      	cmp	r3, #6
 800b528:	d108      	bne.n	800b53c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b52e:	2b04      	cmp	r3, #4
 800b530:	d104      	bne.n	800b53c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	885b      	ldrh	r3, [r3, #2]
 800b536:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d003      	beq.n	800b544 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7f8 fbd1 	bl	8003ce4 <pbuf_free>
    return;
 800b542:	e05a      	b.n	800b5fa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	330e      	adds	r3, #14
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3318      	adds	r3, #24
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	3304      	adds	r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d102      	bne.n	800b564 <etharp_input+0x74>
    for_us = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	75fb      	strb	r3, [r7, #23]
 800b562:	e009      	b.n	800b578 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	3304      	adds	r3, #4
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	bf0c      	ite	eq
 800b570:	2301      	moveq	r3, #1
 800b572:	2300      	movne	r3, #0
 800b574:	b2db      	uxtb	r3, r3
 800b576:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f103 0208 	add.w	r2, r3, #8
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <etharp_input+0x98>
 800b584:	2301      	movs	r3, #1
 800b586:	e000      	b.n	800b58a <etharp_input+0x9a>
 800b588:	2302      	movs	r3, #2
 800b58a:	f107 010c 	add.w	r1, r7, #12
 800b58e:	6838      	ldr	r0, [r7, #0]
 800b590:	f7ff fed8 	bl	800b344 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	88db      	ldrh	r3, [r3, #6]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b59e:	d003      	beq.n	800b5a8 <etharp_input+0xb8>
 800b5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5a4:	d01e      	beq.n	800b5e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b5a6:	e025      	b.n	800b5f4 <etharp_input+0x104>
    if (for_us) {
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d021      	beq.n	800b5f2 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b5c8:	2102      	movs	r1, #2
 800b5ca:	9103      	str	r1, [sp, #12]
 800b5cc:	f107 010c 	add.w	r1, r7, #12
 800b5d0:	9102      	str	r1, [sp, #8]
 800b5d2:	9201      	str	r2, [sp, #4]
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4601      	mov	r1, r0
 800b5dc:	6838      	ldr	r0, [r7, #0]
 800b5de:	f000 fae7 	bl	800bbb0 <etharp_raw>
    break;
 800b5e2:	e006      	b.n	800b5f2 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800b5e4:	f107 030c 	add.w	r3, r7, #12
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6838      	ldr	r0, [r7, #0]
 800b5ec:	f7fe f980 	bl	80098f0 <dhcp_arp_reply>
    break;
 800b5f0:	e000      	b.n	800b5f4 <etharp_input+0x104>
    break;
 800b5f2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7f8 fb75 	bl	8003ce4 <pbuf_free>
}
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bdb0      	pop	{r4, r5, r7, pc}
 800b600:	0800fda0 	.word	0x0800fda0
 800b604:	0800fef0 	.word	0x0800fef0
 800b608:	0800fe18 	.word	0x0800fe18

0800b60c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af02      	add	r7, sp, #8
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b61a:	79fa      	ldrb	r2, [r7, #7]
 800b61c:	4944      	ldr	r1, [pc, #272]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b61e:	4613      	mov	r3, r2
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	4413      	add	r3, r2
 800b624:	00db      	lsls	r3, r3, #3
 800b626:	440b      	add	r3, r1
 800b628:	3314      	adds	r3, #20
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d806      	bhi.n	800b63e <etharp_output_to_arp_index+0x32>
 800b630:	4b40      	ldr	r3, [pc, #256]	; (800b734 <etharp_output_to_arp_index+0x128>)
 800b632:	f240 22ed 	movw	r2, #749	; 0x2ed
 800b636:	4940      	ldr	r1, [pc, #256]	; (800b738 <etharp_output_to_arp_index+0x12c>)
 800b638:	4840      	ldr	r0, [pc, #256]	; (800b73c <etharp_output_to_arp_index+0x130>)
 800b63a:	f001 fecd 	bl	800d3d8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b63e:	79fa      	ldrb	r2, [r7, #7]
 800b640:	493b      	ldr	r1, [pc, #236]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b642:	4613      	mov	r3, r2
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	4413      	add	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	440b      	add	r3, r1
 800b64c:	3314      	adds	r3, #20
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b02      	cmp	r3, #2
 800b652:	d153      	bne.n	800b6fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b654:	79fa      	ldrb	r2, [r7, #7]
 800b656:	4936      	ldr	r1, [pc, #216]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b658:	4613      	mov	r3, r2
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	4413      	add	r3, r2
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	440b      	add	r3, r1
 800b662:	3312      	adds	r3, #18
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b66a:	d919      	bls.n	800b6a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b66c:	79fa      	ldrb	r2, [r7, #7]
 800b66e:	4613      	mov	r3, r2
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	4413      	add	r3, r2
 800b674:	00db      	lsls	r3, r3, #3
 800b676:	4a2e      	ldr	r2, [pc, #184]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b678:	4413      	add	r3, r2
 800b67a:	3304      	adds	r3, #4
 800b67c:	4619      	mov	r1, r3
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 fb44 	bl	800bd0c <etharp_request>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d138      	bne.n	800b6fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b68a:	79fa      	ldrb	r2, [r7, #7]
 800b68c:	4928      	ldr	r1, [pc, #160]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b68e:	4613      	mov	r3, r2
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	4413      	add	r3, r2
 800b694:	00db      	lsls	r3, r3, #3
 800b696:	440b      	add	r3, r1
 800b698:	3314      	adds	r3, #20
 800b69a:	2203      	movs	r2, #3
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	e02d      	b.n	800b6fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b6a0:	79fa      	ldrb	r2, [r7, #7]
 800b6a2:	4923      	ldr	r1, [pc, #140]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4413      	add	r3, r2
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	440b      	add	r3, r1
 800b6ae:	3312      	adds	r3, #18
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b6b6:	d321      	bcc.n	800b6fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b6b8:	79fa      	ldrb	r2, [r7, #7]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	4413      	add	r3, r2
 800b6c0:	00db      	lsls	r3, r3, #3
 800b6c2:	4a1b      	ldr	r2, [pc, #108]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b6c4:	4413      	add	r3, r2
 800b6c6:	1d19      	adds	r1, r3, #4
 800b6c8:	79fa      	ldrb	r2, [r7, #7]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	4413      	add	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	4a16      	ldr	r2, [pc, #88]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b6d6:	4413      	add	r3, r2
 800b6d8:	3304      	adds	r3, #4
 800b6da:	461a      	mov	r2, r3
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 faf3 	bl	800bcc8 <etharp_request_dst>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d109      	bne.n	800b6fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b6e8:	79fa      	ldrb	r2, [r7, #7]
 800b6ea:	4911      	ldr	r1, [pc, #68]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	4413      	add	r3, r2
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	440b      	add	r3, r1
 800b6f6:	3314      	adds	r3, #20
 800b6f8:	2203      	movs	r2, #3
 800b6fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800b702:	79fa      	ldrb	r2, [r7, #7]
 800b704:	4613      	mov	r3, r2
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	4413      	add	r3, r2
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	3308      	adds	r3, #8
 800b70e:	4a08      	ldr	r2, [pc, #32]	; (800b730 <etharp_output_to_arp_index+0x124>)
 800b710:	4413      	add	r3, r2
 800b712:	1d1a      	adds	r2, r3, #4
 800b714:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	4613      	mov	r3, r2
 800b71c:	460a      	mov	r2, r1
 800b71e:	68b9      	ldr	r1, [r7, #8]
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f001 fdcb 	bl	800d2bc <ethernet_output>
 800b726:	4603      	mov	r3, r0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	2000011c 	.word	0x2000011c
 800b734:	0800fda0 	.word	0x0800fda0
 800b738:	0800ff10 	.word	0x0800ff10
 800b73c:	0800fe18 	.word	0x0800fe18

0800b740 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af02      	add	r7, sp, #8
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d106      	bne.n	800b764 <etharp_output+0x24>
 800b756:	4b69      	ldr	r3, [pc, #420]	; (800b8fc <etharp_output+0x1bc>)
 800b758:	f240 321b 	movw	r2, #795	; 0x31b
 800b75c:	4968      	ldr	r1, [pc, #416]	; (800b900 <etharp_output+0x1c0>)
 800b75e:	4869      	ldr	r0, [pc, #420]	; (800b904 <etharp_output+0x1c4>)
 800b760:	f001 fe3a 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d106      	bne.n	800b778 <etharp_output+0x38>
 800b76a:	4b64      	ldr	r3, [pc, #400]	; (800b8fc <etharp_output+0x1bc>)
 800b76c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b770:	4965      	ldr	r1, [pc, #404]	; (800b908 <etharp_output+0x1c8>)
 800b772:	4864      	ldr	r0, [pc, #400]	; (800b904 <etharp_output+0x1c4>)
 800b774:	f001 fe30 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <etharp_output+0x4c>
 800b77e:	4b5f      	ldr	r3, [pc, #380]	; (800b8fc <etharp_output+0x1bc>)
 800b780:	f240 321d 	movw	r2, #797	; 0x31d
 800b784:	4961      	ldr	r1, [pc, #388]	; (800b90c <etharp_output+0x1cc>)
 800b786:	485f      	ldr	r0, [pc, #380]	; (800b904 <etharp_output+0x1c4>)
 800b788:	f001 fe26 	bl	800d3d8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68f9      	ldr	r1, [r7, #12]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fef2 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d002      	beq.n	800b7a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b79e:	4b5c      	ldr	r3, [pc, #368]	; (800b910 <etharp_output+0x1d0>)
 800b7a0:	61fb      	str	r3, [r7, #28]
 800b7a2:	e09b      	b.n	800b8dc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7ac:	2be0      	cmp	r3, #224	; 0xe0
 800b7ae:	d118      	bne.n	800b7e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b7b8:	235e      	movs	r3, #94	; 0x5e
 800b7ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3302      	adds	r3, #2
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	3303      	adds	r3, #3
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b7da:	f107 0310 	add.w	r3, r7, #16
 800b7de:	61fb      	str	r3, [r7, #28]
 800b7e0:	e07c      	b.n	800b8dc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	405a      	eors	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d012      	beq.n	800b820 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b800:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b804:	4293      	cmp	r3, r2
 800b806:	d00b      	beq.n	800b820 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	330c      	adds	r3, #12
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	330c      	adds	r3, #12
 800b816:	61bb      	str	r3, [r7, #24]
 800b818:	e002      	b.n	800b820 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b81a:	f06f 0303 	mvn.w	r3, #3
 800b81e:	e069      	b.n	800b8f4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b820:	4b3c      	ldr	r3, [pc, #240]	; (800b914 <etharp_output+0x1d4>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	4619      	mov	r1, r3
 800b826:	4a3c      	ldr	r2, [pc, #240]	; (800b918 <etharp_output+0x1d8>)
 800b828:	460b      	mov	r3, r1
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	440b      	add	r3, r1
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	4413      	add	r3, r2
 800b832:	3314      	adds	r3, #20
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d917      	bls.n	800b86a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	4b35      	ldr	r3, [pc, #212]	; (800b914 <etharp_output+0x1d4>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	4618      	mov	r0, r3
 800b844:	4934      	ldr	r1, [pc, #208]	; (800b918 <etharp_output+0x1d8>)
 800b846:	4603      	mov	r3, r0
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	4403      	add	r3, r0
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	440b      	add	r3, r1
 800b850:	3304      	adds	r3, #4
 800b852:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b854:	429a      	cmp	r2, r3
 800b856:	d108      	bne.n	800b86a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b858:	4b2e      	ldr	r3, [pc, #184]	; (800b914 <etharp_output+0x1d4>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	461a      	mov	r2, r3
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7ff fed3 	bl	800b60c <etharp_output_to_arp_index>
 800b866:	4603      	mov	r3, r0
 800b868:	e044      	b.n	800b8f4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b86a:	2300      	movs	r3, #0
 800b86c:	75fb      	strb	r3, [r7, #23]
 800b86e:	e02a      	b.n	800b8c6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b870:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b874:	4928      	ldr	r1, [pc, #160]	; (800b918 <etharp_output+0x1d8>)
 800b876:	4613      	mov	r3, r2
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	4413      	add	r3, r2
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	440b      	add	r3, r1
 800b880:	3314      	adds	r3, #20
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d918      	bls.n	800b8ba <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	6819      	ldr	r1, [r3, #0]
 800b88c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b890:	4821      	ldr	r0, [pc, #132]	; (800b918 <etharp_output+0x1d8>)
 800b892:	4613      	mov	r3, r2
 800b894:	005b      	lsls	r3, r3, #1
 800b896:	4413      	add	r3, r2
 800b898:	00db      	lsls	r3, r3, #3
 800b89a:	4403      	add	r3, r0
 800b89c:	3304      	adds	r3, #4
 800b89e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b8a0:	4299      	cmp	r1, r3
 800b8a2:	d10a      	bne.n	800b8ba <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b8a4:	7dfa      	ldrb	r2, [r7, #23]
 800b8a6:	4b1b      	ldr	r3, [pc, #108]	; (800b914 <etharp_output+0x1d4>)
 800b8a8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	68b9      	ldr	r1, [r7, #8]
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff feab 	bl	800b60c <etharp_output_to_arp_index>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	e01c      	b.n	800b8f4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	75fb      	strb	r3, [r7, #23]
 800b8c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	ddd0      	ble.n	800b870 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	69b9      	ldr	r1, [r7, #24]
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 f822 	bl	800b91c <etharp_query>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	e00b      	b.n	800b8f4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800b8e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f001 fce5 	bl	800d2bc <ethernet_output>
 800b8f2:	4603      	mov	r3, r0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	0800fda0 	.word	0x0800fda0
 800b900:	0800fef0 	.word	0x0800fef0
 800b904:	0800fe18 	.word	0x0800fe18
 800b908:	0800ff40 	.word	0x0800ff40
 800b90c:	0800fee0 	.word	0x0800fee0
 800b910:	08010514 	.word	0x08010514
 800b914:	2000020c 	.word	0x2000020c
 800b918:	2000011c 	.word	0x2000011c

0800b91c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08c      	sub	sp, #48	; 0x30
 800b920:	af02      	add	r7, sp, #8
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3329      	adds	r3, #41	; 0x29
 800b92c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b92e:	23ff      	movs	r3, #255	; 0xff
 800b930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68f9      	ldr	r1, [r7, #12]
 800b93e:	4618      	mov	r0, r3
 800b940:	f000 fe1c 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10c      	bne.n	800b964 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b952:	2be0      	cmp	r3, #224	; 0xe0
 800b954:	d006      	beq.n	800b964 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b964:	f06f 030f 	mvn.w	r3, #15
 800b968:	e10f      	b.n	800bb8a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	2101      	movs	r1, #1
 800b96e:	68b8      	ldr	r0, [r7, #8]
 800b970:	f7ff fb9e 	bl	800b0b0 <etharp_find_entry>
 800b974:	4603      	mov	r3, r0
 800b976:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800b978:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	da02      	bge.n	800b986 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b980:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b984:	e101      	b.n	800bb8a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b986:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b98a:	4982      	ldr	r1, [pc, #520]	; (800bb94 <etharp_query+0x278>)
 800b98c:	4613      	mov	r3, r2
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	4413      	add	r3, r2
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	440b      	add	r3, r1
 800b996:	3314      	adds	r3, #20
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d117      	bne.n	800b9ce <etharp_query+0xb2>
    is_new_entry = 1;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b9a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b9a6:	497b      	ldr	r1, [pc, #492]	; (800bb94 <etharp_query+0x278>)
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	005b      	lsls	r3, r3, #1
 800b9ac:	4413      	add	r3, r2
 800b9ae:	00db      	lsls	r3, r3, #3
 800b9b0:	440b      	add	r3, r1
 800b9b2:	3314      	adds	r3, #20
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b9b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b9bc:	4975      	ldr	r1, [pc, #468]	; (800bb94 <etharp_query+0x278>)
 800b9be:	4613      	mov	r3, r2
 800b9c0:	005b      	lsls	r3, r3, #1
 800b9c2:	4413      	add	r3, r2
 800b9c4:	00db      	lsls	r3, r3, #3
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b9ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b9d2:	4970      	ldr	r1, [pc, #448]	; (800bb94 <etharp_query+0x278>)
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	4413      	add	r3, r2
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	440b      	add	r3, r1
 800b9de:	3314      	adds	r3, #20
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d012      	beq.n	800ba0c <etharp_query+0xf0>
 800b9e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b9ea:	496a      	ldr	r1, [pc, #424]	; (800bb94 <etharp_query+0x278>)
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	440b      	add	r3, r1
 800b9f6:	3314      	adds	r3, #20
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d806      	bhi.n	800ba0c <etharp_query+0xf0>
 800b9fe:	4b66      	ldr	r3, [pc, #408]	; (800bb98 <etharp_query+0x27c>)
 800ba00:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ba04:	4965      	ldr	r1, [pc, #404]	; (800bb9c <etharp_query+0x280>)
 800ba06:	4866      	ldr	r0, [pc, #408]	; (800bba0 <etharp_query+0x284>)
 800ba08:	f001 fce6 	bl	800d3d8 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <etharp_query+0xfc>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10c      	bne.n	800ba32 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 f976 	bl	800bd0c <etharp_request>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d102      	bne.n	800ba32 <etharp_query+0x116>
      return result;
 800ba2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba30:	e0ab      	b.n	800bb8a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d106      	bne.n	800ba46 <etharp_query+0x12a>
 800ba38:	4b57      	ldr	r3, [pc, #348]	; (800bb98 <etharp_query+0x27c>)
 800ba3a:	f240 32db 	movw	r2, #987	; 0x3db
 800ba3e:	4959      	ldr	r1, [pc, #356]	; (800bba4 <etharp_query+0x288>)
 800ba40:	4857      	ldr	r0, [pc, #348]	; (800bba0 <etharp_query+0x284>)
 800ba42:	f001 fcc9 	bl	800d3d8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ba46:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ba4a:	4952      	ldr	r1, [pc, #328]	; (800bb94 <etharp_query+0x278>)
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	005b      	lsls	r3, r3, #1
 800ba50:	4413      	add	r3, r2
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	440b      	add	r3, r1
 800ba56:	3314      	adds	r3, #20
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d919      	bls.n	800ba92 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800ba5e:	7cfa      	ldrb	r2, [r7, #19]
 800ba60:	4b51      	ldr	r3, [pc, #324]	; (800bba8 <etharp_query+0x28c>)
 800ba62:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ba64:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	4413      	add	r3, r2
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	3308      	adds	r3, #8
 800ba72:	4a48      	ldr	r2, [pc, #288]	; (800bb94 <etharp_query+0x278>)
 800ba74:	4413      	add	r3, r2
 800ba76:	1d1a      	adds	r2, r3, #4
 800ba78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	6879      	ldr	r1, [r7, #4]
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f001 fc19 	bl	800d2bc <ethernet_output>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba90:	e079      	b.n	800bb86 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ba92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ba96:	493f      	ldr	r1, [pc, #252]	; (800bb94 <etharp_query+0x278>)
 800ba98:	4613      	mov	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	4413      	add	r3, r2
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	440b      	add	r3, r1
 800baa2:	3314      	adds	r3, #20
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d16d      	bne.n	800bb86 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bab2:	e01a      	b.n	800baea <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	895a      	ldrh	r2, [r3, #10]
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	891b      	ldrh	r3, [r3, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	d10a      	bne.n	800bad6 <etharp_query+0x1ba>
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d006      	beq.n	800bad6 <etharp_query+0x1ba>
 800bac8:	4b33      	ldr	r3, [pc, #204]	; (800bb98 <etharp_query+0x27c>)
 800baca:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800bace:	4937      	ldr	r1, [pc, #220]	; (800bbac <etharp_query+0x290>)
 800bad0:	4833      	ldr	r0, [pc, #204]	; (800bba0 <etharp_query+0x284>)
 800bad2:	f001 fc81 	bl	800d3d8 <iprintf>
      if (p->type != PBUF_ROM) {
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	7b1b      	ldrb	r3, [r3, #12]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d002      	beq.n	800bae4 <etharp_query+0x1c8>
        copy_needed = 1;
 800bade:	2301      	movs	r3, #1
 800bae0:	61bb      	str	r3, [r7, #24]
        break;
 800bae2:	e005      	b.n	800baf0 <etharp_query+0x1d4>
      }
      p = p->next;
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e1      	bne.n	800bab4 <etharp_query+0x198>
    }
    if (copy_needed) {
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d017      	beq.n	800bb26 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	891b      	ldrh	r3, [r3, #8]
 800bafa:	2200      	movs	r2, #0
 800bafc:	4619      	mov	r1, r3
 800bafe:	2002      	movs	r0, #2
 800bb00:	f7f7 fd7e 	bl	8003600 <pbuf_alloc>
 800bb04:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d011      	beq.n	800bb30 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800bb0c:	6879      	ldr	r1, [r7, #4]
 800bb0e:	69f8      	ldr	r0, [r7, #28]
 800bb10:	f7f8 fa1a 	bl	8003f48 <pbuf_copy>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <etharp_query+0x214>
          pbuf_free(p);
 800bb1a:	69f8      	ldr	r0, [r7, #28]
 800bb1c:	f7f8 f8e2 	bl	8003ce4 <pbuf_free>
          p = NULL;
 800bb20:	2300      	movs	r3, #0
 800bb22:	61fb      	str	r3, [r7, #28]
 800bb24:	e004      	b.n	800bb30 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800bb2a:	69f8      	ldr	r0, [r7, #28]
 800bb2c:	f7f8 f984 	bl	8003e38 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d024      	beq.n	800bb80 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800bb36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bb3a:	4916      	ldr	r1, [pc, #88]	; (800bb94 <etharp_query+0x278>)
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	4413      	add	r3, r2
 800bb42:	00db      	lsls	r3, r3, #3
 800bb44:	440b      	add	r3, r1
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00b      	beq.n	800bb64 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800bb4c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bb50:	4910      	ldr	r1, [pc, #64]	; (800bb94 <etharp_query+0x278>)
 800bb52:	4613      	mov	r3, r2
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	4413      	add	r3, r2
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	440b      	add	r3, r1
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7f8 f8c0 	bl	8003ce4 <pbuf_free>
      }
      arp_table[i].q = p;
 800bb64:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bb68:	490a      	ldr	r1, [pc, #40]	; (800bb94 <etharp_query+0x278>)
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	440b      	add	r3, r1
 800bb74:	69fa      	ldr	r2, [r7, #28]
 800bb76:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb7e:	e002      	b.n	800bb86 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800bb80:	23ff      	movs	r3, #255	; 0xff
 800bb82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800bb86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3728      	adds	r7, #40	; 0x28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	2000011c 	.word	0x2000011c
 800bb98:	0800fda0 	.word	0x0800fda0
 800bb9c:	0800ff4c 	.word	0x0800ff4c
 800bba0:	0800fe18 	.word	0x0800fe18
 800bba4:	0800ff40 	.word	0x0800ff40
 800bba8:	2000020c 	.word	0x2000020c
 800bbac:	0800ff74 	.word	0x0800ff74

0800bbb0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08a      	sub	sp, #40	; 0x28
 800bbb4:	af02      	add	r7, sp, #8
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d106      	bne.n	800bbd6 <etharp_raw+0x26>
 800bbc8:	4b3a      	ldr	r3, [pc, #232]	; (800bcb4 <etharp_raw+0x104>)
 800bbca:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800bbce:	493a      	ldr	r1, [pc, #232]	; (800bcb8 <etharp_raw+0x108>)
 800bbd0:	483a      	ldr	r0, [pc, #232]	; (800bcbc <etharp_raw+0x10c>)
 800bbd2:	f001 fc01 	bl	800d3d8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	211c      	movs	r1, #28
 800bbda:	2002      	movs	r0, #2
 800bbdc:	f7f7 fd10 	bl	8003600 <pbuf_alloc>
 800bbe0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbec:	e05d      	b.n	800bcaa <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	895b      	ldrh	r3, [r3, #10]
 800bbf2:	2b1b      	cmp	r3, #27
 800bbf4:	d806      	bhi.n	800bc04 <etharp_raw+0x54>
 800bbf6:	4b2f      	ldr	r3, [pc, #188]	; (800bcb4 <etharp_raw+0x104>)
 800bbf8:	f240 4264 	movw	r2, #1124	; 0x464
 800bbfc:	4930      	ldr	r1, [pc, #192]	; (800bcc0 <etharp_raw+0x110>)
 800bbfe:	482f      	ldr	r0, [pc, #188]	; (800bcbc <etharp_raw+0x10c>)
 800bc00:	f001 fbea 	bl	800d3d8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bc0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f6 ff6c 	bl	8002aea <lwip_htons>
 800bc12:	4603      	mov	r3, r0
 800bc14:	461a      	mov	r2, r3
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc20:	2b06      	cmp	r3, #6
 800bc22:	d006      	beq.n	800bc32 <etharp_raw+0x82>
 800bc24:	4b23      	ldr	r3, [pc, #140]	; (800bcb4 <etharp_raw+0x104>)
 800bc26:	f240 426b 	movw	r2, #1131	; 0x46b
 800bc2a:	4926      	ldr	r1, [pc, #152]	; (800bcc4 <etharp_raw+0x114>)
 800bc2c:	4823      	ldr	r0, [pc, #140]	; (800bcbc <etharp_raw+0x10c>)
 800bc2e:	f001 fbd3 	bl	800d3d8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	3308      	adds	r3, #8
 800bc36:	2206      	movs	r2, #6
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f001 fbb9 	bl	800d3b2 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	3312      	adds	r3, #18
 800bc44:	2206      	movs	r2, #6
 800bc46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f001 fbb2 	bl	800d3b2 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	330e      	adds	r3, #14
 800bc52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc54:	6812      	ldr	r2, [r2, #0]
 800bc56:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	3318      	adds	r3, #24
 800bc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc5e:	6812      	ldr	r2, [r2, #0]
 800bc60:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f042 0201 	orr.w	r2, r2, #1
 800bc6e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f042 0208 	orr.w	r2, r2, #8
 800bc78:	709a      	strb	r2, [r3, #2]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2206      	movs	r2, #6
 800bc82:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2204      	movs	r2, #4
 800bc88:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bc8a:	f640 0306 	movw	r3, #2054	; 0x806
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	69b9      	ldr	r1, [r7, #24]
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f001 fb10 	bl	800d2bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bc9c:	69b8      	ldr	r0, [r7, #24]
 800bc9e:	f7f8 f821 	bl	8003ce4 <pbuf_free>
  p = NULL;
 800bca2:	2300      	movs	r3, #0
 800bca4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3720      	adds	r7, #32
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0800fda0 	.word	0x0800fda0
 800bcb8:	0800fef0 	.word	0x0800fef0
 800bcbc:	0800fe18 	.word	0x0800fe18
 800bcc0:	0800ff90 	.word	0x0800ff90
 800bcc4:	0800ffc4 	.word	0x0800ffc4

0800bcc8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af04      	add	r7, sp, #16
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bce4:	2201      	movs	r2, #1
 800bce6:	9203      	str	r2, [sp, #12]
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	9202      	str	r2, [sp, #8]
 800bcec:	4a06      	ldr	r2, [pc, #24]	; (800bd08 <etharp_request_dst+0x40>)
 800bcee:	9201      	str	r2, [sp, #4]
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7ff ff5a 	bl	800bbb0 <etharp_raw>
 800bcfc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	0801051c 	.word	0x0801051c

0800bd0c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bd16:	4a05      	ldr	r2, [pc, #20]	; (800bd2c <etharp_request+0x20>)
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff ffd4 	bl	800bcc8 <etharp_request_dst>
 800bd20:	4603      	mov	r3, r0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	08010514 	.word	0x08010514

0800bd30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08e      	sub	sp, #56	; 0x38
 800bd34:	af04      	add	r7, sp, #16
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bd3a:	4b7a      	ldr	r3, [pc, #488]	; (800bf24 <icmp_input+0x1f4>)
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	f003 030f 	and.w	r3, r3, #15
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800bd50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd52:	2b13      	cmp	r3, #19
 800bd54:	f240 80d1 	bls.w	800befa <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	895b      	ldrh	r3, [r3, #10]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	f240 80ce 	bls.w	800befe <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bd6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80bb 	beq.w	800beec <icmp_input+0x1bc>
 800bd76:	2b08      	cmp	r3, #8
 800bd78:	f040 80bb 	bne.w	800bef2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800bd7c:	4b6a      	ldr	r3, [pc, #424]	; (800bf28 <icmp_input+0x1f8>)
 800bd7e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bd80:	4b68      	ldr	r3, [pc, #416]	; (800bf24 <icmp_input+0x1f4>)
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd88:	2be0      	cmp	r3, #224	; 0xe0
 800bd8a:	f000 80bf 	beq.w	800bf0c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bd8e:	4b65      	ldr	r3, [pc, #404]	; (800bf24 <icmp_input+0x1f4>)
 800bd90:	695a      	ldr	r2, [r3, #20]
 800bd92:	4b64      	ldr	r3, [pc, #400]	; (800bf24 <icmp_input+0x1f4>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4619      	mov	r1, r3
 800bd98:	4610      	mov	r0, r2
 800bd9a:	f000 fbef 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 80b5 	bne.w	800bf10 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	891b      	ldrh	r3, [r3, #8]
 800bdaa:	2b07      	cmp	r3, #7
 800bdac:	f240 80a9 	bls.w	800bf02 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800bdb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdb2:	330e      	adds	r3, #14
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	b21b      	sxth	r3, r3
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7f7 ff6e 	bl	8003c9c <pbuf_header>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d046      	beq.n	800be54 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	891a      	ldrh	r2, [r3, #8]
 800bdca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdcc:	4413      	add	r3, r2
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	2002      	movs	r0, #2
 800bdd6:	f7f7 fc13 	bl	8003600 <pbuf_alloc>
 800bdda:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f000 8098 	beq.w	800bf14 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	895b      	ldrh	r3, [r3, #10]
 800bde8:	461a      	mov	r2, r3
 800bdea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdec:	3308      	adds	r3, #8
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d203      	bcs.n	800bdfa <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800bdf2:	69b8      	ldr	r0, [r7, #24]
 800bdf4:	f7f7 ff76 	bl	8003ce4 <pbuf_free>
        goto icmperr;
 800bdf8:	e08d      	b.n	800bf16 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be02:	4618      	mov	r0, r3
 800be04:	f001 fad5 	bl	800d3b2 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800be08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be0a:	425b      	negs	r3, r3
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	b21b      	sxth	r3, r3
 800be10:	4619      	mov	r1, r3
 800be12:	69b8      	ldr	r0, [r7, #24]
 800be14:	f7f7 ff42 	bl	8003c9c <pbuf_header>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d009      	beq.n	800be32 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800be1e:	4b43      	ldr	r3, [pc, #268]	; (800bf2c <icmp_input+0x1fc>)
 800be20:	22af      	movs	r2, #175	; 0xaf
 800be22:	4943      	ldr	r1, [pc, #268]	; (800bf30 <icmp_input+0x200>)
 800be24:	4843      	ldr	r0, [pc, #268]	; (800bf34 <icmp_input+0x204>)
 800be26:	f001 fad7 	bl	800d3d8 <iprintf>
        pbuf_free(r);
 800be2a:	69b8      	ldr	r0, [r7, #24]
 800be2c:	f7f7 ff5a 	bl	8003ce4 <pbuf_free>
        goto icmperr;
 800be30:	e071      	b.n	800bf16 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	69b8      	ldr	r0, [r7, #24]
 800be36:	f7f8 f887 	bl	8003f48 <pbuf_copy>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d003      	beq.n	800be48 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800be40:	69b8      	ldr	r0, [r7, #24]
 800be42:	f7f7 ff4f 	bl	8003ce4 <pbuf_free>
        goto icmperr;
 800be46:	e066      	b.n	800bf16 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7f7 ff4b 	bl	8003ce4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	607b      	str	r3, [r7, #4]
 800be52:	e015      	b.n	800be80 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800be54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be56:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800be5a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800be5e:	33f2      	adds	r3, #242	; 0xf2
 800be60:	b29b      	uxth	r3, r3
 800be62:	b21b      	sxth	r3, r3
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7f7 ff18 	bl	8003c9c <pbuf_header>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d006      	beq.n	800be80 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800be72:	4b2e      	ldr	r3, [pc, #184]	; (800bf2c <icmp_input+0x1fc>)
 800be74:	22c0      	movs	r2, #192	; 0xc0
 800be76:	4930      	ldr	r1, [pc, #192]	; (800bf38 <icmp_input+0x208>)
 800be78:	482e      	ldr	r0, [pc, #184]	; (800bf34 <icmp_input+0x204>)
 800be7a:	f001 faad 	bl	800d3d8 <iprintf>
        goto icmperr;
 800be7e:	e04a      	b.n	800bf16 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800be86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7f7 ff05 	bl	8003c9c <pbuf_header>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d12b      	bne.n	800bef0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bea6:	4b1f      	ldr	r3, [pc, #124]	; (800bf24 <icmp_input+0x1f4>)
 800bea8:	691a      	ldr	r2, [r3, #16]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2200      	movs	r2, #0
 800beb2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2200      	movs	r2, #0
 800beb8:	709a      	strb	r2, [r3, #2]
 800beba:	2200      	movs	r2, #0
 800bebc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	22ff      	movs	r2, #255	; 0xff
 800bec2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2200      	movs	r2, #0
 800bec8:	729a      	strb	r2, [r3, #10]
 800beca:	2200      	movs	r2, #0
 800becc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	9302      	str	r3, [sp, #8]
 800bed2:	2301      	movs	r3, #1
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	2300      	movs	r3, #0
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	23ff      	movs	r3, #255	; 0xff
 800bedc:	2200      	movs	r2, #0
 800bede:	69f9      	ldr	r1, [r7, #28]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fa79 	bl	800c3d8 <ip4_output_if>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800beea:	e001      	b.n	800bef0 <icmp_input+0x1c0>
    break;
 800beec:	bf00      	nop
 800beee:	e000      	b.n	800bef2 <icmp_input+0x1c2>
    break;
 800bef0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7f7 fef6 	bl	8003ce4 <pbuf_free>
  return;
 800bef8:	e011      	b.n	800bf1e <icmp_input+0x1ee>
    goto lenerr;
 800befa:	bf00      	nop
 800befc:	e002      	b.n	800bf04 <icmp_input+0x1d4>
    goto lenerr;
 800befe:	bf00      	nop
 800bf00:	e000      	b.n	800bf04 <icmp_input+0x1d4>
      goto lenerr;
 800bf02:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7f7 feed 	bl	8003ce4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bf0a:	e008      	b.n	800bf1e <icmp_input+0x1ee>
      goto icmperr;
 800bf0c:	bf00      	nop
 800bf0e:	e002      	b.n	800bf16 <icmp_input+0x1e6>
      goto icmperr;
 800bf10:	bf00      	nop
 800bf12:	e000      	b.n	800bf16 <icmp_input+0x1e6>
        goto icmperr;
 800bf14:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7f7 fee4 	bl	8003ce4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bf1c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bf1e:	3728      	adds	r7, #40	; 0x28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20004adc 	.word	0x20004adc
 800bf28:	20004af0 	.word	0x20004af0
 800bf2c:	08010008 	.word	0x08010008
 800bf30:	08010040 	.word	0x08010040
 800bf34:	08010078 	.word	0x08010078
 800bf38:	080100a0 	.word	0x080100a0

0800bf3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bf48:	78fb      	ldrb	r3, [r7, #3]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	2103      	movs	r1, #3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f814 	bl	800bf7c <icmp_send_response>
}
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bf68:	78fb      	ldrb	r3, [r7, #3]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	210b      	movs	r1, #11
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f804 	bl	800bf7c <icmp_send_response>
}
 800bf74:	bf00      	nop
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08c      	sub	sp, #48	; 0x30
 800bf80:	af04      	add	r7, sp, #16
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2124      	movs	r1, #36	; 0x24
 800bf90:	2001      	movs	r0, #1
 800bf92:	f7f7 fb35 	bl	8003600 <pbuf_alloc>
 800bf96:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d04c      	beq.n	800c038 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	895b      	ldrh	r3, [r3, #10]
 800bfa2:	2b23      	cmp	r3, #35	; 0x23
 800bfa4:	d806      	bhi.n	800bfb4 <icmp_send_response+0x38>
 800bfa6:	4b26      	ldr	r3, [pc, #152]	; (800c040 <icmp_send_response+0xc4>)
 800bfa8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800bfac:	4925      	ldr	r1, [pc, #148]	; (800c044 <icmp_send_response+0xc8>)
 800bfae:	4826      	ldr	r0, [pc, #152]	; (800c048 <icmp_send_response+0xcc>)
 800bfb0:	f001 fa12 	bl	800d3d8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	78fa      	ldrb	r2, [r7, #3]
 800bfc4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	78ba      	ldrb	r2, [r7, #2]
 800bfca:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	711a      	strb	r2, [r3, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	719a      	strb	r2, [r3, #6]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	f103 0008 	add.w	r0, r3, #8
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	221c      	movs	r2, #28
 800bfee:	4619      	mov	r1, r3
 800bff0:	f001 f9df 	bl	800d3b2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bffa:	f107 030c 	add.w	r3, r7, #12
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 f824 	bl	800c04c <ip4_route>
 800c004:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d011      	beq.n	800c030 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2200      	movs	r2, #0
 800c010:	709a      	strb	r2, [r3, #2]
 800c012:	2200      	movs	r2, #0
 800c014:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c016:	f107 020c 	add.w	r2, r7, #12
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	9302      	str	r3, [sp, #8]
 800c01e:	2301      	movs	r3, #1
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	2300      	movs	r3, #0
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	23ff      	movs	r3, #255	; 0xff
 800c028:	2100      	movs	r1, #0
 800c02a:	69f8      	ldr	r0, [r7, #28]
 800c02c:	f000 f9d4 	bl	800c3d8 <ip4_output_if>
  }
  pbuf_free(q);
 800c030:	69f8      	ldr	r0, [r7, #28]
 800c032:	f7f7 fe57 	bl	8003ce4 <pbuf_free>
 800c036:	e000      	b.n	800c03a <icmp_send_response+0xbe>
    return;
 800c038:	bf00      	nop
}
 800c03a:	3720      	adds	r7, #32
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	08010008 	.word	0x08010008
 800c044:	080100d4 	.word	0x080100d4
 800c048:	08010078 	.word	0x08010078

0800c04c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c054:	4b30      	ldr	r3, [pc, #192]	; (800c118 <ip4_route+0xcc>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	60fb      	str	r3, [r7, #12]
 800c05a:	e036      	b.n	800c0ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d02b      	beq.n	800c0c4 <ip4_route+0x78>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c072:	089b      	lsrs	r3, r3, #2
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d022      	beq.n	800c0c4 <ip4_route+0x78>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3304      	adds	r3, #4
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d01d      	beq.n	800c0c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3304      	adds	r3, #4
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	405a      	eors	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	3308      	adds	r3, #8
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4013      	ands	r3, r2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	e033      	b.n	800c10c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0aa:	f003 0302 	and.w	r3, r3, #2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d108      	bne.n	800c0c4 <ip4_route+0x78>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d101      	bne.n	800c0c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	e023      	b.n	800c10c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60fb      	str	r3, [r7, #12]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1c5      	bne.n	800c05c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c0d0:	4b12      	ldr	r3, [pc, #72]	; (800c11c <ip4_route+0xd0>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d015      	beq.n	800c104 <ip4_route+0xb8>
 800c0d8:	4b10      	ldr	r3, [pc, #64]	; (800c11c <ip4_route+0xd0>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0e0:	f003 0301 	and.w	r3, r3, #1
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00d      	beq.n	800c104 <ip4_route+0xb8>
 800c0e8:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <ip4_route+0xd0>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0f0:	f003 0304 	and.w	r3, r3, #4
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c0f8:	4b08      	ldr	r3, [pc, #32]	; (800c11c <ip4_route+0xd0>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	e001      	b.n	800c10c <ip4_route+0xc0>
  }

  return netif_default;
 800c108:	4b04      	ldr	r3, [pc, #16]	; (800c11c <ip4_route+0xd0>)
 800c10a:	681b      	ldr	r3, [r3, #0]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	bc80      	pop	{r7}
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	2000801c 	.word	0x2000801c
 800c11c:	20008020 	.word	0x20008020

0800c120 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800c12a:	2301      	movs	r3, #1
 800c12c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	091b      	lsrs	r3, r3, #4
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b04      	cmp	r3, #4
 800c13e:	d004      	beq.n	800c14a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7f7 fdcf 	bl	8003ce4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	e13e      	b.n	800c3c8 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	f003 030f 	and.w	r3, r3, #15
 800c154:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c156:	89fb      	ldrh	r3, [r7, #14]
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	885b      	ldrh	r3, [r3, #2]
 800c160:	b29b      	uxth	r3, r3
 800c162:	4618      	mov	r0, r3
 800c164:	f7f6 fcc1 	bl	8002aea <lwip_htons>
 800c168:	4603      	mov	r3, r0
 800c16a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	891b      	ldrh	r3, [r3, #8]
 800c170:	89ba      	ldrh	r2, [r7, #12]
 800c172:	429a      	cmp	r2, r3
 800c174:	d204      	bcs.n	800c180 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800c176:	89bb      	ldrh	r3, [r7, #12]
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7f7 fc3e 	bl	80039fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	895b      	ldrh	r3, [r3, #10]
 800c184:	89fa      	ldrh	r2, [r7, #14]
 800c186:	429a      	cmp	r2, r3
 800c188:	d807      	bhi.n	800c19a <ip4_input+0x7a>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	891b      	ldrh	r3, [r3, #8]
 800c18e:	89ba      	ldrh	r2, [r7, #12]
 800c190:	429a      	cmp	r2, r3
 800c192:	d802      	bhi.n	800c19a <ip4_input+0x7a>
 800c194:	89fb      	ldrh	r3, [r7, #14]
 800c196:	2b13      	cmp	r3, #19
 800c198:	d804      	bhi.n	800c1a4 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7f7 fda2 	bl	8003ce4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e111      	b.n	800c3c8 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	4a89      	ldr	r2, [pc, #548]	; (800c3d0 <ip4_input+0x2b0>)
 800c1aa:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	4a87      	ldr	r2, [pc, #540]	; (800c3d0 <ip4_input+0x2b0>)
 800c1b2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c1b4:	4b86      	ldr	r3, [pc, #536]	; (800c3d0 <ip4_input+0x2b0>)
 800c1b6:	695b      	ldr	r3, [r3, #20]
 800c1b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1bc:	2be0      	cmp	r3, #224	; 0xe0
 800c1be:	d112      	bne.n	800c1e6 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <ip4_input+0xc0>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <ip4_input+0xc0>
      netif = inp;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	61bb      	str	r3, [r7, #24]
 800c1de:	e041      	b.n	800c264 <ip4_input+0x144>
    } else {
      netif = NULL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61bb      	str	r3, [r7, #24]
 800c1e4:	e03e      	b.n	800c264 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	613b      	str	r3, [r7, #16]
    netif = inp;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d014      	beq.n	800c228 <ip4_input+0x108>
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	3304      	adds	r3, #4
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00f      	beq.n	800c228 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c208:	4b71      	ldr	r3, [pc, #452]	; (800c3d0 <ip4_input+0x2b0>)
 800c20a:	695a      	ldr	r2, [r3, #20]
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	3304      	adds	r3, #4
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	429a      	cmp	r2, r3
 800c214:	d026      	beq.n	800c264 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c216:	4b6e      	ldr	r3, [pc, #440]	; (800c3d0 <ip4_input+0x2b0>)
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	69b9      	ldr	r1, [r7, #24]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 f9ad 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800c222:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c224:	2b00      	cmp	r3, #0
 800c226:	d11d      	bne.n	800c264 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00d      	beq.n	800c24a <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c22e:	4b68      	ldr	r3, [pc, #416]	; (800c3d0 <ip4_input+0x2b0>)
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b7f      	cmp	r3, #127	; 0x7f
 800c236:	d102      	bne.n	800c23e <ip4_input+0x11e>
          netif = NULL;
 800c238:	2300      	movs	r3, #0
 800c23a:	61bb      	str	r3, [r7, #24]
          break;
 800c23c:	e012      	b.n	800c264 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800c242:	4b64      	ldr	r3, [pc, #400]	; (800c3d4 <ip4_input+0x2b4>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	61bb      	str	r3, [r7, #24]
 800c248:	e002      	b.n	800c250 <ip4_input+0x130>
      } else {
        netif = netif->next;
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d102      	bne.n	800c25e <ip4_input+0x13e>
        netif = netif->next;
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1c4      	bne.n	800c1ee <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d111      	bne.n	800c28e <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	7a5b      	ldrb	r3, [r3, #9]
 800c26e:	2b11      	cmp	r3, #17
 800c270:	d10d      	bne.n	800c28e <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800c272:	89fb      	ldrh	r3, [r7, #14]
 800c274:	69fa      	ldr	r2, [r7, #28]
 800c276:	4413      	add	r3, r2
 800c278:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	885b      	ldrh	r3, [r3, #2]
 800c27e:	b29b      	uxth	r3, r3
 800c280:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800c284:	d103      	bne.n	800c28e <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d017      	beq.n	800c2c4 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800c294:	4b4e      	ldr	r3, [pc, #312]	; (800c3d0 <ip4_input+0x2b0>)
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d013      	beq.n	800c2c4 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c29c:	4b4c      	ldr	r3, [pc, #304]	; (800c3d0 <ip4_input+0x2b0>)
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 f96a 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d105      	bne.n	800c2ba <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c2ae:	4b48      	ldr	r3, [pc, #288]	; (800c3d0 <ip4_input+0x2b0>)
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c2b6:	2be0      	cmp	r3, #224	; 0xe0
 800c2b8:	d104      	bne.n	800c2c4 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7f7 fd12 	bl	8003ce4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e081      	b.n	800c3c8 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d104      	bne.n	800c2d4 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7f7 fd0a 	bl	8003ce4 <pbuf_free>
    return ERR_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e079      	b.n	800c3c8 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	88db      	ldrh	r3, [r3, #6]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00b      	beq.n	800c2fe <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fc8c 	bl	800cc04 <ip4_reass>
 800c2ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <ip4_input+0x1d8>
      return ERR_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e067      	b.n	800c3c8 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c2fe:	4a34      	ldr	r2, [pc, #208]	; (800c3d0 <ip4_input+0x2b0>)
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c304:	4a32      	ldr	r2, [pc, #200]	; (800c3d0 <ip4_input+0x2b0>)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c30a:	4a31      	ldr	r2, [pc, #196]	; (800c3d0 <ip4_input+0x2b0>)
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	b29b      	uxth	r3, r3
 800c316:	f003 030f 	and.w	r3, r3, #15
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	b29a      	uxth	r2, r3
 800c320:	4b2b      	ldr	r3, [pc, #172]	; (800c3d0 <ip4_input+0x2b0>)
 800c322:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c324:	89fb      	ldrh	r3, [r7, #14]
 800c326:	425b      	negs	r3, r3
 800c328:	b29b      	uxth	r3, r3
 800c32a:	b21b      	sxth	r3, r3
 800c32c:	4619      	mov	r1, r3
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7f7 fcb4 	bl	8003c9c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	7a5b      	ldrb	r3, [r3, #9]
 800c338:	2b06      	cmp	r3, #6
 800c33a:	d009      	beq.n	800c350 <ip4_input+0x230>
 800c33c:	2b11      	cmp	r3, #17
 800c33e:	d002      	beq.n	800c346 <ip4_input+0x226>
 800c340:	2b01      	cmp	r3, #1
 800c342:	d00a      	beq.n	800c35a <ip4_input+0x23a>
 800c344:	e00e      	b.n	800c364 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7fc fc13 	bl	8008b74 <udp_input>
      break;
 800c34e:	e028      	b.n	800c3a2 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7f9 f908 	bl	8005568 <tcp_input>
      break;
 800c358:	e023      	b.n	800c3a2 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff fce7 	bl	800bd30 <icmp_input>
      break;
 800c362:	e01e      	b.n	800c3a2 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c364:	4b1a      	ldr	r3, [pc, #104]	; (800c3d0 <ip4_input+0x2b0>)
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	69b9      	ldr	r1, [r7, #24]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f906 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d112      	bne.n	800c39c <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c376:	4b16      	ldr	r3, [pc, #88]	; (800c3d0 <ip4_input+0x2b0>)
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c37e:	2be0      	cmp	r3, #224	; 0xe0
 800c380:	d00c      	beq.n	800c39c <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7f7 fc99 	bl	8003cc0 <pbuf_header_force>
        p->payload = iphdr;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	69fa      	ldr	r2, [r7, #28]
 800c392:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c394:	2102      	movs	r1, #2
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff fdd0 	bl	800bf3c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7f7 fca1 	bl	8003ce4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c3a2:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <ip4_input+0x2b0>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c3a8:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <ip4_input+0x2b0>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c3ae:	4b08      	ldr	r3, [pc, #32]	; (800c3d0 <ip4_input+0x2b0>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c3b4:	4b06      	ldr	r3, [pc, #24]	; (800c3d0 <ip4_input+0x2b0>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <ip4_input+0x2b0>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c3c0:	4b03      	ldr	r3, [pc, #12]	; (800c3d0 <ip4_input+0x2b0>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3720      	adds	r7, #32
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20004adc 	.word	0x20004adc
 800c3d4:	2000801c 	.word	0x2000801c

0800c3d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af04      	add	r7, sp, #16
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <ip4_output_if+0x26>
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d102      	bne.n	800c404 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	3304      	adds	r3, #4
 800c402:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c404:	78fa      	ldrb	r2, [r7, #3]
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	4613      	mov	r3, r2
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	6979      	ldr	r1, [r7, #20]
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 f805 	bl	800c42c <ip4_output_if_src>
 800c422:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c424:	4618      	mov	r0, r3
 800c426:	3718      	adds	r7, #24
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b088      	sub	sp, #32
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	89db      	ldrh	r3, [r3, #14]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d006      	beq.n	800c450 <ip4_output_if_src+0x24>
 800c442:	4b48      	ldr	r3, [pc, #288]	; (800c564 <ip4_output_if_src+0x138>)
 800c444:	f240 3233 	movw	r2, #819	; 0x333
 800c448:	4947      	ldr	r1, [pc, #284]	; (800c568 <ip4_output_if_src+0x13c>)
 800c44a:	4848      	ldr	r0, [pc, #288]	; (800c56c <ip4_output_if_src+0x140>)
 800c44c:	f000 ffc4 	bl	800d3d8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d060      	beq.n	800c518 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c456:	2314      	movs	r3, #20
 800c458:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800c45a:	2114      	movs	r1, #20
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7f7 fc1d 	bl	8003c9c <pbuf_header>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c468:	f06f 0301 	mvn.w	r3, #1
 800c46c:	e075      	b.n	800c55a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	895b      	ldrh	r3, [r3, #10]
 800c478:	2b13      	cmp	r3, #19
 800c47a:	d806      	bhi.n	800c48a <ip4_output_if_src+0x5e>
 800c47c:	4b39      	ldr	r3, [pc, #228]	; (800c564 <ip4_output_if_src+0x138>)
 800c47e:	f240 3261 	movw	r2, #865	; 0x361
 800c482:	493b      	ldr	r1, [pc, #236]	; (800c570 <ip4_output_if_src+0x144>)
 800c484:	4839      	ldr	r0, [pc, #228]	; (800c56c <ip4_output_if_src+0x140>)
 800c486:	f000 ffa7 	bl	800d3d8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	78fa      	ldrb	r2, [r7, #3]
 800c48e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c496:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c4a0:	8b7b      	ldrh	r3, [r7, #26]
 800c4a2:	089b      	lsrs	r3, r3, #2
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c4b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	891b      	ldrh	r3, [r3, #8]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7f6 fb13 	bl	8002aea <lwip_htons>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	719a      	strb	r2, [r3, #6]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c4d6:	4b27      	ldr	r3, [pc, #156]	; (800c574 <ip4_output_if_src+0x148>)
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7f6 fb05 	bl	8002aea <lwip_htons>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c4e8:	4b22      	ldr	r3, [pc, #136]	; (800c574 <ip4_output_if_src+0x148>)
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	4b20      	ldr	r3, [pc, #128]	; (800c574 <ip4_output_if_src+0x148>)
 800c4f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d104      	bne.n	800c504 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c4fa:	4b1f      	ldr	r3, [pc, #124]	; (800c578 <ip4_output_if_src+0x14c>)
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	60da      	str	r2, [r3, #12]
 800c502:	e003      	b.n	800c50c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	2200      	movs	r2, #0
 800c510:	729a      	strb	r2, [r3, #10]
 800c512:	2200      	movs	r2, #0
 800c514:	72da      	strb	r2, [r3, #11]
 800c516:	e008      	b.n	800c52a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c524:	f107 0314 	add.w	r3, r7, #20
 800c528:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00c      	beq.n	800c54c <ip4_output_if_src+0x120>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	891a      	ldrh	r2, [r3, #8]
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d906      	bls.n	800c54c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f000 fd08 	bl	800cf58 <ip4_frag>
 800c548:	4603      	mov	r3, r0
 800c54a:	e006      	b.n	800c55a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	68f9      	ldr	r1, [r7, #12]
 800c554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c556:	4798      	blx	r3
 800c558:	4603      	mov	r3, r0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3720      	adds	r7, #32
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	08010100 	.word	0x08010100
 800c568:	08010134 	.word	0x08010134
 800c56c:	08010140 	.word	0x08010140
 800c570:	08010168 	.word	0x08010168
 800c574:	2000020e 	.word	0x2000020e
 800c578:	0801050c 	.word	0x0801050c

0800c57c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c590:	d002      	beq.n	800c598 <ip4_addr_isbroadcast_u32+0x1c>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c598:	2301      	movs	r3, #1
 800c59a:	e02a      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5a2:	f003 0302 	and.w	r3, r3, #2
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e021      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d101      	bne.n	800c5be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e019      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	405a      	eors	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4013      	ands	r3, r2
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10d      	bne.n	800c5f0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	43da      	mvns	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d101      	bne.n	800c5f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e000      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c5f0:	2300      	movs	r3, #0
  }
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bc80      	pop	{r7}
 800c5fa:	4770      	bx	lr

0800c5fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c602:	2300      	movs	r3, #0
 800c604:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c606:	4b12      	ldr	r3, [pc, #72]	; (800c650 <ip_reass_tmr+0x54>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c60c:	e018      	b.n	800c640 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	7fdb      	ldrb	r3, [r3, #31]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00b      	beq.n	800c62e <ip_reass_tmr+0x32>
      r->timer--;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	7fdb      	ldrb	r3, [r3, #31]
 800c61a:	3b01      	subs	r3, #1
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	e008      	b.n	800c640 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c638:	68b9      	ldr	r1, [r7, #8]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f80a 	bl	800c654 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1e3      	bne.n	800c60e <ip_reass_tmr+0x12>
     }
   }
}
 800c646:	bf00      	nop
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20000210 	.word	0x20000210

0800c654 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d105      	bne.n	800c676 <ip_reass_free_complete_datagram+0x22>
 800c66a:	4b45      	ldr	r3, [pc, #276]	; (800c780 <ip_reass_free_complete_datagram+0x12c>)
 800c66c:	22ab      	movs	r2, #171	; 0xab
 800c66e:	4945      	ldr	r1, [pc, #276]	; (800c784 <ip_reass_free_complete_datagram+0x130>)
 800c670:	4845      	ldr	r0, [pc, #276]	; (800c788 <ip_reass_free_complete_datagram+0x134>)
 800c672:	f000 feb1 	bl	800d3d8 <iprintf>
  if (prev != NULL) {
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00a      	beq.n	800c692 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	429a      	cmp	r2, r3
 800c684:	d005      	beq.n	800c692 <ip_reass_free_complete_datagram+0x3e>
 800c686:	4b3e      	ldr	r3, [pc, #248]	; (800c780 <ip_reass_free_complete_datagram+0x12c>)
 800c688:	22ad      	movs	r2, #173	; 0xad
 800c68a:	4940      	ldr	r1, [pc, #256]	; (800c78c <ip_reass_free_complete_datagram+0x138>)
 800c68c:	483e      	ldr	r0, [pc, #248]	; (800c788 <ip_reass_free_complete_datagram+0x134>)
 800c68e:	f000 fea3 	bl	800d3d8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	889b      	ldrh	r3, [r3, #4]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d12a      	bne.n	800c6fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	6858      	ldr	r0, [r3, #4]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	2214      	movs	r2, #20
 800c6bc:	4619      	mov	r1, r3
 800c6be:	f000 fe78 	bl	800d3b2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c6c2:	2101      	movs	r1, #1
 800c6c4:	69b8      	ldr	r0, [r7, #24]
 800c6c6:	f7ff fc49 	bl	800bf5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c6ca:	69b8      	ldr	r0, [r7, #24]
 800c6cc:	f7f7 fb9e 	bl	8003e0c <pbuf_clen>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c6d4:	8bfa      	ldrh	r2, [r7, #30]
 800c6d6:	8a7b      	ldrh	r3, [r7, #18]
 800c6d8:	4413      	add	r3, r2
 800c6da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6de:	db05      	blt.n	800c6ec <ip_reass_free_complete_datagram+0x98>
 800c6e0:	4b27      	ldr	r3, [pc, #156]	; (800c780 <ip_reass_free_complete_datagram+0x12c>)
 800c6e2:	22bc      	movs	r2, #188	; 0xbc
 800c6e4:	492a      	ldr	r1, [pc, #168]	; (800c790 <ip_reass_free_complete_datagram+0x13c>)
 800c6e6:	4828      	ldr	r0, [pc, #160]	; (800c788 <ip_reass_free_complete_datagram+0x134>)
 800c6e8:	f000 fe76 	bl	800d3d8 <iprintf>
    pbufs_freed += clen;
 800c6ec:	8bfa      	ldrh	r2, [r7, #30]
 800c6ee:	8a7b      	ldrh	r3, [r7, #18]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c6f4:	69b8      	ldr	r0, [r7, #24]
 800c6f6:	f7f7 faf5 	bl	8003ce4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c700:	e01f      	b.n	800c742 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f7f7 fb7a 	bl	8003e0c <pbuf_clen>
 800c718:	4603      	mov	r3, r0
 800c71a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c71c:	8bfa      	ldrh	r2, [r7, #30]
 800c71e:	8a7b      	ldrh	r3, [r7, #18]
 800c720:	4413      	add	r3, r2
 800c722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c726:	db05      	blt.n	800c734 <ip_reass_free_complete_datagram+0xe0>
 800c728:	4b15      	ldr	r3, [pc, #84]	; (800c780 <ip_reass_free_complete_datagram+0x12c>)
 800c72a:	22cc      	movs	r2, #204	; 0xcc
 800c72c:	4918      	ldr	r1, [pc, #96]	; (800c790 <ip_reass_free_complete_datagram+0x13c>)
 800c72e:	4816      	ldr	r0, [pc, #88]	; (800c788 <ip_reass_free_complete_datagram+0x134>)
 800c730:	f000 fe52 	bl	800d3d8 <iprintf>
    pbufs_freed += clen;
 800c734:	8bfa      	ldrh	r2, [r7, #30]
 800c736:	8a7b      	ldrh	r3, [r7, #18]
 800c738:	4413      	add	r3, r2
 800c73a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7f7 fad1 	bl	8003ce4 <pbuf_free>
  while (p != NULL) {
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1dc      	bne.n	800c702 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f8c2 	bl	800c8d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c750:	4b10      	ldr	r3, [pc, #64]	; (800c794 <ip_reass_free_complete_datagram+0x140>)
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	8bfa      	ldrh	r2, [r7, #30]
 800c756:	429a      	cmp	r2, r3
 800c758:	d905      	bls.n	800c766 <ip_reass_free_complete_datagram+0x112>
 800c75a:	4b09      	ldr	r3, [pc, #36]	; (800c780 <ip_reass_free_complete_datagram+0x12c>)
 800c75c:	22d2      	movs	r2, #210	; 0xd2
 800c75e:	490e      	ldr	r1, [pc, #56]	; (800c798 <ip_reass_free_complete_datagram+0x144>)
 800c760:	4809      	ldr	r0, [pc, #36]	; (800c788 <ip_reass_free_complete_datagram+0x134>)
 800c762:	f000 fe39 	bl	800d3d8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c766:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <ip_reass_free_complete_datagram+0x140>)
 800c768:	881a      	ldrh	r2, [r3, #0]
 800c76a:	8bfb      	ldrh	r3, [r7, #30]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	b29a      	uxth	r2, r3
 800c770:	4b08      	ldr	r3, [pc, #32]	; (800c794 <ip_reass_free_complete_datagram+0x140>)
 800c772:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c774:	8bfb      	ldrh	r3, [r7, #30]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3720      	adds	r7, #32
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	08010198 	.word	0x08010198
 800c784:	080101d4 	.word	0x080101d4
 800c788:	080101e0 	.word	0x080101e0
 800c78c:	08010208 	.word	0x08010208
 800c790:	0801021c 	.word	0x0801021c
 800c794:	20000214 	.word	0x20000214
 800c798:	0801023c 	.word	0x0801023c

0800c79c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	; 0x28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c7ba:	4b28      	ldr	r3, [pc, #160]	; (800c85c <ip_reass_remove_oldest_datagram+0xc0>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c7c0:	e030      	b.n	800c824 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c4:	695a      	ldr	r2, [r3, #20]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d10c      	bne.n	800c7e8 <ip_reass_remove_oldest_datagram+0x4c>
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	699a      	ldr	r2, [r3, #24]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d106      	bne.n	800c7e8 <ip_reass_remove_oldest_datagram+0x4c>
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	899a      	ldrh	r2, [r3, #12]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	889b      	ldrh	r3, [r3, #4]
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d014      	beq.n	800c812 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d104      	bne.n	800c7fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	61bb      	str	r3, [r7, #24]
 800c7fc:	e009      	b.n	800c812 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	7fda      	ldrb	r2, [r3, #31]
 800c802:	6a3b      	ldr	r3, [r7, #32]
 800c804:	7fdb      	ldrb	r3, [r3, #31]
 800c806:	429a      	cmp	r2, r3
 800c808:	d803      	bhi.n	800c812 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1cb      	bne.n	800c7c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d008      	beq.n	800c842 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c830:	69b9      	ldr	r1, [r7, #24]
 800c832:	6a38      	ldr	r0, [r7, #32]
 800c834:	f7ff ff0e 	bl	800c654 <ip_reass_free_complete_datagram>
 800c838:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4413      	add	r3, r2
 800c840:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	da02      	bge.n	800c850 <ip_reass_remove_oldest_datagram+0xb4>
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	dcac      	bgt.n	800c7aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c850:	697b      	ldr	r3, [r7, #20]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3728      	adds	r7, #40	; 0x28
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20000210 	.word	0x20000210

0800c860 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c86a:	2004      	movs	r0, #4
 800c86c:	f7f6 fce6 	bl	800323c <memp_malloc>
 800c870:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d110      	bne.n	800c89a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7ff ff8e 	bl	800c79c <ip_reass_remove_oldest_datagram>
 800c880:	4602      	mov	r2, r0
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	4293      	cmp	r3, r2
 800c886:	dc03      	bgt.n	800c890 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c888:	2004      	movs	r0, #4
 800c88a:	f7f6 fcd7 	bl	800323c <memp_malloc>
 800c88e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c896:	2300      	movs	r3, #0
 800c898:	e016      	b.n	800c8c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c89a:	2220      	movs	r2, #32
 800c89c:	2100      	movs	r1, #0
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 fd92 	bl	800d3c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <ip_reass_enqueue_new_datagram+0x70>)
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c8b2:	4a07      	ldr	r2, [pc, #28]	; (800c8d0 <ip_reass_enqueue_new_datagram+0x70>)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	2214      	movs	r2, #20
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 fd76 	bl	800d3b2 <memcpy>
  return ipr;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20000210 	.word	0x20000210

0800c8d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c8de:	4b10      	ldr	r3, [pc, #64]	; (800c920 <ip_reass_dequeue_datagram+0x4c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d104      	bne.n	800c8f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a0c      	ldr	r2, [pc, #48]	; (800c920 <ip_reass_dequeue_datagram+0x4c>)
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	e00d      	b.n	800c90e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d106      	bne.n	800c906 <ip_reass_dequeue_datagram+0x32>
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <ip_reass_dequeue_datagram+0x50>)
 800c8fa:	f240 1245 	movw	r2, #325	; 0x145
 800c8fe:	490a      	ldr	r1, [pc, #40]	; (800c928 <ip_reass_dequeue_datagram+0x54>)
 800c900:	480a      	ldr	r0, [pc, #40]	; (800c92c <ip_reass_dequeue_datagram+0x58>)
 800c902:	f000 fd69 	bl	800d3d8 <iprintf>
    prev->next = ipr->next;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	2004      	movs	r0, #4
 800c912:	f7f6 fcdf 	bl	80032d4 <memp_free>
}
 800c916:	bf00      	nop
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	20000210 	.word	0x20000210
 800c924:	08010198 	.word	0x08010198
 800c928:	08010258 	.word	0x08010258
 800c92c:	080101e0 	.word	0x080101e0

0800c930 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08c      	sub	sp, #48	; 0x30
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c93c:	2300      	movs	r3, #0
 800c93e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c940:	2301      	movs	r3, #1
 800c942:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	885b      	ldrh	r3, [r3, #2]
 800c94e:	b29b      	uxth	r3, r3
 800c950:	4618      	mov	r0, r3
 800c952:	f7f6 f8ca 	bl	8002aea <lwip_htons>
 800c956:	4603      	mov	r3, r0
 800c958:	461a      	mov	r2, r3
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	b29b      	uxth	r3, r3
 800c960:	f003 030f 	and.w	r3, r3, #15
 800c964:	b29b      	uxth	r3, r3
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	b29b      	uxth	r3, r3
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	88db      	ldrh	r3, [r3, #6]
 800c972:	b29b      	uxth	r3, r3
 800c974:	4618      	mov	r0, r3
 800c976:	f7f6 f8b8 	bl	8002aea <lwip_htons>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c980:	b29b      	uxth	r3, r3
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	2200      	movs	r2, #0
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	2200      	movs	r2, #0
 800c994:	705a      	strb	r2, [r3, #1]
 800c996:	2200      	movs	r2, #0
 800c998:	709a      	strb	r2, [r3, #2]
 800c99a:	2200      	movs	r2, #0
 800c99c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a0:	8b3a      	ldrh	r2, [r7, #24]
 800c9a2:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c9a4:	8b3a      	ldrh	r2, [r7, #24]
 800c9a6:	8b7b      	ldrh	r3, [r7, #26]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ae:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c9b6:	e061      	b.n	800ca7c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	889b      	ldrh	r3, [r3, #4]
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	889b      	ldrh	r3, [r3, #4]
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d232      	bcs.n	800ca34 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9d2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d01f      	beq.n	800ca1a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	889b      	ldrh	r3, [r3, #4]
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	88db      	ldrh	r3, [r3, #6]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	f0c0 80e3 	bcc.w	800cbb2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	88db      	ldrh	r3, [r3, #6]
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	889b      	ldrh	r3, [r3, #4]
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	f200 80da 	bhi.w	800cbb2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ca04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca06:	88db      	ldrh	r3, [r3, #6]
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0c:	889b      	ldrh	r3, [r3, #4]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d037      	beq.n	800ca84 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ca18:	e034      	b.n	800ca84 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	88db      	ldrh	r3, [r3, #6]
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	889b      	ldrh	r3, [r3, #4]
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	429a      	cmp	r2, r3
 800ca28:	f200 80c5 	bhi.w	800cbb6 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	605a      	str	r2, [r3, #4]
      break;
 800ca32:	e027      	b.n	800ca84 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca36:	889b      	ldrh	r3, [r3, #4]
 800ca38:	b29a      	uxth	r2, r3
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	889b      	ldrh	r3, [r3, #4]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	429a      	cmp	r2, r3
 800ca42:	f000 80ba 	beq.w	800cbba <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ca46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca48:	889b      	ldrh	r3, [r3, #4]
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	88db      	ldrh	r3, [r3, #6]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	429a      	cmp	r2, r3
 800ca54:	f0c0 80b3 	bcc.w	800cbbe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d009      	beq.n	800ca72 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca60:	88db      	ldrh	r3, [r3, #6]
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	889b      	ldrh	r3, [r3, #4]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d001      	beq.n	800ca72 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d19a      	bne.n	800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800ca82:	e000      	b.n	800ca86 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800ca84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ca86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d12d      	bne.n	800cae8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d01c      	beq.n	800cacc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ca92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca94:	88db      	ldrh	r3, [r3, #6]
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	889b      	ldrh	r3, [r3, #4]
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d906      	bls.n	800cab0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800caa2:	4b51      	ldr	r3, [pc, #324]	; (800cbe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800caa4:	f240 12ab 	movw	r2, #427	; 0x1ab
 800caa8:	4950      	ldr	r1, [pc, #320]	; (800cbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800caaa:	4851      	ldr	r0, [pc, #324]	; (800cbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800caac:	f000 fc94 	bl	800d3d8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	88db      	ldrh	r3, [r3, #6]
 800caba:	b29a      	uxth	r2, r3
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	889b      	ldrh	r3, [r3, #4]
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d010      	beq.n	800cae8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	623b      	str	r3, [r7, #32]
 800caca:	e00d      	b.n	800cae8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d006      	beq.n	800cae2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800cad4:	4b44      	ldr	r3, [pc, #272]	; (800cbe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cad6:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800cada:	4946      	ldr	r1, [pc, #280]	; (800cbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cadc:	4844      	ldr	r0, [pc, #272]	; (800cbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cade:	f000 fc7b 	bl	800d3d8 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d105      	bne.n	800cafa <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	7f9b      	ldrb	r3, [r3, #30]
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d059      	beq.n	800cbae <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d04f      	beq.n	800cba0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	889b      	ldrh	r3, [r3, #4]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	623b      	str	r3, [r7, #32]
 800cb1a:	e041      	b.n	800cba0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800cb26:	e012      	b.n	800cb4e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	88db      	ldrh	r3, [r3, #6]
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	889b      	ldrh	r3, [r3, #4]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d002      	beq.n	800cb44 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	623b      	str	r3, [r7, #32]
            break;
 800cb42:	e007      	b.n	800cb54 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1e9      	bne.n	800cb28 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d022      	beq.n	800cba0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800cb62:	4b21      	ldr	r3, [pc, #132]	; (800cbe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cb64:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800cb68:	4923      	ldr	r1, [pc, #140]	; (800cbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800cb6a:	4821      	ldr	r0, [pc, #132]	; (800cbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cb6c:	f000 fc34 	bl	800d3d8 <iprintf>
          LWIP_ASSERT("sanity check",
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d106      	bne.n	800cb8a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800cb7c:	4b1a      	ldr	r3, [pc, #104]	; (800cbe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cb7e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800cb82:	491d      	ldr	r1, [pc, #116]	; (800cbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800cb84:	481a      	ldr	r0, [pc, #104]	; (800cbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cb86:	f000 fc27 	bl	800d3d8 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800cb92:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cb94:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800cb98:	4918      	ldr	r1, [pc, #96]	; (800cbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800cb9a:	4815      	ldr	r0, [pc, #84]	; (800cbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cb9c:	f000 fc1c 	bl	800d3d8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	bf14      	ite	ne
 800cba6:	2301      	movne	r3, #1
 800cba8:	2300      	moveq	r3, #0
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	e018      	b.n	800cbe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800cbae:	2300      	movs	r3, #0
 800cbb0:	e016      	b.n	800cbe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800cbb2:	bf00      	nop
 800cbb4:	e004      	b.n	800cbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800cbb6:	bf00      	nop
 800cbb8:	e002      	b.n	800cbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800cbba:	bf00      	nop
 800cbbc:	e000      	b.n	800cbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800cbbe:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800cbc0:	68b8      	ldr	r0, [r7, #8]
 800cbc2:	f7f7 f923 	bl	8003e0c <pbuf_clen>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800cbd4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800cbd6:	68b8      	ldr	r0, [r7, #8]
 800cbd8:	f7f7 f884 	bl	8003ce4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cbdc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3730      	adds	r7, #48	; 0x30
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	08010198 	.word	0x08010198
 800cbec:	08010274 	.word	0x08010274
 800cbf0:	080101e0 	.word	0x080101e0
 800cbf4:	08010294 	.word	0x08010294
 800cbf8:	080102cc 	.word	0x080102cc
 800cbfc:	080102dc 	.word	0x080102dc
 800cc00:	20000214 	.word	0x20000214

0800cc04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08e      	sub	sp, #56	; 0x38
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800cc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	f003 030f 	and.w	r3, r3, #15
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	2b14      	cmp	r3, #20
 800cc1e:	f040 8131 	bne.w	800ce84 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800cc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc24:	88db      	ldrh	r3, [r3, #6]
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7f5 ff5e 	bl	8002aea <lwip_htons>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	00db      	lsls	r3, r3, #3
 800cc38:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	885b      	ldrh	r3, [r3, #2]
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7f5 ff52 	bl	8002aea <lwip_htons>
 800cc46:	4603      	mov	r3, r0
 800cc48:	461a      	mov	r2, r3
 800cc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	f003 030f 	and.w	r3, r3, #15
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7f7 f8d4 	bl	8003e0c <pbuf_clen>
 800cc64:	4603      	mov	r3, r0
 800cc66:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cc68:	4b8d      	ldr	r3, [pc, #564]	; (800cea0 <ip4_reass+0x29c>)
 800cc6a:	881b      	ldrh	r3, [r3, #0]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc70:	4413      	add	r3, r2
 800cc72:	2b0a      	cmp	r3, #10
 800cc74:	dd10      	ble.n	800cc98 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cc76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc7c:	f7ff fd8e 	bl	800c79c <ip_reass_remove_oldest_datagram>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 8100 	beq.w	800ce88 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cc88:	4b85      	ldr	r3, [pc, #532]	; (800cea0 <ip4_reass+0x29c>)
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc90:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cc92:	2b0a      	cmp	r3, #10
 800cc94:	f300 80f8 	bgt.w	800ce88 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cc98:	4b82      	ldr	r3, [pc, #520]	; (800cea4 <ip4_reass+0x2a0>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	633b      	str	r3, [r7, #48]	; 0x30
 800cc9e:	e015      	b.n	800cccc <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	695a      	ldr	r2, [r3, #20]
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d10c      	bne.n	800ccc6 <ip4_reass+0xc2>
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	699a      	ldr	r2, [r3, #24]
 800ccb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d106      	bne.n	800ccc6 <ip4_reass+0xc2>
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	899a      	ldrh	r2, [r3, #12]
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	889b      	ldrh	r3, [r3, #4]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d006      	beq.n	800ccd4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	633b      	str	r3, [r7, #48]	; 0x30
 800cccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1e6      	bne.n	800cca0 <ip4_reass+0x9c>
 800ccd2:	e000      	b.n	800ccd6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ccd4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d109      	bne.n	800ccf0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ccdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccde:	4619      	mov	r1, r3
 800cce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cce2:	f7ff fdbd 	bl	800c860 <ip_reass_enqueue_new_datagram>
 800cce6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d11c      	bne.n	800cd28 <ip4_reass+0x124>
      goto nullreturn;
 800ccee:	e0ce      	b.n	800ce8e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	88db      	ldrh	r3, [r3, #6]
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7f5 fef7 	bl	8002aea <lwip_htons>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d110      	bne.n	800cd28 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	89db      	ldrh	r3, [r3, #14]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7f5 feed 	bl	8002aea <lwip_htons>
 800cd10:	4603      	mov	r3, r0
 800cd12:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d006      	beq.n	800cd28 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	3308      	adds	r3, #8
 800cd1e:	2214      	movs	r2, #20
 800cd20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fb45 	bl	800d3b2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	88db      	ldrh	r3, [r3, #6]
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	f003 0320 	and.w	r3, r3, #32
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	bf0c      	ite	eq
 800cd36:	2301      	moveq	r3, #1
 800cd38:	2300      	movne	r3, #0
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00e      	beq.n	800cd62 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800cd44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd48:	4413      	add	r3, r2
 800cd4a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cd4c:	8b7a      	ldrh	r2, [r7, #26]
 800cd4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd50:	429a      	cmp	r2, r3
 800cd52:	f0c0 8099 	bcc.w	800ce88 <ip4_reass+0x284>
 800cd56:	8b7b      	ldrh	r3, [r7, #26]
 800cd58:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	f200 8093 	bhi.w	800ce88 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cd62:	69fa      	ldr	r2, [r7, #28]
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd68:	f7ff fde2 	bl	800c930 <ip_reass_chain_frag_into_datagram_and_validate>
 800cd6c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd74:	f000 808a 	beq.w	800ce8c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cd78:	4b49      	ldr	r3, [pc, #292]	; (800cea0 <ip4_reass+0x29c>)
 800cd7a:	881a      	ldrh	r2, [r3, #0]
 800cd7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd7e:	4413      	add	r3, r2
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	4b47      	ldr	r3, [pc, #284]	; (800cea0 <ip4_reass+0x29c>)
 800cd84:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00d      	beq.n	800cda8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800cd8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd90:	4413      	add	r3, r2
 800cd92:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	8a7a      	ldrh	r2, [r7, #18]
 800cd98:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	7f9b      	ldrb	r3, [r3, #30]
 800cd9e:	f043 0301 	orr.w	r3, r3, #1
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d168      	bne.n	800ce80 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	8b9b      	ldrh	r3, [r3, #28]
 800cdb2:	3314      	adds	r3, #20
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	3308      	adds	r3, #8
 800cdd0:	2214      	movs	r2, #20
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdd6:	f000 faec 	bl	800d3b2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	8b9b      	ldrh	r3, [r3, #28]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f5 fe83 	bl	8002aea <lwip_htons>
 800cde4:	4603      	mov	r3, r0
 800cde6:	461a      	mov	r2, r3
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	2200      	movs	r2, #0
 800cdf0:	719a      	strb	r2, [r3, #6]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	729a      	strb	r2, [r3, #10]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ce06:	e00e      	b.n	800ce26 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800ce08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800ce0e:	f06f 0113 	mvn.w	r1, #19
 800ce12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce14:	f7f6 ff42 	bl	8003c9c <pbuf_header>
      pbuf_cat(p, r);
 800ce18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7f7 f82e 	bl	8003e7c <pbuf_cat>
      r = iprh->next_pbuf;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ce26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1ed      	bne.n	800ce08 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ce2c:	4b1d      	ldr	r3, [pc, #116]	; (800cea4 <ip4_reass+0x2a0>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d102      	bne.n	800ce3c <ip4_reass+0x238>
      ipr_prev = NULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce3a:	e010      	b.n	800ce5e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ce3c:	4b19      	ldr	r3, [pc, #100]	; (800cea4 <ip4_reass+0x2a0>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce42:	e007      	b.n	800ce54 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d006      	beq.n	800ce5c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1f4      	bne.n	800ce44 <ip4_reass+0x240>
 800ce5a:	e000      	b.n	800ce5e <ip4_reass+0x25a>
          break;
 800ce5c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ce5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce62:	f7ff fd37 	bl	800c8d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7f6 ffd0 	bl	8003e0c <pbuf_clen>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	461a      	mov	r2, r3
 800ce70:	4b0b      	ldr	r3, [pc, #44]	; (800cea0 <ip4_reass+0x29c>)
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	1a9b      	subs	r3, r3, r2
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	4b09      	ldr	r3, [pc, #36]	; (800cea0 <ip4_reass+0x29c>)
 800ce7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	e00a      	b.n	800ce96 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e008      	b.n	800ce96 <ip4_reass+0x292>
    goto nullreturn;
 800ce84:	bf00      	nop
 800ce86:	e002      	b.n	800ce8e <ip4_reass+0x28a>

nullreturn:
 800ce88:	bf00      	nop
 800ce8a:	e000      	b.n	800ce8e <ip4_reass+0x28a>
    goto nullreturn;
 800ce8c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7f6 ff28 	bl	8003ce4 <pbuf_free>
  return NULL;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3738      	adds	r7, #56	; 0x38
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20000214 	.word	0x20000214
 800cea4:	20000210 	.word	0x20000210

0800cea8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800ceac:	2005      	movs	r0, #5
 800ceae:	f7f6 f9c5 	bl	800323c <memp_malloc>
 800ceb2:	4603      	mov	r3, r0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cec6:	4b07      	ldr	r3, [pc, #28]	; (800cee4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cec8:	f240 22ae 	movw	r2, #686	; 0x2ae
 800cecc:	4906      	ldr	r1, [pc, #24]	; (800cee8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800cece:	4807      	ldr	r0, [pc, #28]	; (800ceec <ip_frag_free_pbuf_custom_ref+0x34>)
 800ced0:	f000 fa82 	bl	800d3d8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	2005      	movs	r0, #5
 800ced8:	f7f6 f9fc 	bl	80032d4 <memp_free>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	08010198 	.word	0x08010198
 800cee8:	08010300 	.word	0x08010300
 800ceec:	080101e0 	.word	0x080101e0

0800cef0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d106      	bne.n	800cf10 <ipfrag_free_pbuf_custom+0x20>
 800cf02:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <ipfrag_free_pbuf_custom+0x58>)
 800cf04:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800cf08:	4910      	ldr	r1, [pc, #64]	; (800cf4c <ipfrag_free_pbuf_custom+0x5c>)
 800cf0a:	4811      	ldr	r0, [pc, #68]	; (800cf50 <ipfrag_free_pbuf_custom+0x60>)
 800cf0c:	f000 fa64 	bl	800d3d8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d006      	beq.n	800cf26 <ipfrag_free_pbuf_custom+0x36>
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <ipfrag_free_pbuf_custom+0x58>)
 800cf1a:	f240 22b9 	movw	r2, #697	; 0x2b9
 800cf1e:	490d      	ldr	r1, [pc, #52]	; (800cf54 <ipfrag_free_pbuf_custom+0x64>)
 800cf20:	480b      	ldr	r0, [pc, #44]	; (800cf50 <ipfrag_free_pbuf_custom+0x60>)
 800cf22:	f000 fa59 	bl	800d3d8 <iprintf>
  if (pcr->original != NULL) {
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d004      	beq.n	800cf38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	695b      	ldr	r3, [r3, #20]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f6 fed6 	bl	8003ce4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7ff ffbd 	bl	800ceb8 <ip_frag_free_pbuf_custom_ref>
}
 800cf3e:	bf00      	nop
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	08010198 	.word	0x08010198
 800cf4c:	0801030c 	.word	0x0801030c
 800cf50:	080101e0 	.word	0x080101e0
 800cf54:	08010318 	.word	0x08010318

0800cf58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b092      	sub	sp, #72	; 0x48
 800cf5c:	af02      	add	r7, sp, #8
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf6c:	3b14      	subs	r3, #20
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	da00      	bge.n	800cf74 <ip4_frag+0x1c>
 800cf72:	3307      	adds	r3, #7
 800cf74:	10db      	asrs	r3, r3, #3
 800cf76:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cf78:	2314      	movs	r3, #20
 800cf7a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	f003 030f 	and.w	r3, r3, #15
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	2b14      	cmp	r3, #20
 800cf92:	d009      	beq.n	800cfa8 <ip4_frag+0x50>
 800cf94:	4b79      	ldr	r3, [pc, #484]	; (800d17c <ip4_frag+0x224>)
 800cf96:	f240 22e1 	movw	r2, #737	; 0x2e1
 800cf9a:	4979      	ldr	r1, [pc, #484]	; (800d180 <ip4_frag+0x228>)
 800cf9c:	4879      	ldr	r0, [pc, #484]	; (800d184 <ip4_frag+0x22c>)
 800cf9e:	f000 fa1b 	bl	800d3d8 <iprintf>
 800cfa2:	f06f 0305 	mvn.w	r3, #5
 800cfa6:	e0e5      	b.n	800d174 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	88db      	ldrh	r3, [r3, #6]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7f5 fd9b 	bl	8002aea <lwip_htons>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800cfb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cfba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfbe:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800cfc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cfc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d009      	beq.n	800cfde <ip4_frag+0x86>
 800cfca:	4b6c      	ldr	r3, [pc, #432]	; (800d17c <ip4_frag+0x224>)
 800cfcc:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cfd0:	496d      	ldr	r1, [pc, #436]	; (800d188 <ip4_frag+0x230>)
 800cfd2:	486c      	ldr	r0, [pc, #432]	; (800d184 <ip4_frag+0x22c>)
 800cfd4:	f000 fa00 	bl	800d3d8 <iprintf>
 800cfd8:	f06f 0305 	mvn.w	r3, #5
 800cfdc:	e0ca      	b.n	800d174 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	891b      	ldrh	r3, [r3, #8]
 800cfe2:	3b14      	subs	r3, #20
 800cfe4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800cfe6:	e0bc      	b.n	800d162 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800cfe8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cfea:	00da      	lsls	r2, r3, #3
 800cfec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cfee:	4293      	cmp	r3, r2
 800cff0:	bfa8      	it	ge
 800cff2:	4613      	movge	r3, r2
 800cff4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cff6:	2200      	movs	r2, #0
 800cff8:	2114      	movs	r1, #20
 800cffa:	2002      	movs	r0, #2
 800cffc:	f7f6 fb00 	bl	8003600 <pbuf_alloc>
 800d000:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 80b2 	beq.w	800d16e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	895b      	ldrh	r3, [r3, #10]
 800d00e:	2b13      	cmp	r3, #19
 800d010:	d806      	bhi.n	800d020 <ip4_frag+0xc8>
 800d012:	4b5a      	ldr	r3, [pc, #360]	; (800d17c <ip4_frag+0x224>)
 800d014:	f240 3209 	movw	r2, #777	; 0x309
 800d018:	495c      	ldr	r1, [pc, #368]	; (800d18c <ip4_frag+0x234>)
 800d01a:	485a      	ldr	r0, [pc, #360]	; (800d184 <ip4_frag+0x22c>)
 800d01c:	f000 f9dc 	bl	800d3d8 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	2214      	movs	r2, #20
 800d026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 f9c2 	bl	800d3b2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d036:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d038:	e04f      	b.n	800d0da <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	895a      	ldrh	r2, [r3, #10]
 800d03e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d044:	8b7a      	ldrh	r2, [r7, #26]
 800d046:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d048:	4293      	cmp	r3, r2
 800d04a:	bf28      	it	cs
 800d04c:	4613      	movcs	r3, r2
 800d04e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d050:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d052:	2b00      	cmp	r3, #0
 800d054:	d105      	bne.n	800d062 <ip4_frag+0x10a>
        poff = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	60fb      	str	r3, [r7, #12]
        continue;
 800d060:	e03b      	b.n	800d0da <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d062:	f7ff ff21 	bl	800cea8 <ip_frag_alloc_pbuf_custom_ref>
 800d066:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d103      	bne.n	800d076 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d06e:	6a38      	ldr	r0, [r7, #32]
 800d070:	f7f6 fe38 	bl	8003ce4 <pbuf_free>
        goto memerr;
 800d074:	e07c      	b.n	800d170 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d076:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d07c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d07e:	4413      	add	r3, r2
 800d080:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d082:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d084:	9201      	str	r2, [sp, #4]
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	4603      	mov	r3, r0
 800d08a:	2202      	movs	r2, #2
 800d08c:	2004      	movs	r0, #4
 800d08e:	f7f6 fc4b 	bl	8003928 <pbuf_alloced_custom>
 800d092:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d106      	bne.n	800d0a8 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d09a:	6978      	ldr	r0, [r7, #20]
 800d09c:	f7ff ff0c 	bl	800ceb8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d0a0:	6a38      	ldr	r0, [r7, #32]
 800d0a2:	f7f6 fe1f 	bl	8003ce4 <pbuf_free>
        goto memerr;
 800d0a6:	e063      	b.n	800d170 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f7f6 fec5 	bl	8003e38 <pbuf_ref>
      pcr->original = p;
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	4a36      	ldr	r2, [pc, #216]	; (800d190 <ip4_frag+0x238>)
 800d0b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d0ba:	6939      	ldr	r1, [r7, #16]
 800d0bc:	6a38      	ldr	r0, [r7, #32]
 800d0be:	f7f6 fedd 	bl	8003e7c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d0c2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d0c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800d0ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d004      	beq.n	800d0da <ip4_frag+0x182>
        poff = 0;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d0da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1ac      	bne.n	800d03a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800d0e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d0e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0e4:	4413      	add	r3, r2
 800d0e6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d0e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d0ee:	3b14      	subs	r3, #20
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	bfd4      	ite	le
 800d0f4:	2301      	movle	r3, #1
 800d0f6:	2300      	movgt	r3, #0
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d0fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d0fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d102:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d103      	bne.n	800d112 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800d10a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d10c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d110:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d112:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d114:	4618      	mov	r0, r3
 800d116:	f7f5 fce8 	bl	8002aea <lwip_htons>
 800d11a:	4603      	mov	r3, r0
 800d11c:	461a      	mov	r2, r3
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d124:	3314      	adds	r3, #20
 800d126:	b29b      	uxth	r3, r3
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f5 fcde 	bl	8002aea <lwip_htons>
 800d12e:	4603      	mov	r3, r0
 800d130:	461a      	mov	r2, r3
 800d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d134:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	2200      	movs	r2, #0
 800d13a:	729a      	strb	r2, [r3, #10]
 800d13c:	2200      	movs	r2, #0
 800d13e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	695b      	ldr	r3, [r3, #20]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	6a39      	ldr	r1, [r7, #32]
 800d148:	68b8      	ldr	r0, [r7, #8]
 800d14a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d14c:	6a38      	ldr	r0, [r7, #32]
 800d14e:	f7f6 fdc9 	bl	8003ce4 <pbuf_free>
    left -= fragsize;
 800d152:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d154:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800d15a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d15c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d15e:	4413      	add	r3, r2
 800d160:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800d162:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d164:	2b00      	cmp	r3, #0
 800d166:	f47f af3f 	bne.w	800cfe8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	e002      	b.n	800d174 <ip4_frag+0x21c>
      goto memerr;
 800d16e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d170:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d174:	4618      	mov	r0, r3
 800d176:	3740      	adds	r7, #64	; 0x40
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	08010198 	.word	0x08010198
 800d180:	08010324 	.word	0x08010324
 800d184:	080101e0 	.word	0x080101e0
 800d188:	0801034c 	.word	0x0801034c
 800d18c:	08010368 	.word	0x08010368
 800d190:	0800cef1 	.word	0x0800cef1

0800d194 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d19e:	230e      	movs	r3, #14
 800d1a0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	895b      	ldrh	r3, [r3, #10]
 800d1a6:	2b0e      	cmp	r3, #14
 800d1a8:	d977      	bls.n	800d29a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	7b1a      	ldrb	r2, [r3, #12]
 800d1b4:	7b5b      	ldrb	r3, [r3, #13]
 800d1b6:	021b      	lsls	r3, r3, #8
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d023      	beq.n	800d210 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d10f      	bne.n	800d1f0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	785b      	ldrb	r3, [r3, #1]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d11b      	bne.n	800d210 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d1dc:	2b5e      	cmp	r3, #94	; 0x5e
 800d1de:	d117      	bne.n	800d210 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	7b5b      	ldrb	r3, [r3, #13]
 800d1e4:	f043 0310 	orr.w	r3, r3, #16
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	735a      	strb	r2, [r3, #13]
 800d1ee:	e00f      	b.n	800d210 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	4930      	ldr	r1, [pc, #192]	; (800d2b8 <ethernet_input+0x124>)
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 f8cc 	bl	800d394 <memcmp>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	7b5b      	ldrb	r3, [r3, #13]
 800d206:	f043 0308 	orr.w	r3, r3, #8
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d210:	89fb      	ldrh	r3, [r7, #14]
 800d212:	2b08      	cmp	r3, #8
 800d214:	d003      	beq.n	800d21e <ethernet_input+0x8a>
 800d216:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d21a:	d01e      	beq.n	800d25a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d21c:	e044      	b.n	800d2a8 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d224:	f003 0308 	and.w	r3, r3, #8
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d038      	beq.n	800d29e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	895b      	ldrh	r3, [r3, #10]
 800d230:	461a      	mov	r2, r3
 800d232:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d236:	429a      	cmp	r2, r3
 800d238:	db33      	blt.n	800d2a2 <ethernet_input+0x10e>
 800d23a:	8afb      	ldrh	r3, [r7, #22]
 800d23c:	425b      	negs	r3, r3
 800d23e:	b29b      	uxth	r3, r3
 800d240:	b21b      	sxth	r3, r3
 800d242:	4619      	mov	r1, r3
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7f6 fd29 	bl	8003c9c <pbuf_header>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d128      	bne.n	800d2a2 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7fe ff64 	bl	800c120 <ip4_input>
      break;
 800d258:	e01d      	b.n	800d296 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d260:	f003 0308 	and.w	r3, r3, #8
 800d264:	2b00      	cmp	r3, #0
 800d266:	d01e      	beq.n	800d2a6 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	895b      	ldrh	r3, [r3, #10]
 800d26c:	461a      	mov	r2, r3
 800d26e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d272:	429a      	cmp	r2, r3
 800d274:	db15      	blt.n	800d2a2 <ethernet_input+0x10e>
 800d276:	8afb      	ldrh	r3, [r7, #22]
 800d278:	425b      	negs	r3, r3
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	b21b      	sxth	r3, r3
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7f6 fd0b 	bl	8003c9c <pbuf_header>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10a      	bne.n	800d2a2 <ethernet_input+0x10e>
        etharp_input(p, netif);
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7fe f92e 	bl	800b4f0 <etharp_input>
      break;
 800d294:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	e00a      	b.n	800d2b0 <ethernet_input+0x11c>
    goto free_and_return;
 800d29a:	bf00      	nop
 800d29c:	e004      	b.n	800d2a8 <ethernet_input+0x114>
        goto free_and_return;
 800d29e:	bf00      	nop
 800d2a0:	e002      	b.n	800d2a8 <ethernet_input+0x114>

free_and_return:
 800d2a2:	bf00      	nop
 800d2a4:	e000      	b.n	800d2a8 <ethernet_input+0x114>
        goto free_and_return;
 800d2a6:	bf00      	nop
  pbuf_free(p);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7f6 fd1b 	bl	8003ce4 <pbuf_free>
  return ERR_OK;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	08010514 	.word	0x08010514

0800d2bc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d2ca:	8c3b      	ldrh	r3, [r7, #32]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7f5 fc0c 	bl	8002aea <lwip_htons>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d2d6:	210e      	movs	r1, #14
 800d2d8:	68b8      	ldr	r0, [r7, #8]
 800d2da:	f7f6 fcdf 	bl	8003c9c <pbuf_header>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d125      	bne.n	800d330 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	8afa      	ldrh	r2, [r7, #22]
 800d2ee:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	2206      	movs	r2, #6
 800d2f4:	6839      	ldr	r1, [r7, #0]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 f85b 	bl	800d3b2 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	3306      	adds	r3, #6
 800d300:	2206      	movs	r2, #6
 800d302:	6879      	ldr	r1, [r7, #4]
 800d304:	4618      	mov	r0, r3
 800d306:	f000 f854 	bl	800d3b2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d310:	2b06      	cmp	r3, #6
 800d312:	d006      	beq.n	800d322 <ethernet_output+0x66>
 800d314:	4b0a      	ldr	r3, [pc, #40]	; (800d340 <ethernet_output+0x84>)
 800d316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d31a:	490a      	ldr	r1, [pc, #40]	; (800d344 <ethernet_output+0x88>)
 800d31c:	480a      	ldr	r0, [pc, #40]	; (800d348 <ethernet_output+0x8c>)
 800d31e:	f000 f85b 	bl	800d3d8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	68b9      	ldr	r1, [r7, #8]
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	4798      	blx	r3
 800d32c:	4603      	mov	r3, r0
 800d32e:	e002      	b.n	800d336 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d330:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d332:	f06f 0301 	mvn.w	r3, #1
}
 800d336:	4618      	mov	r0, r3
 800d338:	3718      	adds	r7, #24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	08010388 	.word	0x08010388
 800d344:	080103c0 	.word	0x080103c0
 800d348:	080103f4 	.word	0x080103f4

0800d34c <__libc_init_array>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	2500      	movs	r5, #0
 800d350:	4e0c      	ldr	r6, [pc, #48]	; (800d384 <__libc_init_array+0x38>)
 800d352:	4c0d      	ldr	r4, [pc, #52]	; (800d388 <__libc_init_array+0x3c>)
 800d354:	1ba4      	subs	r4, r4, r6
 800d356:	10a4      	asrs	r4, r4, #2
 800d358:	42a5      	cmp	r5, r4
 800d35a:	d109      	bne.n	800d370 <__libc_init_array+0x24>
 800d35c:	f000 ff66 	bl	800e22c <_init>
 800d360:	2500      	movs	r5, #0
 800d362:	4e0a      	ldr	r6, [pc, #40]	; (800d38c <__libc_init_array+0x40>)
 800d364:	4c0a      	ldr	r4, [pc, #40]	; (800d390 <__libc_init_array+0x44>)
 800d366:	1ba4      	subs	r4, r4, r6
 800d368:	10a4      	asrs	r4, r4, #2
 800d36a:	42a5      	cmp	r5, r4
 800d36c:	d105      	bne.n	800d37a <__libc_init_array+0x2e>
 800d36e:	bd70      	pop	{r4, r5, r6, pc}
 800d370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d374:	4798      	blx	r3
 800d376:	3501      	adds	r5, #1
 800d378:	e7ee      	b.n	800d358 <__libc_init_array+0xc>
 800d37a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d37e:	4798      	blx	r3
 800d380:	3501      	adds	r5, #1
 800d382:	e7f2      	b.n	800d36a <__libc_init_array+0x1e>
 800d384:	080105c4 	.word	0x080105c4
 800d388:	080105c4 	.word	0x080105c4
 800d38c:	080105c4 	.word	0x080105c4
 800d390:	080105c8 	.word	0x080105c8

0800d394 <memcmp>:
 800d394:	b530      	push	{r4, r5, lr}
 800d396:	2400      	movs	r4, #0
 800d398:	42a2      	cmp	r2, r4
 800d39a:	d101      	bne.n	800d3a0 <memcmp+0xc>
 800d39c:	2000      	movs	r0, #0
 800d39e:	e007      	b.n	800d3b0 <memcmp+0x1c>
 800d3a0:	5d03      	ldrb	r3, [r0, r4]
 800d3a2:	3401      	adds	r4, #1
 800d3a4:	190d      	adds	r5, r1, r4
 800d3a6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800d3aa:	42ab      	cmp	r3, r5
 800d3ac:	d0f4      	beq.n	800d398 <memcmp+0x4>
 800d3ae:	1b58      	subs	r0, r3, r5
 800d3b0:	bd30      	pop	{r4, r5, pc}

0800d3b2 <memcpy>:
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	1e43      	subs	r3, r0, #1
 800d3b6:	440a      	add	r2, r1
 800d3b8:	4291      	cmp	r1, r2
 800d3ba:	d100      	bne.n	800d3be <memcpy+0xc>
 800d3bc:	bd10      	pop	{r4, pc}
 800d3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3c6:	e7f7      	b.n	800d3b8 <memcpy+0x6>

0800d3c8 <memset>:
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	4402      	add	r2, r0
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d100      	bne.n	800d3d2 <memset+0xa>
 800d3d0:	4770      	bx	lr
 800d3d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d3d6:	e7f9      	b.n	800d3cc <memset+0x4>

0800d3d8 <iprintf>:
 800d3d8:	b40f      	push	{r0, r1, r2, r3}
 800d3da:	4b0a      	ldr	r3, [pc, #40]	; (800d404 <iprintf+0x2c>)
 800d3dc:	b513      	push	{r0, r1, r4, lr}
 800d3de:	681c      	ldr	r4, [r3, #0]
 800d3e0:	b124      	cbz	r4, 800d3ec <iprintf+0x14>
 800d3e2:	69a3      	ldr	r3, [r4, #24]
 800d3e4:	b913      	cbnz	r3, 800d3ec <iprintf+0x14>
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 f882 	bl	800d4f0 <__sinit>
 800d3ec:	ab05      	add	r3, sp, #20
 800d3ee:	9a04      	ldr	r2, [sp, #16]
 800d3f0:	68a1      	ldr	r1, [r4, #8]
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	f000 f9db 	bl	800d7b0 <_vfiprintf_r>
 800d3fa:	b002      	add	sp, #8
 800d3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d400:	b004      	add	sp, #16
 800d402:	4770      	bx	lr
 800d404:	20000018 	.word	0x20000018

0800d408 <rand>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4b13      	ldr	r3, [pc, #76]	; (800d458 <rand+0x50>)
 800d40c:	681c      	ldr	r4, [r3, #0]
 800d40e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d410:	b97b      	cbnz	r3, 800d432 <rand+0x2a>
 800d412:	2018      	movs	r0, #24
 800d414:	f000 f8f6 	bl	800d604 <malloc>
 800d418:	4a10      	ldr	r2, [pc, #64]	; (800d45c <rand+0x54>)
 800d41a:	4b11      	ldr	r3, [pc, #68]	; (800d460 <rand+0x58>)
 800d41c:	63a0      	str	r0, [r4, #56]	; 0x38
 800d41e:	e9c0 2300 	strd	r2, r3, [r0]
 800d422:	4b10      	ldr	r3, [pc, #64]	; (800d464 <rand+0x5c>)
 800d424:	2201      	movs	r2, #1
 800d426:	6083      	str	r3, [r0, #8]
 800d428:	230b      	movs	r3, #11
 800d42a:	8183      	strh	r3, [r0, #12]
 800d42c:	2300      	movs	r3, #0
 800d42e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d432:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d434:	480c      	ldr	r0, [pc, #48]	; (800d468 <rand+0x60>)
 800d436:	690a      	ldr	r2, [r1, #16]
 800d438:	694b      	ldr	r3, [r1, #20]
 800d43a:	4350      	muls	r0, r2
 800d43c:	4c0b      	ldr	r4, [pc, #44]	; (800d46c <rand+0x64>)
 800d43e:	fb04 0003 	mla	r0, r4, r3, r0
 800d442:	fba2 2304 	umull	r2, r3, r2, r4
 800d446:	4403      	add	r3, r0
 800d448:	1c54      	adds	r4, r2, #1
 800d44a:	f143 0500 	adc.w	r5, r3, #0
 800d44e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800d452:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	20000018 	.word	0x20000018
 800d45c:	abcd330e 	.word	0xabcd330e
 800d460:	e66d1234 	.word	0xe66d1234
 800d464:	0005deec 	.word	0x0005deec
 800d468:	5851f42d 	.word	0x5851f42d
 800d46c:	4c957f2d 	.word	0x4c957f2d

0800d470 <std>:
 800d470:	2300      	movs	r3, #0
 800d472:	b510      	push	{r4, lr}
 800d474:	4604      	mov	r4, r0
 800d476:	e9c0 3300 	strd	r3, r3, [r0]
 800d47a:	6083      	str	r3, [r0, #8]
 800d47c:	8181      	strh	r1, [r0, #12]
 800d47e:	6643      	str	r3, [r0, #100]	; 0x64
 800d480:	81c2      	strh	r2, [r0, #14]
 800d482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d486:	6183      	str	r3, [r0, #24]
 800d488:	4619      	mov	r1, r3
 800d48a:	2208      	movs	r2, #8
 800d48c:	305c      	adds	r0, #92	; 0x5c
 800d48e:	f7ff ff9b 	bl	800d3c8 <memset>
 800d492:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <std+0x38>)
 800d494:	6224      	str	r4, [r4, #32]
 800d496:	6263      	str	r3, [r4, #36]	; 0x24
 800d498:	4b04      	ldr	r3, [pc, #16]	; (800d4ac <std+0x3c>)
 800d49a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d49c:	4b04      	ldr	r3, [pc, #16]	; (800d4b0 <std+0x40>)
 800d49e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4a0:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <std+0x44>)
 800d4a2:	6323      	str	r3, [r4, #48]	; 0x30
 800d4a4:	bd10      	pop	{r4, pc}
 800d4a6:	bf00      	nop
 800d4a8:	0800dd0d 	.word	0x0800dd0d
 800d4ac:	0800dd2f 	.word	0x0800dd2f
 800d4b0:	0800dd67 	.word	0x0800dd67
 800d4b4:	0800dd8b 	.word	0x0800dd8b

0800d4b8 <_cleanup_r>:
 800d4b8:	4901      	ldr	r1, [pc, #4]	; (800d4c0 <_cleanup_r+0x8>)
 800d4ba:	f000 b885 	b.w	800d5c8 <_fwalk_reent>
 800d4be:	bf00      	nop
 800d4c0:	0800e065 	.word	0x0800e065

0800d4c4 <__sfmoreglue>:
 800d4c4:	b570      	push	{r4, r5, r6, lr}
 800d4c6:	2568      	movs	r5, #104	; 0x68
 800d4c8:	1e4a      	subs	r2, r1, #1
 800d4ca:	4355      	muls	r5, r2
 800d4cc:	460e      	mov	r6, r1
 800d4ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4d2:	f000 f8eb 	bl	800d6ac <_malloc_r>
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	b140      	cbz	r0, 800d4ec <__sfmoreglue+0x28>
 800d4da:	2100      	movs	r1, #0
 800d4dc:	e9c0 1600 	strd	r1, r6, [r0]
 800d4e0:	300c      	adds	r0, #12
 800d4e2:	60a0      	str	r0, [r4, #8]
 800d4e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4e8:	f7ff ff6e 	bl	800d3c8 <memset>
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}

0800d4f0 <__sinit>:
 800d4f0:	6983      	ldr	r3, [r0, #24]
 800d4f2:	b510      	push	{r4, lr}
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	bb33      	cbnz	r3, 800d546 <__sinit+0x56>
 800d4f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d4fc:	6503      	str	r3, [r0, #80]	; 0x50
 800d4fe:	4b12      	ldr	r3, [pc, #72]	; (800d548 <__sinit+0x58>)
 800d500:	4a12      	ldr	r2, [pc, #72]	; (800d54c <__sinit+0x5c>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6282      	str	r2, [r0, #40]	; 0x28
 800d506:	4298      	cmp	r0, r3
 800d508:	bf04      	itt	eq
 800d50a:	2301      	moveq	r3, #1
 800d50c:	6183      	streq	r3, [r0, #24]
 800d50e:	f000 f81f 	bl	800d550 <__sfp>
 800d512:	6060      	str	r0, [r4, #4]
 800d514:	4620      	mov	r0, r4
 800d516:	f000 f81b 	bl	800d550 <__sfp>
 800d51a:	60a0      	str	r0, [r4, #8]
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 f817 	bl	800d550 <__sfp>
 800d522:	2200      	movs	r2, #0
 800d524:	60e0      	str	r0, [r4, #12]
 800d526:	2104      	movs	r1, #4
 800d528:	6860      	ldr	r0, [r4, #4]
 800d52a:	f7ff ffa1 	bl	800d470 <std>
 800d52e:	2201      	movs	r2, #1
 800d530:	2109      	movs	r1, #9
 800d532:	68a0      	ldr	r0, [r4, #8]
 800d534:	f7ff ff9c 	bl	800d470 <std>
 800d538:	2202      	movs	r2, #2
 800d53a:	2112      	movs	r1, #18
 800d53c:	68e0      	ldr	r0, [r4, #12]
 800d53e:	f7ff ff97 	bl	800d470 <std>
 800d542:	2301      	movs	r3, #1
 800d544:	61a3      	str	r3, [r4, #24]
 800d546:	bd10      	pop	{r4, pc}
 800d548:	08010524 	.word	0x08010524
 800d54c:	0800d4b9 	.word	0x0800d4b9

0800d550 <__sfp>:
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	4b1b      	ldr	r3, [pc, #108]	; (800d5c0 <__sfp+0x70>)
 800d554:	4607      	mov	r7, r0
 800d556:	681e      	ldr	r6, [r3, #0]
 800d558:	69b3      	ldr	r3, [r6, #24]
 800d55a:	b913      	cbnz	r3, 800d562 <__sfp+0x12>
 800d55c:	4630      	mov	r0, r6
 800d55e:	f7ff ffc7 	bl	800d4f0 <__sinit>
 800d562:	3648      	adds	r6, #72	; 0x48
 800d564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d568:	3b01      	subs	r3, #1
 800d56a:	d503      	bpl.n	800d574 <__sfp+0x24>
 800d56c:	6833      	ldr	r3, [r6, #0]
 800d56e:	b133      	cbz	r3, 800d57e <__sfp+0x2e>
 800d570:	6836      	ldr	r6, [r6, #0]
 800d572:	e7f7      	b.n	800d564 <__sfp+0x14>
 800d574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d578:	b16d      	cbz	r5, 800d596 <__sfp+0x46>
 800d57a:	3468      	adds	r4, #104	; 0x68
 800d57c:	e7f4      	b.n	800d568 <__sfp+0x18>
 800d57e:	2104      	movs	r1, #4
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff ff9f 	bl	800d4c4 <__sfmoreglue>
 800d586:	6030      	str	r0, [r6, #0]
 800d588:	2800      	cmp	r0, #0
 800d58a:	d1f1      	bne.n	800d570 <__sfp+0x20>
 800d58c:	230c      	movs	r3, #12
 800d58e:	4604      	mov	r4, r0
 800d590:	603b      	str	r3, [r7, #0]
 800d592:	4620      	mov	r0, r4
 800d594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d596:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <__sfp+0x74>)
 800d598:	6665      	str	r5, [r4, #100]	; 0x64
 800d59a:	e9c4 5500 	strd	r5, r5, [r4]
 800d59e:	60a5      	str	r5, [r4, #8]
 800d5a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d5a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d5a8:	2208      	movs	r2, #8
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5b0:	f7ff ff0a 	bl	800d3c8 <memset>
 800d5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5bc:	e7e9      	b.n	800d592 <__sfp+0x42>
 800d5be:	bf00      	nop
 800d5c0:	08010524 	.word	0x08010524
 800d5c4:	ffff0001 	.word	0xffff0001

0800d5c8 <_fwalk_reent>:
 800d5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	4689      	mov	r9, r1
 800d5d0:	2600      	movs	r6, #0
 800d5d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5d6:	b914      	cbnz	r4, 800d5de <_fwalk_reent+0x16>
 800d5d8:	4630      	mov	r0, r6
 800d5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d5e2:	3f01      	subs	r7, #1
 800d5e4:	d501      	bpl.n	800d5ea <_fwalk_reent+0x22>
 800d5e6:	6824      	ldr	r4, [r4, #0]
 800d5e8:	e7f5      	b.n	800d5d6 <_fwalk_reent+0xe>
 800d5ea:	89ab      	ldrh	r3, [r5, #12]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d907      	bls.n	800d600 <_fwalk_reent+0x38>
 800d5f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	d003      	beq.n	800d600 <_fwalk_reent+0x38>
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	4640      	mov	r0, r8
 800d5fc:	47c8      	blx	r9
 800d5fe:	4306      	orrs	r6, r0
 800d600:	3568      	adds	r5, #104	; 0x68
 800d602:	e7ee      	b.n	800d5e2 <_fwalk_reent+0x1a>

0800d604 <malloc>:
 800d604:	4b02      	ldr	r3, [pc, #8]	; (800d610 <malloc+0xc>)
 800d606:	4601      	mov	r1, r0
 800d608:	6818      	ldr	r0, [r3, #0]
 800d60a:	f000 b84f 	b.w	800d6ac <_malloc_r>
 800d60e:	bf00      	nop
 800d610:	20000018 	.word	0x20000018

0800d614 <_free_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4605      	mov	r5, r0
 800d618:	2900      	cmp	r1, #0
 800d61a:	d043      	beq.n	800d6a4 <_free_r+0x90>
 800d61c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d620:	1f0c      	subs	r4, r1, #4
 800d622:	2b00      	cmp	r3, #0
 800d624:	bfb8      	it	lt
 800d626:	18e4      	addlt	r4, r4, r3
 800d628:	f000 fdca 	bl	800e1c0 <__malloc_lock>
 800d62c:	4a1e      	ldr	r2, [pc, #120]	; (800d6a8 <_free_r+0x94>)
 800d62e:	6813      	ldr	r3, [r2, #0]
 800d630:	4610      	mov	r0, r2
 800d632:	b933      	cbnz	r3, 800d642 <_free_r+0x2e>
 800d634:	6063      	str	r3, [r4, #4]
 800d636:	6014      	str	r4, [r2, #0]
 800d638:	4628      	mov	r0, r5
 800d63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d63e:	f000 bdc0 	b.w	800e1c2 <__malloc_unlock>
 800d642:	42a3      	cmp	r3, r4
 800d644:	d90b      	bls.n	800d65e <_free_r+0x4a>
 800d646:	6821      	ldr	r1, [r4, #0]
 800d648:	1862      	adds	r2, r4, r1
 800d64a:	4293      	cmp	r3, r2
 800d64c:	bf01      	itttt	eq
 800d64e:	681a      	ldreq	r2, [r3, #0]
 800d650:	685b      	ldreq	r3, [r3, #4]
 800d652:	1852      	addeq	r2, r2, r1
 800d654:	6022      	streq	r2, [r4, #0]
 800d656:	6063      	str	r3, [r4, #4]
 800d658:	6004      	str	r4, [r0, #0]
 800d65a:	e7ed      	b.n	800d638 <_free_r+0x24>
 800d65c:	4613      	mov	r3, r2
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	b10a      	cbz	r2, 800d666 <_free_r+0x52>
 800d662:	42a2      	cmp	r2, r4
 800d664:	d9fa      	bls.n	800d65c <_free_r+0x48>
 800d666:	6819      	ldr	r1, [r3, #0]
 800d668:	1858      	adds	r0, r3, r1
 800d66a:	42a0      	cmp	r0, r4
 800d66c:	d10b      	bne.n	800d686 <_free_r+0x72>
 800d66e:	6820      	ldr	r0, [r4, #0]
 800d670:	4401      	add	r1, r0
 800d672:	1858      	adds	r0, r3, r1
 800d674:	4282      	cmp	r2, r0
 800d676:	6019      	str	r1, [r3, #0]
 800d678:	d1de      	bne.n	800d638 <_free_r+0x24>
 800d67a:	6810      	ldr	r0, [r2, #0]
 800d67c:	6852      	ldr	r2, [r2, #4]
 800d67e:	4401      	add	r1, r0
 800d680:	6019      	str	r1, [r3, #0]
 800d682:	605a      	str	r2, [r3, #4]
 800d684:	e7d8      	b.n	800d638 <_free_r+0x24>
 800d686:	d902      	bls.n	800d68e <_free_r+0x7a>
 800d688:	230c      	movs	r3, #12
 800d68a:	602b      	str	r3, [r5, #0]
 800d68c:	e7d4      	b.n	800d638 <_free_r+0x24>
 800d68e:	6820      	ldr	r0, [r4, #0]
 800d690:	1821      	adds	r1, r4, r0
 800d692:	428a      	cmp	r2, r1
 800d694:	bf01      	itttt	eq
 800d696:	6811      	ldreq	r1, [r2, #0]
 800d698:	6852      	ldreq	r2, [r2, #4]
 800d69a:	1809      	addeq	r1, r1, r0
 800d69c:	6021      	streq	r1, [r4, #0]
 800d69e:	6062      	str	r2, [r4, #4]
 800d6a0:	605c      	str	r4, [r3, #4]
 800d6a2:	e7c9      	b.n	800d638 <_free_r+0x24>
 800d6a4:	bd38      	pop	{r3, r4, r5, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000218 	.word	0x20000218

0800d6ac <_malloc_r>:
 800d6ac:	b570      	push	{r4, r5, r6, lr}
 800d6ae:	1ccd      	adds	r5, r1, #3
 800d6b0:	f025 0503 	bic.w	r5, r5, #3
 800d6b4:	3508      	adds	r5, #8
 800d6b6:	2d0c      	cmp	r5, #12
 800d6b8:	bf38      	it	cc
 800d6ba:	250c      	movcc	r5, #12
 800d6bc:	2d00      	cmp	r5, #0
 800d6be:	4606      	mov	r6, r0
 800d6c0:	db01      	blt.n	800d6c6 <_malloc_r+0x1a>
 800d6c2:	42a9      	cmp	r1, r5
 800d6c4:	d903      	bls.n	800d6ce <_malloc_r+0x22>
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	bd70      	pop	{r4, r5, r6, pc}
 800d6ce:	f000 fd77 	bl	800e1c0 <__malloc_lock>
 800d6d2:	4a21      	ldr	r2, [pc, #132]	; (800d758 <_malloc_r+0xac>)
 800d6d4:	6814      	ldr	r4, [r2, #0]
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	b991      	cbnz	r1, 800d700 <_malloc_r+0x54>
 800d6da:	4c20      	ldr	r4, [pc, #128]	; (800d75c <_malloc_r+0xb0>)
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	b91b      	cbnz	r3, 800d6e8 <_malloc_r+0x3c>
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f000 fb03 	bl	800dcec <_sbrk_r>
 800d6e6:	6020      	str	r0, [r4, #0]
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f000 fafe 	bl	800dcec <_sbrk_r>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d124      	bne.n	800d73e <_malloc_r+0x92>
 800d6f4:	230c      	movs	r3, #12
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	6033      	str	r3, [r6, #0]
 800d6fa:	f000 fd62 	bl	800e1c2 <__malloc_unlock>
 800d6fe:	e7e4      	b.n	800d6ca <_malloc_r+0x1e>
 800d700:	680b      	ldr	r3, [r1, #0]
 800d702:	1b5b      	subs	r3, r3, r5
 800d704:	d418      	bmi.n	800d738 <_malloc_r+0x8c>
 800d706:	2b0b      	cmp	r3, #11
 800d708:	d90f      	bls.n	800d72a <_malloc_r+0x7e>
 800d70a:	600b      	str	r3, [r1, #0]
 800d70c:	18cc      	adds	r4, r1, r3
 800d70e:	50cd      	str	r5, [r1, r3]
 800d710:	4630      	mov	r0, r6
 800d712:	f000 fd56 	bl	800e1c2 <__malloc_unlock>
 800d716:	f104 000b 	add.w	r0, r4, #11
 800d71a:	1d23      	adds	r3, r4, #4
 800d71c:	f020 0007 	bic.w	r0, r0, #7
 800d720:	1ac3      	subs	r3, r0, r3
 800d722:	d0d3      	beq.n	800d6cc <_malloc_r+0x20>
 800d724:	425a      	negs	r2, r3
 800d726:	50e2      	str	r2, [r4, r3]
 800d728:	e7d0      	b.n	800d6cc <_malloc_r+0x20>
 800d72a:	684b      	ldr	r3, [r1, #4]
 800d72c:	428c      	cmp	r4, r1
 800d72e:	bf16      	itet	ne
 800d730:	6063      	strne	r3, [r4, #4]
 800d732:	6013      	streq	r3, [r2, #0]
 800d734:	460c      	movne	r4, r1
 800d736:	e7eb      	b.n	800d710 <_malloc_r+0x64>
 800d738:	460c      	mov	r4, r1
 800d73a:	6849      	ldr	r1, [r1, #4]
 800d73c:	e7cc      	b.n	800d6d8 <_malloc_r+0x2c>
 800d73e:	1cc4      	adds	r4, r0, #3
 800d740:	f024 0403 	bic.w	r4, r4, #3
 800d744:	42a0      	cmp	r0, r4
 800d746:	d005      	beq.n	800d754 <_malloc_r+0xa8>
 800d748:	1a21      	subs	r1, r4, r0
 800d74a:	4630      	mov	r0, r6
 800d74c:	f000 face 	bl	800dcec <_sbrk_r>
 800d750:	3001      	adds	r0, #1
 800d752:	d0cf      	beq.n	800d6f4 <_malloc_r+0x48>
 800d754:	6025      	str	r5, [r4, #0]
 800d756:	e7db      	b.n	800d710 <_malloc_r+0x64>
 800d758:	20000218 	.word	0x20000218
 800d75c:	2000021c 	.word	0x2000021c

0800d760 <__sfputc_r>:
 800d760:	6893      	ldr	r3, [r2, #8]
 800d762:	b410      	push	{r4}
 800d764:	3b01      	subs	r3, #1
 800d766:	2b00      	cmp	r3, #0
 800d768:	6093      	str	r3, [r2, #8]
 800d76a:	da07      	bge.n	800d77c <__sfputc_r+0x1c>
 800d76c:	6994      	ldr	r4, [r2, #24]
 800d76e:	42a3      	cmp	r3, r4
 800d770:	db01      	blt.n	800d776 <__sfputc_r+0x16>
 800d772:	290a      	cmp	r1, #10
 800d774:	d102      	bne.n	800d77c <__sfputc_r+0x1c>
 800d776:	bc10      	pop	{r4}
 800d778:	f000 bb0c 	b.w	800dd94 <__swbuf_r>
 800d77c:	6813      	ldr	r3, [r2, #0]
 800d77e:	1c58      	adds	r0, r3, #1
 800d780:	6010      	str	r0, [r2, #0]
 800d782:	7019      	strb	r1, [r3, #0]
 800d784:	4608      	mov	r0, r1
 800d786:	bc10      	pop	{r4}
 800d788:	4770      	bx	lr

0800d78a <__sfputs_r>:
 800d78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78c:	4606      	mov	r6, r0
 800d78e:	460f      	mov	r7, r1
 800d790:	4614      	mov	r4, r2
 800d792:	18d5      	adds	r5, r2, r3
 800d794:	42ac      	cmp	r4, r5
 800d796:	d101      	bne.n	800d79c <__sfputs_r+0x12>
 800d798:	2000      	movs	r0, #0
 800d79a:	e007      	b.n	800d7ac <__sfputs_r+0x22>
 800d79c:	463a      	mov	r2, r7
 800d79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff ffdc 	bl	800d760 <__sfputc_r>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d1f3      	bne.n	800d794 <__sfputs_r+0xa>
 800d7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7b0 <_vfiprintf_r>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	b09d      	sub	sp, #116	; 0x74
 800d7b8:	4617      	mov	r7, r2
 800d7ba:	461d      	mov	r5, r3
 800d7bc:	4606      	mov	r6, r0
 800d7be:	b118      	cbz	r0, 800d7c8 <_vfiprintf_r+0x18>
 800d7c0:	6983      	ldr	r3, [r0, #24]
 800d7c2:	b90b      	cbnz	r3, 800d7c8 <_vfiprintf_r+0x18>
 800d7c4:	f7ff fe94 	bl	800d4f0 <__sinit>
 800d7c8:	4b7c      	ldr	r3, [pc, #496]	; (800d9bc <_vfiprintf_r+0x20c>)
 800d7ca:	429c      	cmp	r4, r3
 800d7cc:	d158      	bne.n	800d880 <_vfiprintf_r+0xd0>
 800d7ce:	6874      	ldr	r4, [r6, #4]
 800d7d0:	89a3      	ldrh	r3, [r4, #12]
 800d7d2:	0718      	lsls	r0, r3, #28
 800d7d4:	d55e      	bpl.n	800d894 <_vfiprintf_r+0xe4>
 800d7d6:	6923      	ldr	r3, [r4, #16]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d05b      	beq.n	800d894 <_vfiprintf_r+0xe4>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e0:	2320      	movs	r3, #32
 800d7e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7e6:	2330      	movs	r3, #48	; 0x30
 800d7e8:	f04f 0b01 	mov.w	fp, #1
 800d7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7f0:	9503      	str	r5, [sp, #12]
 800d7f2:	46b8      	mov	r8, r7
 800d7f4:	4645      	mov	r5, r8
 800d7f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d7fa:	b10b      	cbz	r3, 800d800 <_vfiprintf_r+0x50>
 800d7fc:	2b25      	cmp	r3, #37	; 0x25
 800d7fe:	d154      	bne.n	800d8aa <_vfiprintf_r+0xfa>
 800d800:	ebb8 0a07 	subs.w	sl, r8, r7
 800d804:	d00b      	beq.n	800d81e <_vfiprintf_r+0x6e>
 800d806:	4653      	mov	r3, sl
 800d808:	463a      	mov	r2, r7
 800d80a:	4621      	mov	r1, r4
 800d80c:	4630      	mov	r0, r6
 800d80e:	f7ff ffbc 	bl	800d78a <__sfputs_r>
 800d812:	3001      	adds	r0, #1
 800d814:	f000 80c2 	beq.w	800d99c <_vfiprintf_r+0x1ec>
 800d818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81a:	4453      	add	r3, sl
 800d81c:	9309      	str	r3, [sp, #36]	; 0x24
 800d81e:	f898 3000 	ldrb.w	r3, [r8]
 800d822:	2b00      	cmp	r3, #0
 800d824:	f000 80ba 	beq.w	800d99c <_vfiprintf_r+0x1ec>
 800d828:	2300      	movs	r3, #0
 800d82a:	f04f 32ff 	mov.w	r2, #4294967295
 800d82e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	9307      	str	r3, [sp, #28]
 800d836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d83a:	931a      	str	r3, [sp, #104]	; 0x68
 800d83c:	46a8      	mov	r8, r5
 800d83e:	2205      	movs	r2, #5
 800d840:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d844:	485e      	ldr	r0, [pc, #376]	; (800d9c0 <_vfiprintf_r+0x210>)
 800d846:	f000 fcad 	bl	800e1a4 <memchr>
 800d84a:	9b04      	ldr	r3, [sp, #16]
 800d84c:	bb78      	cbnz	r0, 800d8ae <_vfiprintf_r+0xfe>
 800d84e:	06d9      	lsls	r1, r3, #27
 800d850:	bf44      	itt	mi
 800d852:	2220      	movmi	r2, #32
 800d854:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d858:	071a      	lsls	r2, r3, #28
 800d85a:	bf44      	itt	mi
 800d85c:	222b      	movmi	r2, #43	; 0x2b
 800d85e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d862:	782a      	ldrb	r2, [r5, #0]
 800d864:	2a2a      	cmp	r2, #42	; 0x2a
 800d866:	d02a      	beq.n	800d8be <_vfiprintf_r+0x10e>
 800d868:	46a8      	mov	r8, r5
 800d86a:	2000      	movs	r0, #0
 800d86c:	250a      	movs	r5, #10
 800d86e:	9a07      	ldr	r2, [sp, #28]
 800d870:	4641      	mov	r1, r8
 800d872:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d876:	3b30      	subs	r3, #48	; 0x30
 800d878:	2b09      	cmp	r3, #9
 800d87a:	d969      	bls.n	800d950 <_vfiprintf_r+0x1a0>
 800d87c:	b360      	cbz	r0, 800d8d8 <_vfiprintf_r+0x128>
 800d87e:	e024      	b.n	800d8ca <_vfiprintf_r+0x11a>
 800d880:	4b50      	ldr	r3, [pc, #320]	; (800d9c4 <_vfiprintf_r+0x214>)
 800d882:	429c      	cmp	r4, r3
 800d884:	d101      	bne.n	800d88a <_vfiprintf_r+0xda>
 800d886:	68b4      	ldr	r4, [r6, #8]
 800d888:	e7a2      	b.n	800d7d0 <_vfiprintf_r+0x20>
 800d88a:	4b4f      	ldr	r3, [pc, #316]	; (800d9c8 <_vfiprintf_r+0x218>)
 800d88c:	429c      	cmp	r4, r3
 800d88e:	bf08      	it	eq
 800d890:	68f4      	ldreq	r4, [r6, #12]
 800d892:	e79d      	b.n	800d7d0 <_vfiprintf_r+0x20>
 800d894:	4621      	mov	r1, r4
 800d896:	4630      	mov	r0, r6
 800d898:	f000 fae0 	bl	800de5c <__swsetup_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d09d      	beq.n	800d7dc <_vfiprintf_r+0x2c>
 800d8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a4:	b01d      	add	sp, #116	; 0x74
 800d8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8aa:	46a8      	mov	r8, r5
 800d8ac:	e7a2      	b.n	800d7f4 <_vfiprintf_r+0x44>
 800d8ae:	4a44      	ldr	r2, [pc, #272]	; (800d9c0 <_vfiprintf_r+0x210>)
 800d8b0:	4645      	mov	r5, r8
 800d8b2:	1a80      	subs	r0, r0, r2
 800d8b4:	fa0b f000 	lsl.w	r0, fp, r0
 800d8b8:	4318      	orrs	r0, r3
 800d8ba:	9004      	str	r0, [sp, #16]
 800d8bc:	e7be      	b.n	800d83c <_vfiprintf_r+0x8c>
 800d8be:	9a03      	ldr	r2, [sp, #12]
 800d8c0:	1d11      	adds	r1, r2, #4
 800d8c2:	6812      	ldr	r2, [r2, #0]
 800d8c4:	9103      	str	r1, [sp, #12]
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	db01      	blt.n	800d8ce <_vfiprintf_r+0x11e>
 800d8ca:	9207      	str	r2, [sp, #28]
 800d8cc:	e004      	b.n	800d8d8 <_vfiprintf_r+0x128>
 800d8ce:	4252      	negs	r2, r2
 800d8d0:	f043 0302 	orr.w	r3, r3, #2
 800d8d4:	9207      	str	r2, [sp, #28]
 800d8d6:	9304      	str	r3, [sp, #16]
 800d8d8:	f898 3000 	ldrb.w	r3, [r8]
 800d8dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d8de:	d10e      	bne.n	800d8fe <_vfiprintf_r+0x14e>
 800d8e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d8e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e6:	d138      	bne.n	800d95a <_vfiprintf_r+0x1aa>
 800d8e8:	9b03      	ldr	r3, [sp, #12]
 800d8ea:	f108 0802 	add.w	r8, r8, #2
 800d8ee:	1d1a      	adds	r2, r3, #4
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	9203      	str	r2, [sp, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	bfb8      	it	lt
 800d8f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8fc:	9305      	str	r3, [sp, #20]
 800d8fe:	4d33      	ldr	r5, [pc, #204]	; (800d9cc <_vfiprintf_r+0x21c>)
 800d900:	2203      	movs	r2, #3
 800d902:	f898 1000 	ldrb.w	r1, [r8]
 800d906:	4628      	mov	r0, r5
 800d908:	f000 fc4c 	bl	800e1a4 <memchr>
 800d90c:	b140      	cbz	r0, 800d920 <_vfiprintf_r+0x170>
 800d90e:	2340      	movs	r3, #64	; 0x40
 800d910:	1b40      	subs	r0, r0, r5
 800d912:	fa03 f000 	lsl.w	r0, r3, r0
 800d916:	9b04      	ldr	r3, [sp, #16]
 800d918:	f108 0801 	add.w	r8, r8, #1
 800d91c:	4303      	orrs	r3, r0
 800d91e:	9304      	str	r3, [sp, #16]
 800d920:	f898 1000 	ldrb.w	r1, [r8]
 800d924:	2206      	movs	r2, #6
 800d926:	482a      	ldr	r0, [pc, #168]	; (800d9d0 <_vfiprintf_r+0x220>)
 800d928:	f108 0701 	add.w	r7, r8, #1
 800d92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d930:	f000 fc38 	bl	800e1a4 <memchr>
 800d934:	2800      	cmp	r0, #0
 800d936:	d037      	beq.n	800d9a8 <_vfiprintf_r+0x1f8>
 800d938:	4b26      	ldr	r3, [pc, #152]	; (800d9d4 <_vfiprintf_r+0x224>)
 800d93a:	bb1b      	cbnz	r3, 800d984 <_vfiprintf_r+0x1d4>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	3307      	adds	r3, #7
 800d940:	f023 0307 	bic.w	r3, r3, #7
 800d944:	3308      	adds	r3, #8
 800d946:	9303      	str	r3, [sp, #12]
 800d948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94a:	444b      	add	r3, r9
 800d94c:	9309      	str	r3, [sp, #36]	; 0x24
 800d94e:	e750      	b.n	800d7f2 <_vfiprintf_r+0x42>
 800d950:	fb05 3202 	mla	r2, r5, r2, r3
 800d954:	2001      	movs	r0, #1
 800d956:	4688      	mov	r8, r1
 800d958:	e78a      	b.n	800d870 <_vfiprintf_r+0xc0>
 800d95a:	2300      	movs	r3, #0
 800d95c:	250a      	movs	r5, #10
 800d95e:	4619      	mov	r1, r3
 800d960:	f108 0801 	add.w	r8, r8, #1
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	4640      	mov	r0, r8
 800d968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d96c:	3a30      	subs	r2, #48	; 0x30
 800d96e:	2a09      	cmp	r2, #9
 800d970:	d903      	bls.n	800d97a <_vfiprintf_r+0x1ca>
 800d972:	2b00      	cmp	r3, #0
 800d974:	d0c3      	beq.n	800d8fe <_vfiprintf_r+0x14e>
 800d976:	9105      	str	r1, [sp, #20]
 800d978:	e7c1      	b.n	800d8fe <_vfiprintf_r+0x14e>
 800d97a:	fb05 2101 	mla	r1, r5, r1, r2
 800d97e:	2301      	movs	r3, #1
 800d980:	4680      	mov	r8, r0
 800d982:	e7f0      	b.n	800d966 <_vfiprintf_r+0x1b6>
 800d984:	ab03      	add	r3, sp, #12
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	4622      	mov	r2, r4
 800d98a:	4b13      	ldr	r3, [pc, #76]	; (800d9d8 <_vfiprintf_r+0x228>)
 800d98c:	a904      	add	r1, sp, #16
 800d98e:	4630      	mov	r0, r6
 800d990:	f3af 8000 	nop.w
 800d994:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d998:	4681      	mov	r9, r0
 800d99a:	d1d5      	bne.n	800d948 <_vfiprintf_r+0x198>
 800d99c:	89a3      	ldrh	r3, [r4, #12]
 800d99e:	065b      	lsls	r3, r3, #25
 800d9a0:	f53f af7e 	bmi.w	800d8a0 <_vfiprintf_r+0xf0>
 800d9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9a6:	e77d      	b.n	800d8a4 <_vfiprintf_r+0xf4>
 800d9a8:	ab03      	add	r3, sp, #12
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <_vfiprintf_r+0x228>)
 800d9b0:	a904      	add	r1, sp, #16
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	f000 f888 	bl	800dac8 <_printf_i>
 800d9b8:	e7ec      	b.n	800d994 <_vfiprintf_r+0x1e4>
 800d9ba:	bf00      	nop
 800d9bc:	08010548 	.word	0x08010548
 800d9c0:	08010588 	.word	0x08010588
 800d9c4:	08010568 	.word	0x08010568
 800d9c8:	08010528 	.word	0x08010528
 800d9cc:	0801058e 	.word	0x0801058e
 800d9d0:	08010592 	.word	0x08010592
 800d9d4:	00000000 	.word	0x00000000
 800d9d8:	0800d78b 	.word	0x0800d78b

0800d9dc <_printf_common>:
 800d9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e0:	4691      	mov	r9, r2
 800d9e2:	461f      	mov	r7, r3
 800d9e4:	688a      	ldr	r2, [r1, #8]
 800d9e6:	690b      	ldr	r3, [r1, #16]
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	bfb8      	it	lt
 800d9ee:	4613      	movlt	r3, r2
 800d9f0:	f8c9 3000 	str.w	r3, [r9]
 800d9f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9fe:	b112      	cbz	r2, 800da06 <_printf_common+0x2a>
 800da00:	3301      	adds	r3, #1
 800da02:	f8c9 3000 	str.w	r3, [r9]
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	0699      	lsls	r1, r3, #26
 800da0a:	bf42      	ittt	mi
 800da0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800da10:	3302      	addmi	r3, #2
 800da12:	f8c9 3000 	strmi.w	r3, [r9]
 800da16:	6825      	ldr	r5, [r4, #0]
 800da18:	f015 0506 	ands.w	r5, r5, #6
 800da1c:	d107      	bne.n	800da2e <_printf_common+0x52>
 800da1e:	f104 0a19 	add.w	sl, r4, #25
 800da22:	68e3      	ldr	r3, [r4, #12]
 800da24:	f8d9 2000 	ldr.w	r2, [r9]
 800da28:	1a9b      	subs	r3, r3, r2
 800da2a:	42ab      	cmp	r3, r5
 800da2c:	dc29      	bgt.n	800da82 <_printf_common+0xa6>
 800da2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800da32:	6822      	ldr	r2, [r4, #0]
 800da34:	3300      	adds	r3, #0
 800da36:	bf18      	it	ne
 800da38:	2301      	movne	r3, #1
 800da3a:	0692      	lsls	r2, r2, #26
 800da3c:	d42e      	bmi.n	800da9c <_printf_common+0xc0>
 800da3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da42:	4639      	mov	r1, r7
 800da44:	4630      	mov	r0, r6
 800da46:	47c0      	blx	r8
 800da48:	3001      	adds	r0, #1
 800da4a:	d021      	beq.n	800da90 <_printf_common+0xb4>
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	68e5      	ldr	r5, [r4, #12]
 800da50:	f003 0306 	and.w	r3, r3, #6
 800da54:	2b04      	cmp	r3, #4
 800da56:	bf18      	it	ne
 800da58:	2500      	movne	r5, #0
 800da5a:	f8d9 2000 	ldr.w	r2, [r9]
 800da5e:	f04f 0900 	mov.w	r9, #0
 800da62:	bf08      	it	eq
 800da64:	1aad      	subeq	r5, r5, r2
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	6922      	ldr	r2, [r4, #16]
 800da6a:	bf08      	it	eq
 800da6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da70:	4293      	cmp	r3, r2
 800da72:	bfc4      	itt	gt
 800da74:	1a9b      	subgt	r3, r3, r2
 800da76:	18ed      	addgt	r5, r5, r3
 800da78:	341a      	adds	r4, #26
 800da7a:	454d      	cmp	r5, r9
 800da7c:	d11a      	bne.n	800dab4 <_printf_common+0xd8>
 800da7e:	2000      	movs	r0, #0
 800da80:	e008      	b.n	800da94 <_printf_common+0xb8>
 800da82:	2301      	movs	r3, #1
 800da84:	4652      	mov	r2, sl
 800da86:	4639      	mov	r1, r7
 800da88:	4630      	mov	r0, r6
 800da8a:	47c0      	blx	r8
 800da8c:	3001      	adds	r0, #1
 800da8e:	d103      	bne.n	800da98 <_printf_common+0xbc>
 800da90:	f04f 30ff 	mov.w	r0, #4294967295
 800da94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da98:	3501      	adds	r5, #1
 800da9a:	e7c2      	b.n	800da22 <_printf_common+0x46>
 800da9c:	2030      	movs	r0, #48	; 0x30
 800da9e:	18e1      	adds	r1, r4, r3
 800daa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800daa4:	1c5a      	adds	r2, r3, #1
 800daa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800daaa:	4422      	add	r2, r4
 800daac:	3302      	adds	r3, #2
 800daae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dab2:	e7c4      	b.n	800da3e <_printf_common+0x62>
 800dab4:	2301      	movs	r3, #1
 800dab6:	4622      	mov	r2, r4
 800dab8:	4639      	mov	r1, r7
 800daba:	4630      	mov	r0, r6
 800dabc:	47c0      	blx	r8
 800dabe:	3001      	adds	r0, #1
 800dac0:	d0e6      	beq.n	800da90 <_printf_common+0xb4>
 800dac2:	f109 0901 	add.w	r9, r9, #1
 800dac6:	e7d8      	b.n	800da7a <_printf_common+0x9e>

0800dac8 <_printf_i>:
 800dac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dacc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dad0:	460c      	mov	r4, r1
 800dad2:	7e09      	ldrb	r1, [r1, #24]
 800dad4:	b085      	sub	sp, #20
 800dad6:	296e      	cmp	r1, #110	; 0x6e
 800dad8:	4617      	mov	r7, r2
 800dada:	4606      	mov	r6, r0
 800dadc:	4698      	mov	r8, r3
 800dade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dae0:	f000 80b3 	beq.w	800dc4a <_printf_i+0x182>
 800dae4:	d822      	bhi.n	800db2c <_printf_i+0x64>
 800dae6:	2963      	cmp	r1, #99	; 0x63
 800dae8:	d036      	beq.n	800db58 <_printf_i+0x90>
 800daea:	d80a      	bhi.n	800db02 <_printf_i+0x3a>
 800daec:	2900      	cmp	r1, #0
 800daee:	f000 80b9 	beq.w	800dc64 <_printf_i+0x19c>
 800daf2:	2958      	cmp	r1, #88	; 0x58
 800daf4:	f000 8083 	beq.w	800dbfe <_printf_i+0x136>
 800daf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dafc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800db00:	e032      	b.n	800db68 <_printf_i+0xa0>
 800db02:	2964      	cmp	r1, #100	; 0x64
 800db04:	d001      	beq.n	800db0a <_printf_i+0x42>
 800db06:	2969      	cmp	r1, #105	; 0x69
 800db08:	d1f6      	bne.n	800daf8 <_printf_i+0x30>
 800db0a:	6820      	ldr	r0, [r4, #0]
 800db0c:	6813      	ldr	r3, [r2, #0]
 800db0e:	0605      	lsls	r5, r0, #24
 800db10:	f103 0104 	add.w	r1, r3, #4
 800db14:	d52a      	bpl.n	800db6c <_printf_i+0xa4>
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6011      	str	r1, [r2, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	da03      	bge.n	800db26 <_printf_i+0x5e>
 800db1e:	222d      	movs	r2, #45	; 0x2d
 800db20:	425b      	negs	r3, r3
 800db22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800db26:	486f      	ldr	r0, [pc, #444]	; (800dce4 <_printf_i+0x21c>)
 800db28:	220a      	movs	r2, #10
 800db2a:	e039      	b.n	800dba0 <_printf_i+0xd8>
 800db2c:	2973      	cmp	r1, #115	; 0x73
 800db2e:	f000 809d 	beq.w	800dc6c <_printf_i+0x1a4>
 800db32:	d808      	bhi.n	800db46 <_printf_i+0x7e>
 800db34:	296f      	cmp	r1, #111	; 0x6f
 800db36:	d020      	beq.n	800db7a <_printf_i+0xb2>
 800db38:	2970      	cmp	r1, #112	; 0x70
 800db3a:	d1dd      	bne.n	800daf8 <_printf_i+0x30>
 800db3c:	6823      	ldr	r3, [r4, #0]
 800db3e:	f043 0320 	orr.w	r3, r3, #32
 800db42:	6023      	str	r3, [r4, #0]
 800db44:	e003      	b.n	800db4e <_printf_i+0x86>
 800db46:	2975      	cmp	r1, #117	; 0x75
 800db48:	d017      	beq.n	800db7a <_printf_i+0xb2>
 800db4a:	2978      	cmp	r1, #120	; 0x78
 800db4c:	d1d4      	bne.n	800daf8 <_printf_i+0x30>
 800db4e:	2378      	movs	r3, #120	; 0x78
 800db50:	4865      	ldr	r0, [pc, #404]	; (800dce8 <_printf_i+0x220>)
 800db52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db56:	e055      	b.n	800dc04 <_printf_i+0x13c>
 800db58:	6813      	ldr	r3, [r2, #0]
 800db5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db5e:	1d19      	adds	r1, r3, #4
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	6011      	str	r1, [r2, #0]
 800db64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db68:	2301      	movs	r3, #1
 800db6a:	e08c      	b.n	800dc86 <_printf_i+0x1be>
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db72:	6011      	str	r1, [r2, #0]
 800db74:	bf18      	it	ne
 800db76:	b21b      	sxthne	r3, r3
 800db78:	e7cf      	b.n	800db1a <_printf_i+0x52>
 800db7a:	6813      	ldr	r3, [r2, #0]
 800db7c:	6825      	ldr	r5, [r4, #0]
 800db7e:	1d18      	adds	r0, r3, #4
 800db80:	6010      	str	r0, [r2, #0]
 800db82:	0628      	lsls	r0, r5, #24
 800db84:	d501      	bpl.n	800db8a <_printf_i+0xc2>
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	e002      	b.n	800db90 <_printf_i+0xc8>
 800db8a:	0668      	lsls	r0, r5, #25
 800db8c:	d5fb      	bpl.n	800db86 <_printf_i+0xbe>
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	296f      	cmp	r1, #111	; 0x6f
 800db92:	bf14      	ite	ne
 800db94:	220a      	movne	r2, #10
 800db96:	2208      	moveq	r2, #8
 800db98:	4852      	ldr	r0, [pc, #328]	; (800dce4 <_printf_i+0x21c>)
 800db9a:	2100      	movs	r1, #0
 800db9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dba0:	6865      	ldr	r5, [r4, #4]
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	60a5      	str	r5, [r4, #8]
 800dba6:	f2c0 8095 	blt.w	800dcd4 <_printf_i+0x20c>
 800dbaa:	6821      	ldr	r1, [r4, #0]
 800dbac:	f021 0104 	bic.w	r1, r1, #4
 800dbb0:	6021      	str	r1, [r4, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d13d      	bne.n	800dc32 <_printf_i+0x16a>
 800dbb6:	2d00      	cmp	r5, #0
 800dbb8:	f040 808e 	bne.w	800dcd8 <_printf_i+0x210>
 800dbbc:	4665      	mov	r5, ip
 800dbbe:	2a08      	cmp	r2, #8
 800dbc0:	d10b      	bne.n	800dbda <_printf_i+0x112>
 800dbc2:	6823      	ldr	r3, [r4, #0]
 800dbc4:	07db      	lsls	r3, r3, #31
 800dbc6:	d508      	bpl.n	800dbda <_printf_i+0x112>
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	6862      	ldr	r2, [r4, #4]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	bfde      	ittt	le
 800dbd0:	2330      	movle	r3, #48	; 0x30
 800dbd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dbda:	ebac 0305 	sub.w	r3, ip, r5
 800dbde:	6123      	str	r3, [r4, #16]
 800dbe0:	f8cd 8000 	str.w	r8, [sp]
 800dbe4:	463b      	mov	r3, r7
 800dbe6:	aa03      	add	r2, sp, #12
 800dbe8:	4621      	mov	r1, r4
 800dbea:	4630      	mov	r0, r6
 800dbec:	f7ff fef6 	bl	800d9dc <_printf_common>
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	d14d      	bne.n	800dc90 <_printf_i+0x1c8>
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	b005      	add	sp, #20
 800dbfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbfe:	4839      	ldr	r0, [pc, #228]	; (800dce4 <_printf_i+0x21c>)
 800dc00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dc04:	6813      	ldr	r3, [r2, #0]
 800dc06:	6821      	ldr	r1, [r4, #0]
 800dc08:	1d1d      	adds	r5, r3, #4
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6015      	str	r5, [r2, #0]
 800dc0e:	060a      	lsls	r2, r1, #24
 800dc10:	d50b      	bpl.n	800dc2a <_printf_i+0x162>
 800dc12:	07ca      	lsls	r2, r1, #31
 800dc14:	bf44      	itt	mi
 800dc16:	f041 0120 	orrmi.w	r1, r1, #32
 800dc1a:	6021      	strmi	r1, [r4, #0]
 800dc1c:	b91b      	cbnz	r3, 800dc26 <_printf_i+0x15e>
 800dc1e:	6822      	ldr	r2, [r4, #0]
 800dc20:	f022 0220 	bic.w	r2, r2, #32
 800dc24:	6022      	str	r2, [r4, #0]
 800dc26:	2210      	movs	r2, #16
 800dc28:	e7b7      	b.n	800db9a <_printf_i+0xd2>
 800dc2a:	064d      	lsls	r5, r1, #25
 800dc2c:	bf48      	it	mi
 800dc2e:	b29b      	uxthmi	r3, r3
 800dc30:	e7ef      	b.n	800dc12 <_printf_i+0x14a>
 800dc32:	4665      	mov	r5, ip
 800dc34:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc38:	fb02 3311 	mls	r3, r2, r1, r3
 800dc3c:	5cc3      	ldrb	r3, [r0, r3]
 800dc3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dc42:	460b      	mov	r3, r1
 800dc44:	2900      	cmp	r1, #0
 800dc46:	d1f5      	bne.n	800dc34 <_printf_i+0x16c>
 800dc48:	e7b9      	b.n	800dbbe <_printf_i+0xf6>
 800dc4a:	6813      	ldr	r3, [r2, #0]
 800dc4c:	6825      	ldr	r5, [r4, #0]
 800dc4e:	1d18      	adds	r0, r3, #4
 800dc50:	6961      	ldr	r1, [r4, #20]
 800dc52:	6010      	str	r0, [r2, #0]
 800dc54:	0628      	lsls	r0, r5, #24
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	d501      	bpl.n	800dc5e <_printf_i+0x196>
 800dc5a:	6019      	str	r1, [r3, #0]
 800dc5c:	e002      	b.n	800dc64 <_printf_i+0x19c>
 800dc5e:	066a      	lsls	r2, r5, #25
 800dc60:	d5fb      	bpl.n	800dc5a <_printf_i+0x192>
 800dc62:	8019      	strh	r1, [r3, #0]
 800dc64:	2300      	movs	r3, #0
 800dc66:	4665      	mov	r5, ip
 800dc68:	6123      	str	r3, [r4, #16]
 800dc6a:	e7b9      	b.n	800dbe0 <_printf_i+0x118>
 800dc6c:	6813      	ldr	r3, [r2, #0]
 800dc6e:	1d19      	adds	r1, r3, #4
 800dc70:	6011      	str	r1, [r2, #0]
 800dc72:	681d      	ldr	r5, [r3, #0]
 800dc74:	6862      	ldr	r2, [r4, #4]
 800dc76:	2100      	movs	r1, #0
 800dc78:	4628      	mov	r0, r5
 800dc7a:	f000 fa93 	bl	800e1a4 <memchr>
 800dc7e:	b108      	cbz	r0, 800dc84 <_printf_i+0x1bc>
 800dc80:	1b40      	subs	r0, r0, r5
 800dc82:	6060      	str	r0, [r4, #4]
 800dc84:	6863      	ldr	r3, [r4, #4]
 800dc86:	6123      	str	r3, [r4, #16]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc8e:	e7a7      	b.n	800dbe0 <_printf_i+0x118>
 800dc90:	6923      	ldr	r3, [r4, #16]
 800dc92:	462a      	mov	r2, r5
 800dc94:	4639      	mov	r1, r7
 800dc96:	4630      	mov	r0, r6
 800dc98:	47c0      	blx	r8
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	d0aa      	beq.n	800dbf4 <_printf_i+0x12c>
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	079b      	lsls	r3, r3, #30
 800dca2:	d413      	bmi.n	800dccc <_printf_i+0x204>
 800dca4:	68e0      	ldr	r0, [r4, #12]
 800dca6:	9b03      	ldr	r3, [sp, #12]
 800dca8:	4298      	cmp	r0, r3
 800dcaa:	bfb8      	it	lt
 800dcac:	4618      	movlt	r0, r3
 800dcae:	e7a3      	b.n	800dbf8 <_printf_i+0x130>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	464a      	mov	r2, r9
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	47c0      	blx	r8
 800dcba:	3001      	adds	r0, #1
 800dcbc:	d09a      	beq.n	800dbf4 <_printf_i+0x12c>
 800dcbe:	3501      	adds	r5, #1
 800dcc0:	68e3      	ldr	r3, [r4, #12]
 800dcc2:	9a03      	ldr	r2, [sp, #12]
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	42ab      	cmp	r3, r5
 800dcc8:	dcf2      	bgt.n	800dcb0 <_printf_i+0x1e8>
 800dcca:	e7eb      	b.n	800dca4 <_printf_i+0x1dc>
 800dccc:	2500      	movs	r5, #0
 800dcce:	f104 0919 	add.w	r9, r4, #25
 800dcd2:	e7f5      	b.n	800dcc0 <_printf_i+0x1f8>
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1ac      	bne.n	800dc32 <_printf_i+0x16a>
 800dcd8:	7803      	ldrb	r3, [r0, #0]
 800dcda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dce2:	e76c      	b.n	800dbbe <_printf_i+0xf6>
 800dce4:	08010599 	.word	0x08010599
 800dce8:	080105aa 	.word	0x080105aa

0800dcec <_sbrk_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	2300      	movs	r3, #0
 800dcf0:	4c05      	ldr	r4, [pc, #20]	; (800dd08 <_sbrk_r+0x1c>)
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	6023      	str	r3, [r4, #0]
 800dcf8:	f7f2 fd66 	bl	80007c8 <_sbrk>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d102      	bne.n	800dd06 <_sbrk_r+0x1a>
 800dd00:	6823      	ldr	r3, [r4, #0]
 800dd02:	b103      	cbz	r3, 800dd06 <_sbrk_r+0x1a>
 800dd04:	602b      	str	r3, [r5, #0]
 800dd06:	bd38      	pop	{r3, r4, r5, pc}
 800dd08:	20008070 	.word	0x20008070

0800dd0c <__sread>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	460c      	mov	r4, r1
 800dd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd14:	f000 fa56 	bl	800e1c4 <_read_r>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	bfab      	itete	ge
 800dd1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd1e:	89a3      	ldrhlt	r3, [r4, #12]
 800dd20:	181b      	addge	r3, r3, r0
 800dd22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd26:	bfac      	ite	ge
 800dd28:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd2a:	81a3      	strhlt	r3, [r4, #12]
 800dd2c:	bd10      	pop	{r4, pc}

0800dd2e <__swrite>:
 800dd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd32:	461f      	mov	r7, r3
 800dd34:	898b      	ldrh	r3, [r1, #12]
 800dd36:	4605      	mov	r5, r0
 800dd38:	05db      	lsls	r3, r3, #23
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	4616      	mov	r6, r2
 800dd3e:	d505      	bpl.n	800dd4c <__swrite+0x1e>
 800dd40:	2302      	movs	r3, #2
 800dd42:	2200      	movs	r2, #0
 800dd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd48:	f000 f9b6 	bl	800e0b8 <_lseek_r>
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	4632      	mov	r2, r6
 800dd50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd54:	81a3      	strh	r3, [r4, #12]
 800dd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd5a:	463b      	mov	r3, r7
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd62:	f000 b869 	b.w	800de38 <_write_r>

0800dd66 <__sseek>:
 800dd66:	b510      	push	{r4, lr}
 800dd68:	460c      	mov	r4, r1
 800dd6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd6e:	f000 f9a3 	bl	800e0b8 <_lseek_r>
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	bf15      	itete	ne
 800dd78:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd82:	81a3      	strheq	r3, [r4, #12]
 800dd84:	bf18      	it	ne
 800dd86:	81a3      	strhne	r3, [r4, #12]
 800dd88:	bd10      	pop	{r4, pc}

0800dd8a <__sclose>:
 800dd8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd8e:	f000 b8d3 	b.w	800df38 <_close_r>
	...

0800dd94 <__swbuf_r>:
 800dd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd96:	460e      	mov	r6, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	b118      	cbz	r0, 800dda6 <__swbuf_r+0x12>
 800dd9e:	6983      	ldr	r3, [r0, #24]
 800dda0:	b90b      	cbnz	r3, 800dda6 <__swbuf_r+0x12>
 800dda2:	f7ff fba5 	bl	800d4f0 <__sinit>
 800dda6:	4b21      	ldr	r3, [pc, #132]	; (800de2c <__swbuf_r+0x98>)
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	d12a      	bne.n	800de02 <__swbuf_r+0x6e>
 800ddac:	686c      	ldr	r4, [r5, #4]
 800ddae:	69a3      	ldr	r3, [r4, #24]
 800ddb0:	60a3      	str	r3, [r4, #8]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	071a      	lsls	r2, r3, #28
 800ddb6:	d52e      	bpl.n	800de16 <__swbuf_r+0x82>
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	b363      	cbz	r3, 800de16 <__swbuf_r+0x82>
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	6820      	ldr	r0, [r4, #0]
 800ddc0:	b2f6      	uxtb	r6, r6
 800ddc2:	1ac0      	subs	r0, r0, r3
 800ddc4:	6963      	ldr	r3, [r4, #20]
 800ddc6:	4637      	mov	r7, r6
 800ddc8:	4283      	cmp	r3, r0
 800ddca:	dc04      	bgt.n	800ddd6 <__swbuf_r+0x42>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 f948 	bl	800e064 <_fflush_r>
 800ddd4:	bb28      	cbnz	r0, 800de22 <__swbuf_r+0x8e>
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	3001      	adds	r0, #1
 800ddda:	3b01      	subs	r3, #1
 800dddc:	60a3      	str	r3, [r4, #8]
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	1c5a      	adds	r2, r3, #1
 800dde2:	6022      	str	r2, [r4, #0]
 800dde4:	701e      	strb	r6, [r3, #0]
 800dde6:	6963      	ldr	r3, [r4, #20]
 800dde8:	4283      	cmp	r3, r0
 800ddea:	d004      	beq.n	800ddf6 <__swbuf_r+0x62>
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	07db      	lsls	r3, r3, #31
 800ddf0:	d519      	bpl.n	800de26 <__swbuf_r+0x92>
 800ddf2:	2e0a      	cmp	r6, #10
 800ddf4:	d117      	bne.n	800de26 <__swbuf_r+0x92>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 f933 	bl	800e064 <_fflush_r>
 800ddfe:	b190      	cbz	r0, 800de26 <__swbuf_r+0x92>
 800de00:	e00f      	b.n	800de22 <__swbuf_r+0x8e>
 800de02:	4b0b      	ldr	r3, [pc, #44]	; (800de30 <__swbuf_r+0x9c>)
 800de04:	429c      	cmp	r4, r3
 800de06:	d101      	bne.n	800de0c <__swbuf_r+0x78>
 800de08:	68ac      	ldr	r4, [r5, #8]
 800de0a:	e7d0      	b.n	800ddae <__swbuf_r+0x1a>
 800de0c:	4b09      	ldr	r3, [pc, #36]	; (800de34 <__swbuf_r+0xa0>)
 800de0e:	429c      	cmp	r4, r3
 800de10:	bf08      	it	eq
 800de12:	68ec      	ldreq	r4, [r5, #12]
 800de14:	e7cb      	b.n	800ddae <__swbuf_r+0x1a>
 800de16:	4621      	mov	r1, r4
 800de18:	4628      	mov	r0, r5
 800de1a:	f000 f81f 	bl	800de5c <__swsetup_r>
 800de1e:	2800      	cmp	r0, #0
 800de20:	d0cc      	beq.n	800ddbc <__swbuf_r+0x28>
 800de22:	f04f 37ff 	mov.w	r7, #4294967295
 800de26:	4638      	mov	r0, r7
 800de28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de2a:	bf00      	nop
 800de2c:	08010548 	.word	0x08010548
 800de30:	08010568 	.word	0x08010568
 800de34:	08010528 	.word	0x08010528

0800de38 <_write_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	4605      	mov	r5, r0
 800de3c:	4608      	mov	r0, r1
 800de3e:	4611      	mov	r1, r2
 800de40:	2200      	movs	r2, #0
 800de42:	4c05      	ldr	r4, [pc, #20]	; (800de58 <_write_r+0x20>)
 800de44:	6022      	str	r2, [r4, #0]
 800de46:	461a      	mov	r2, r3
 800de48:	f7f2 fc71 	bl	800072e <_write>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d102      	bne.n	800de56 <_write_r+0x1e>
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	b103      	cbz	r3, 800de56 <_write_r+0x1e>
 800de54:	602b      	str	r3, [r5, #0]
 800de56:	bd38      	pop	{r3, r4, r5, pc}
 800de58:	20008070 	.word	0x20008070

0800de5c <__swsetup_r>:
 800de5c:	4b32      	ldr	r3, [pc, #200]	; (800df28 <__swsetup_r+0xcc>)
 800de5e:	b570      	push	{r4, r5, r6, lr}
 800de60:	681d      	ldr	r5, [r3, #0]
 800de62:	4606      	mov	r6, r0
 800de64:	460c      	mov	r4, r1
 800de66:	b125      	cbz	r5, 800de72 <__swsetup_r+0x16>
 800de68:	69ab      	ldr	r3, [r5, #24]
 800de6a:	b913      	cbnz	r3, 800de72 <__swsetup_r+0x16>
 800de6c:	4628      	mov	r0, r5
 800de6e:	f7ff fb3f 	bl	800d4f0 <__sinit>
 800de72:	4b2e      	ldr	r3, [pc, #184]	; (800df2c <__swsetup_r+0xd0>)
 800de74:	429c      	cmp	r4, r3
 800de76:	d10f      	bne.n	800de98 <__swsetup_r+0x3c>
 800de78:	686c      	ldr	r4, [r5, #4]
 800de7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de7e:	b29a      	uxth	r2, r3
 800de80:	0715      	lsls	r5, r2, #28
 800de82:	d42c      	bmi.n	800dede <__swsetup_r+0x82>
 800de84:	06d0      	lsls	r0, r2, #27
 800de86:	d411      	bmi.n	800deac <__swsetup_r+0x50>
 800de88:	2209      	movs	r2, #9
 800de8a:	6032      	str	r2, [r6, #0]
 800de8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de90:	81a3      	strh	r3, [r4, #12]
 800de92:	f04f 30ff 	mov.w	r0, #4294967295
 800de96:	e03e      	b.n	800df16 <__swsetup_r+0xba>
 800de98:	4b25      	ldr	r3, [pc, #148]	; (800df30 <__swsetup_r+0xd4>)
 800de9a:	429c      	cmp	r4, r3
 800de9c:	d101      	bne.n	800dea2 <__swsetup_r+0x46>
 800de9e:	68ac      	ldr	r4, [r5, #8]
 800dea0:	e7eb      	b.n	800de7a <__swsetup_r+0x1e>
 800dea2:	4b24      	ldr	r3, [pc, #144]	; (800df34 <__swsetup_r+0xd8>)
 800dea4:	429c      	cmp	r4, r3
 800dea6:	bf08      	it	eq
 800dea8:	68ec      	ldreq	r4, [r5, #12]
 800deaa:	e7e6      	b.n	800de7a <__swsetup_r+0x1e>
 800deac:	0751      	lsls	r1, r2, #29
 800deae:	d512      	bpl.n	800ded6 <__swsetup_r+0x7a>
 800deb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800deb2:	b141      	cbz	r1, 800dec6 <__swsetup_r+0x6a>
 800deb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800deb8:	4299      	cmp	r1, r3
 800deba:	d002      	beq.n	800dec2 <__swsetup_r+0x66>
 800debc:	4630      	mov	r0, r6
 800debe:	f7ff fba9 	bl	800d614 <_free_r>
 800dec2:	2300      	movs	r3, #0
 800dec4:	6363      	str	r3, [r4, #52]	; 0x34
 800dec6:	89a3      	ldrh	r3, [r4, #12]
 800dec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800decc:	81a3      	strh	r3, [r4, #12]
 800dece:	2300      	movs	r3, #0
 800ded0:	6063      	str	r3, [r4, #4]
 800ded2:	6923      	ldr	r3, [r4, #16]
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	f043 0308 	orr.w	r3, r3, #8
 800dedc:	81a3      	strh	r3, [r4, #12]
 800dede:	6923      	ldr	r3, [r4, #16]
 800dee0:	b94b      	cbnz	r3, 800def6 <__swsetup_r+0x9a>
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deec:	d003      	beq.n	800def6 <__swsetup_r+0x9a>
 800deee:	4621      	mov	r1, r4
 800def0:	4630      	mov	r0, r6
 800def2:	f000 f917 	bl	800e124 <__smakebuf_r>
 800def6:	89a2      	ldrh	r2, [r4, #12]
 800def8:	f012 0301 	ands.w	r3, r2, #1
 800defc:	d00c      	beq.n	800df18 <__swsetup_r+0xbc>
 800defe:	2300      	movs	r3, #0
 800df00:	60a3      	str	r3, [r4, #8]
 800df02:	6963      	ldr	r3, [r4, #20]
 800df04:	425b      	negs	r3, r3
 800df06:	61a3      	str	r3, [r4, #24]
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	b953      	cbnz	r3, 800df22 <__swsetup_r+0xc6>
 800df0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800df14:	d1ba      	bne.n	800de8c <__swsetup_r+0x30>
 800df16:	bd70      	pop	{r4, r5, r6, pc}
 800df18:	0792      	lsls	r2, r2, #30
 800df1a:	bf58      	it	pl
 800df1c:	6963      	ldrpl	r3, [r4, #20]
 800df1e:	60a3      	str	r3, [r4, #8]
 800df20:	e7f2      	b.n	800df08 <__swsetup_r+0xac>
 800df22:	2000      	movs	r0, #0
 800df24:	e7f7      	b.n	800df16 <__swsetup_r+0xba>
 800df26:	bf00      	nop
 800df28:	20000018 	.word	0x20000018
 800df2c:	08010548 	.word	0x08010548
 800df30:	08010568 	.word	0x08010568
 800df34:	08010528 	.word	0x08010528

0800df38 <_close_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	2300      	movs	r3, #0
 800df3c:	4c05      	ldr	r4, [pc, #20]	; (800df54 <_close_r+0x1c>)
 800df3e:	4605      	mov	r5, r0
 800df40:	4608      	mov	r0, r1
 800df42:	6023      	str	r3, [r4, #0]
 800df44:	f7f2 fc0f 	bl	8000766 <_close>
 800df48:	1c43      	adds	r3, r0, #1
 800df4a:	d102      	bne.n	800df52 <_close_r+0x1a>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	b103      	cbz	r3, 800df52 <_close_r+0x1a>
 800df50:	602b      	str	r3, [r5, #0]
 800df52:	bd38      	pop	{r3, r4, r5, pc}
 800df54:	20008070 	.word	0x20008070

0800df58 <__sflush_r>:
 800df58:	898a      	ldrh	r2, [r1, #12]
 800df5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5e:	4605      	mov	r5, r0
 800df60:	0710      	lsls	r0, r2, #28
 800df62:	460c      	mov	r4, r1
 800df64:	d458      	bmi.n	800e018 <__sflush_r+0xc0>
 800df66:	684b      	ldr	r3, [r1, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	dc05      	bgt.n	800df78 <__sflush_r+0x20>
 800df6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df6e:	2b00      	cmp	r3, #0
 800df70:	dc02      	bgt.n	800df78 <__sflush_r+0x20>
 800df72:	2000      	movs	r0, #0
 800df74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df7a:	2e00      	cmp	r6, #0
 800df7c:	d0f9      	beq.n	800df72 <__sflush_r+0x1a>
 800df7e:	2300      	movs	r3, #0
 800df80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df84:	682f      	ldr	r7, [r5, #0]
 800df86:	6a21      	ldr	r1, [r4, #32]
 800df88:	602b      	str	r3, [r5, #0]
 800df8a:	d032      	beq.n	800dff2 <__sflush_r+0x9a>
 800df8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	075a      	lsls	r2, r3, #29
 800df92:	d505      	bpl.n	800dfa0 <__sflush_r+0x48>
 800df94:	6863      	ldr	r3, [r4, #4]
 800df96:	1ac0      	subs	r0, r0, r3
 800df98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df9a:	b10b      	cbz	r3, 800dfa0 <__sflush_r+0x48>
 800df9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df9e:	1ac0      	subs	r0, r0, r3
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfa6:	6a21      	ldr	r1, [r4, #32]
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	47b0      	blx	r6
 800dfac:	1c43      	adds	r3, r0, #1
 800dfae:	89a3      	ldrh	r3, [r4, #12]
 800dfb0:	d106      	bne.n	800dfc0 <__sflush_r+0x68>
 800dfb2:	6829      	ldr	r1, [r5, #0]
 800dfb4:	291d      	cmp	r1, #29
 800dfb6:	d848      	bhi.n	800e04a <__sflush_r+0xf2>
 800dfb8:	4a29      	ldr	r2, [pc, #164]	; (800e060 <__sflush_r+0x108>)
 800dfba:	40ca      	lsrs	r2, r1
 800dfbc:	07d6      	lsls	r6, r2, #31
 800dfbe:	d544      	bpl.n	800e04a <__sflush_r+0xf2>
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	6062      	str	r2, [r4, #4]
 800dfc4:	6922      	ldr	r2, [r4, #16]
 800dfc6:	04d9      	lsls	r1, r3, #19
 800dfc8:	6022      	str	r2, [r4, #0]
 800dfca:	d504      	bpl.n	800dfd6 <__sflush_r+0x7e>
 800dfcc:	1c42      	adds	r2, r0, #1
 800dfce:	d101      	bne.n	800dfd4 <__sflush_r+0x7c>
 800dfd0:	682b      	ldr	r3, [r5, #0]
 800dfd2:	b903      	cbnz	r3, 800dfd6 <__sflush_r+0x7e>
 800dfd4:	6560      	str	r0, [r4, #84]	; 0x54
 800dfd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfd8:	602f      	str	r7, [r5, #0]
 800dfda:	2900      	cmp	r1, #0
 800dfdc:	d0c9      	beq.n	800df72 <__sflush_r+0x1a>
 800dfde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfe2:	4299      	cmp	r1, r3
 800dfe4:	d002      	beq.n	800dfec <__sflush_r+0x94>
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f7ff fb14 	bl	800d614 <_free_r>
 800dfec:	2000      	movs	r0, #0
 800dfee:	6360      	str	r0, [r4, #52]	; 0x34
 800dff0:	e7c0      	b.n	800df74 <__sflush_r+0x1c>
 800dff2:	2301      	movs	r3, #1
 800dff4:	4628      	mov	r0, r5
 800dff6:	47b0      	blx	r6
 800dff8:	1c41      	adds	r1, r0, #1
 800dffa:	d1c8      	bne.n	800df8e <__sflush_r+0x36>
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d0c5      	beq.n	800df8e <__sflush_r+0x36>
 800e002:	2b1d      	cmp	r3, #29
 800e004:	d001      	beq.n	800e00a <__sflush_r+0xb2>
 800e006:	2b16      	cmp	r3, #22
 800e008:	d101      	bne.n	800e00e <__sflush_r+0xb6>
 800e00a:	602f      	str	r7, [r5, #0]
 800e00c:	e7b1      	b.n	800df72 <__sflush_r+0x1a>
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e014:	81a3      	strh	r3, [r4, #12]
 800e016:	e7ad      	b.n	800df74 <__sflush_r+0x1c>
 800e018:	690f      	ldr	r7, [r1, #16]
 800e01a:	2f00      	cmp	r7, #0
 800e01c:	d0a9      	beq.n	800df72 <__sflush_r+0x1a>
 800e01e:	0793      	lsls	r3, r2, #30
 800e020:	bf18      	it	ne
 800e022:	2300      	movne	r3, #0
 800e024:	680e      	ldr	r6, [r1, #0]
 800e026:	bf08      	it	eq
 800e028:	694b      	ldreq	r3, [r1, #20]
 800e02a:	eba6 0807 	sub.w	r8, r6, r7
 800e02e:	600f      	str	r7, [r1, #0]
 800e030:	608b      	str	r3, [r1, #8]
 800e032:	f1b8 0f00 	cmp.w	r8, #0
 800e036:	dd9c      	ble.n	800df72 <__sflush_r+0x1a>
 800e038:	4643      	mov	r3, r8
 800e03a:	463a      	mov	r2, r7
 800e03c:	6a21      	ldr	r1, [r4, #32]
 800e03e:	4628      	mov	r0, r5
 800e040:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e042:	47b0      	blx	r6
 800e044:	2800      	cmp	r0, #0
 800e046:	dc06      	bgt.n	800e056 <__sflush_r+0xfe>
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e04e:	81a3      	strh	r3, [r4, #12]
 800e050:	f04f 30ff 	mov.w	r0, #4294967295
 800e054:	e78e      	b.n	800df74 <__sflush_r+0x1c>
 800e056:	4407      	add	r7, r0
 800e058:	eba8 0800 	sub.w	r8, r8, r0
 800e05c:	e7e9      	b.n	800e032 <__sflush_r+0xda>
 800e05e:	bf00      	nop
 800e060:	20400001 	.word	0x20400001

0800e064 <_fflush_r>:
 800e064:	b538      	push	{r3, r4, r5, lr}
 800e066:	690b      	ldr	r3, [r1, #16]
 800e068:	4605      	mov	r5, r0
 800e06a:	460c      	mov	r4, r1
 800e06c:	b1db      	cbz	r3, 800e0a6 <_fflush_r+0x42>
 800e06e:	b118      	cbz	r0, 800e078 <_fflush_r+0x14>
 800e070:	6983      	ldr	r3, [r0, #24]
 800e072:	b90b      	cbnz	r3, 800e078 <_fflush_r+0x14>
 800e074:	f7ff fa3c 	bl	800d4f0 <__sinit>
 800e078:	4b0c      	ldr	r3, [pc, #48]	; (800e0ac <_fflush_r+0x48>)
 800e07a:	429c      	cmp	r4, r3
 800e07c:	d109      	bne.n	800e092 <_fflush_r+0x2e>
 800e07e:	686c      	ldr	r4, [r5, #4]
 800e080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e084:	b17b      	cbz	r3, 800e0a6 <_fflush_r+0x42>
 800e086:	4621      	mov	r1, r4
 800e088:	4628      	mov	r0, r5
 800e08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e08e:	f7ff bf63 	b.w	800df58 <__sflush_r>
 800e092:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <_fflush_r+0x4c>)
 800e094:	429c      	cmp	r4, r3
 800e096:	d101      	bne.n	800e09c <_fflush_r+0x38>
 800e098:	68ac      	ldr	r4, [r5, #8]
 800e09a:	e7f1      	b.n	800e080 <_fflush_r+0x1c>
 800e09c:	4b05      	ldr	r3, [pc, #20]	; (800e0b4 <_fflush_r+0x50>)
 800e09e:	429c      	cmp	r4, r3
 800e0a0:	bf08      	it	eq
 800e0a2:	68ec      	ldreq	r4, [r5, #12]
 800e0a4:	e7ec      	b.n	800e080 <_fflush_r+0x1c>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	bd38      	pop	{r3, r4, r5, pc}
 800e0aa:	bf00      	nop
 800e0ac:	08010548 	.word	0x08010548
 800e0b0:	08010568 	.word	0x08010568
 800e0b4:	08010528 	.word	0x08010528

0800e0b8 <_lseek_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	4608      	mov	r0, r1
 800e0be:	4611      	mov	r1, r2
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4c05      	ldr	r4, [pc, #20]	; (800e0d8 <_lseek_r+0x20>)
 800e0c4:	6022      	str	r2, [r4, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	f7f2 fb71 	bl	80007ae <_lseek>
 800e0cc:	1c43      	adds	r3, r0, #1
 800e0ce:	d102      	bne.n	800e0d6 <_lseek_r+0x1e>
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	b103      	cbz	r3, 800e0d6 <_lseek_r+0x1e>
 800e0d4:	602b      	str	r3, [r5, #0]
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
 800e0d8:	20008070 	.word	0x20008070

0800e0dc <__swhatbuf_r>:
 800e0dc:	b570      	push	{r4, r5, r6, lr}
 800e0de:	460e      	mov	r6, r1
 800e0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e4:	b096      	sub	sp, #88	; 0x58
 800e0e6:	2900      	cmp	r1, #0
 800e0e8:	4614      	mov	r4, r2
 800e0ea:	461d      	mov	r5, r3
 800e0ec:	da07      	bge.n	800e0fe <__swhatbuf_r+0x22>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	602b      	str	r3, [r5, #0]
 800e0f2:	89b3      	ldrh	r3, [r6, #12]
 800e0f4:	061a      	lsls	r2, r3, #24
 800e0f6:	d410      	bmi.n	800e11a <__swhatbuf_r+0x3e>
 800e0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0fc:	e00e      	b.n	800e11c <__swhatbuf_r+0x40>
 800e0fe:	466a      	mov	r2, sp
 800e100:	f000 f872 	bl	800e1e8 <_fstat_r>
 800e104:	2800      	cmp	r0, #0
 800e106:	dbf2      	blt.n	800e0ee <__swhatbuf_r+0x12>
 800e108:	9a01      	ldr	r2, [sp, #4]
 800e10a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e10e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e112:	425a      	negs	r2, r3
 800e114:	415a      	adcs	r2, r3
 800e116:	602a      	str	r2, [r5, #0]
 800e118:	e7ee      	b.n	800e0f8 <__swhatbuf_r+0x1c>
 800e11a:	2340      	movs	r3, #64	; 0x40
 800e11c:	2000      	movs	r0, #0
 800e11e:	6023      	str	r3, [r4, #0]
 800e120:	b016      	add	sp, #88	; 0x58
 800e122:	bd70      	pop	{r4, r5, r6, pc}

0800e124 <__smakebuf_r>:
 800e124:	898b      	ldrh	r3, [r1, #12]
 800e126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e128:	079d      	lsls	r5, r3, #30
 800e12a:	4606      	mov	r6, r0
 800e12c:	460c      	mov	r4, r1
 800e12e:	d507      	bpl.n	800e140 <__smakebuf_r+0x1c>
 800e130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	2301      	movs	r3, #1
 800e13a:	6163      	str	r3, [r4, #20]
 800e13c:	b002      	add	sp, #8
 800e13e:	bd70      	pop	{r4, r5, r6, pc}
 800e140:	ab01      	add	r3, sp, #4
 800e142:	466a      	mov	r2, sp
 800e144:	f7ff ffca 	bl	800e0dc <__swhatbuf_r>
 800e148:	9900      	ldr	r1, [sp, #0]
 800e14a:	4605      	mov	r5, r0
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7ff faad 	bl	800d6ac <_malloc_r>
 800e152:	b948      	cbnz	r0, 800e168 <__smakebuf_r+0x44>
 800e154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e158:	059a      	lsls	r2, r3, #22
 800e15a:	d4ef      	bmi.n	800e13c <__smakebuf_r+0x18>
 800e15c:	f023 0303 	bic.w	r3, r3, #3
 800e160:	f043 0302 	orr.w	r3, r3, #2
 800e164:	81a3      	strh	r3, [r4, #12]
 800e166:	e7e3      	b.n	800e130 <__smakebuf_r+0xc>
 800e168:	4b0d      	ldr	r3, [pc, #52]	; (800e1a0 <__smakebuf_r+0x7c>)
 800e16a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	6020      	str	r0, [r4, #0]
 800e170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e174:	81a3      	strh	r3, [r4, #12]
 800e176:	9b00      	ldr	r3, [sp, #0]
 800e178:	6120      	str	r0, [r4, #16]
 800e17a:	6163      	str	r3, [r4, #20]
 800e17c:	9b01      	ldr	r3, [sp, #4]
 800e17e:	b15b      	cbz	r3, 800e198 <__smakebuf_r+0x74>
 800e180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e184:	4630      	mov	r0, r6
 800e186:	f000 f841 	bl	800e20c <_isatty_r>
 800e18a:	b128      	cbz	r0, 800e198 <__smakebuf_r+0x74>
 800e18c:	89a3      	ldrh	r3, [r4, #12]
 800e18e:	f023 0303 	bic.w	r3, r3, #3
 800e192:	f043 0301 	orr.w	r3, r3, #1
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	431d      	orrs	r5, r3
 800e19c:	81a5      	strh	r5, [r4, #12]
 800e19e:	e7cd      	b.n	800e13c <__smakebuf_r+0x18>
 800e1a0:	0800d4b9 	.word	0x0800d4b9

0800e1a4 <memchr>:
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	b2c9      	uxtb	r1, r1
 800e1a8:	4402      	add	r2, r0
 800e1aa:	4290      	cmp	r0, r2
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	d101      	bne.n	800e1b4 <memchr+0x10>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e003      	b.n	800e1bc <memchr+0x18>
 800e1b4:	781c      	ldrb	r4, [r3, #0]
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	428c      	cmp	r4, r1
 800e1ba:	d1f6      	bne.n	800e1aa <memchr+0x6>
 800e1bc:	4618      	mov	r0, r3
 800e1be:	bd10      	pop	{r4, pc}

0800e1c0 <__malloc_lock>:
 800e1c0:	4770      	bx	lr

0800e1c2 <__malloc_unlock>:
 800e1c2:	4770      	bx	lr

0800e1c4 <_read_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	4c05      	ldr	r4, [pc, #20]	; (800e1e4 <_read_r+0x20>)
 800e1d0:	6022      	str	r2, [r4, #0]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f7f2 fa8e 	bl	80006f4 <_read>
 800e1d8:	1c43      	adds	r3, r0, #1
 800e1da:	d102      	bne.n	800e1e2 <_read_r+0x1e>
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	b103      	cbz	r3, 800e1e2 <_read_r+0x1e>
 800e1e0:	602b      	str	r3, [r5, #0]
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}
 800e1e4:	20008070 	.word	0x20008070

0800e1e8 <_fstat_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4c06      	ldr	r4, [pc, #24]	; (800e208 <_fstat_r+0x20>)
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	f7f2 fac1 	bl	800077c <_fstat>
 800e1fa:	1c43      	adds	r3, r0, #1
 800e1fc:	d102      	bne.n	800e204 <_fstat_r+0x1c>
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	b103      	cbz	r3, 800e204 <_fstat_r+0x1c>
 800e202:	602b      	str	r3, [r5, #0]
 800e204:	bd38      	pop	{r3, r4, r5, pc}
 800e206:	bf00      	nop
 800e208:	20008070 	.word	0x20008070

0800e20c <_isatty_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	2300      	movs	r3, #0
 800e210:	4c05      	ldr	r4, [pc, #20]	; (800e228 <_isatty_r+0x1c>)
 800e212:	4605      	mov	r5, r0
 800e214:	4608      	mov	r0, r1
 800e216:	6023      	str	r3, [r4, #0]
 800e218:	f7f2 fabf 	bl	800079a <_isatty>
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	d102      	bne.n	800e226 <_isatty_r+0x1a>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	b103      	cbz	r3, 800e226 <_isatty_r+0x1a>
 800e224:	602b      	str	r3, [r5, #0]
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	20008070 	.word	0x20008070

0800e22c <_init>:
 800e22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22e:	bf00      	nop
 800e230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e232:	bc08      	pop	{r3}
 800e234:	469e      	mov	lr, r3
 800e236:	4770      	bx	lr

0800e238 <_fini>:
 800e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23a:	bf00      	nop
 800e23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e23e:	bc08      	pop	{r3}
 800e240:	469e      	mov	lr, r3
 800e242:	4770      	bx	lr
