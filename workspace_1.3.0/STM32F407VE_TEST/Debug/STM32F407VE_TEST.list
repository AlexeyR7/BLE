
STM32F407VE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800713c  0800713c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007144  08007144  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800714c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  200001e4  08007330  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c3c  08007330  00020c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015895  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031f1  00000000  00000000  00035aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00038ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc8  00000000  00000000  00039ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000558b  00000000  00000000  0003a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eaaa  00000000  00000000  0003fd33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5dbe  00000000  00000000  0004e7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011459b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  00114618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070a4 	.word	0x080070a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080070a4 	.word	0x080070a4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b097      	sub	sp, #92	; 0x5c
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fcbd 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f897 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f947 	bl	8000778 <MX_GPIO_Init>
  MX_CRC_Init();
 80004ea:	f000 f8fb 	bl	80006e4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f005 ffb9 	bl	8006464 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80004f2:	f000 f90b 	bl	800070c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //BLE_Programmer_main();
  W25qxx_Init();
 80004f6:	f000 fb27 	bl	8000b48 <W25qxx_Init>
  sprintf(str_tx,"USB Transmit\r\n");
 80004fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004fe:	4a3e      	ldr	r2, [pc, #248]	; (80005f8 <main+0x120>)
 8000500:	461c      	mov	r4, r3
 8000502:	4613      	mov	r3, r2
 8000504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000506:	c407      	stmia	r4!, {r0, r1, r2}
 8000508:	8023      	strh	r3, [r4, #0]
 800050a:	3402      	adds	r4, #2
 800050c:	0c1b      	lsrs	r3, r3, #16
 800050e:	7023      	strb	r3, [r4, #0]

  //W25qxx_EraseSector(0);
  char buf[64];
  W25qxx_ReadByte(&buf[0], 25);
 8000510:	463b      	mov	r3, r7
 8000512:	2119      	movs	r1, #25
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fc27 	bl	8000d68 <W25qxx_ReadByte>
  W25qxx_ReadByte(&buf[1], 26);
 800051a:	463b      	mov	r3, r7
 800051c:	3301      	adds	r3, #1
 800051e:	211a      	movs	r1, #26
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fc21 	bl	8000d68 <W25qxx_ReadByte>
  W25qxx_ReadByte(&buf[2], 27);
 8000526:	463b      	mov	r3, r7
 8000528:	3302      	adds	r3, #2
 800052a:	211b      	movs	r1, #27
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc1b 	bl	8000d68 <W25qxx_ReadByte>
  W25qxx_ReadByte(&buf[3], 28);
 8000532:	463b      	mov	r3, r7
 8000534:	3303      	adds	r3, #3
 8000536:	211c      	movs	r1, #28
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fc15 	bl	8000d68 <W25qxx_ReadByte>
  W25qxx_ReadByte(&buf[4], 29);
 800053e:	463b      	mov	r3, r7
 8000540:	3304      	adds	r3, #4
 8000542:	211d      	movs	r1, #29
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fc0f 	bl	8000d68 <W25qxx_ReadByte>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  CDC_Transmit_FS((unsigned char*)"FLASH:", strlen("FLASH:"));
 800054a:	2106      	movs	r1, #6
 800054c:	482b      	ldr	r0, [pc, #172]	; (80005fc <main+0x124>)
 800054e:	f006 f855 	bl	80065fc <CDC_Transmit_FS>
	    HAL_Delay(500);
 8000552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000556:	f000 fcf3 	bl	8000f40 <HAL_Delay>
	    CDC_Transmit_FS((unsigned char*) buf, 5);
 800055a:	463b      	mov	r3, r7
 800055c:	2105      	movs	r1, #5
 800055e:	4618      	mov	r0, r3
 8000560:	f006 f84c 	bl	80065fc <CDC_Transmit_FS>
	    HAL_Delay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f000 fcea 	bl	8000f40 <HAL_Delay>
	    CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n"));
 800056c:	2102      	movs	r1, #2
 800056e:	4824      	ldr	r0, [pc, #144]	; (8000600 <main+0x128>)
 8000570:	f006 f844 	bl	80065fc <CDC_Transmit_FS>
			HAL_Delay(200);
			CDC_Transmit_FS((uint8_t*)"Init Done\n", 10);
			HAL_Delay(200);
	  }*/

	  if(str_rx_LEN>0){
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <main+0x12c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d019      	beq.n	80005b0 <main+0xd8>
		  CDC_Transmit_FS((unsigned char*)"USB Recive:", strlen("USB Recive:"));
 800057c:	210b      	movs	r1, #11
 800057e:	4822      	ldr	r0, [pc, #136]	; (8000608 <main+0x130>)
 8000580:	f006 f83c 	bl	80065fc <CDC_Transmit_FS>
		  HAL_Delay(500);
 8000584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000588:	f000 fcda 	bl	8000f40 <HAL_Delay>
		  CDC_Transmit_FS((unsigned char*)str_rx_BUF, str_rx_LEN);
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <main+0x12c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	b29b      	uxth	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	481d      	ldr	r0, [pc, #116]	; (800060c <main+0x134>)
 8000596:	f006 f831 	bl	80065fc <CDC_Transmit_FS>
		  HAL_Delay(500);
 800059a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059e:	f000 fccf 	bl	8000f40 <HAL_Delay>
		  CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n"));
 80005a2:	2102      	movs	r1, #2
 80005a4:	4816      	ldr	r0, [pc, #88]	; (8000600 <main+0x128>)
 80005a6:	f006 f829 	bl	80065fc <CDC_Transmit_FS>
		  str_rx_LEN=0;
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0x12c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(500);
 80005b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b4:	f000 fcc4 	bl	8000f40 <HAL_Delay>
	  CDC_Transmit_FS((unsigned char*)str_tx, strlen(str_tx));
 80005b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe03 	bl	80001c8 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f006 f815 	bl	80065fc <CDC_Transmit_FS>
	  HAL_Delay(500);
 80005d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d6:	f000 fcb3 	bl	8000f40 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <main+0x138>)
 80005e0:	f000 ff98 	bl	8001514 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80005e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e8:	f000 fcaa 	bl	8000f40 <HAL_Delay>
		 HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x138>)
 80005f2:	f000 ff8f 	bl	8001514 <HAL_GPIO_WritePin>
	  CDC_Transmit_FS((unsigned char*)"FLASH:", strlen("FLASH:"));
 80005f6:	e7a8      	b.n	800054a <main+0x72>
 80005f8:	080070bc 	.word	0x080070bc
 80005fc:	080070cc 	.word	0x080070cc
 8000600:	080070d4 	.word	0x080070d4
 8000604:	200005ac 	.word	0x200005ac
 8000608:	080070d8 	.word	0x080070d8
 800060c:	2000056c 	.word	0x2000056c
 8000610:	40020000 	.word	0x40020000

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fc66 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a26      	ldr	r2, [pc, #152]	; (80006dc <SystemClock_Config+0xc8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <SystemClock_Config+0xc8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemClock_Config+0xcc>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f8d7 	bl	800284c <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f8f0 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fb31 	bl	8002d2c <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d0:	f000 f8da 	bl	8000888 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_CRC_Init+0x20>)
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <MX_CRC_Init+0x24>)
 80006ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_CRC_Init+0x20>)
 80006f0:	f000 fd59 	bl	80011a6 <HAL_CRC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006fa:	f000 f8c5 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000210 	.word	0x20000210
 8000708:	40023000 	.word	0x40023000

0800070c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_SPI1_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_SPI1_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI1_Init+0x64>)
 8000758:	220a      	movs	r2, #10
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_SPI1_Init+0x64>)
 800075e:	f002 fcaf 	bl	80030c0 <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f88e 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000218 	.word	0x20000218
 8000774:	40013000 	.word	0x40013000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b3a      	ldr	r3, [pc, #232]	; (800087c <MX_GPIO_Init+0x104>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a39      	ldr	r2, [pc, #228]	; (800087c <MX_GPIO_Init+0x104>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b37      	ldr	r3, [pc, #220]	; (800087c <MX_GPIO_Init+0x104>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_GPIO_Init+0x104>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a32      	ldr	r2, [pc, #200]	; (800087c <MX_GPIO_Init+0x104>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_GPIO_Init+0x104>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_GPIO_Init+0x104>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2b      	ldr	r2, [pc, #172]	; (800087c <MX_GPIO_Init+0x104>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_GPIO_Init+0x104>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_GPIO_Init+0x104>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <MX_GPIO_Init+0x104>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_GPIO_Init+0x104>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	21c0      	movs	r1, #192	; 0xc0
 8000802:	481f      	ldr	r0, [pc, #124]	; (8000880 <MX_GPIO_Init+0x108>)
 8000804:	f000 fe86 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <MX_GPIO_Init+0x10c>)
 800080e:	f000 fe81 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_RST_Pin|BLE_DD_Pin|BLE_DC_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000818:	481a      	ldr	r0, [pc, #104]	; (8000884 <MX_GPIO_Init+0x10c>)
 800081a:	f000 fe7b 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin|LED_D3_Pin;
 800081e:	23c0      	movs	r3, #192	; 0xc0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0x108>)
 8000836:	f000 fcd3 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0x10c>)
 8000852:	f000 fcc5 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_RST_Pin BLE_DD_Pin BLE_DC_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin|BLE_DD_Pin|BLE_DC_Pin;
 8000856:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0x10c>)
 8000870:	f000 fcb6 	bl	80011e0 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020400 	.word	0x40020400

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <HAL_CRC_MspInit+0x3c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10d      	bne.n	8000916 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_CRC_MspInit+0x40>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_CRC_MspInit+0x40>)
 8000904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <HAL_CRC_MspInit+0x40>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023000 	.word	0x40023000
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_SPI_MspInit+0x84>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d12b      	bne.n	80009a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_SPI_MspInit+0x88>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_SPI_MspInit+0x88>)
 8000958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_SPI_MspInit+0x88>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_SPI_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_SPI_MspInit+0x88>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_SPI_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000986:	2338      	movs	r3, #56	; 0x38
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000996:	2305      	movs	r3, #5
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_SPI_MspInit+0x8c>)
 80009a2:	f000 fc1d 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40013000 	.word	0x40013000
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 fa76 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <OTG_FS_IRQHandler+0x10>)
 8000a1e:	f000 fee2 	bl	80017e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000830 	.word	0x20000830

08000a2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x50>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x16>
		heap_end = &end;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <_sbrk+0x50>)
 8000a3e:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <_sbrk+0x54>)
 8000a40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <_sbrk+0x50>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <_sbrk+0x50>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	466a      	mov	r2, sp
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d907      	bls.n	8000a66 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a56:	f006 fa13 	bl	8006e80 <__errno>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	e006      	b.n	8000a74 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <_sbrk+0x50>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <_sbrk+0x50>)
 8000a70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000200 	.word	0x20000200
 8000a80:	20000c40 	.word	0x20000c40

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <SystemInit+0x28>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <SystemInit+0x28>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SystemInit+0x28>)
 8000a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 8000aba:	f107 020f 	add.w	r2, r7, #15
 8000abe:	1df9      	adds	r1, r7, #7
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <W25qxx_Spi+0x28>)
 8000ac8:	f002 fb5e 	bl	8003188 <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000218 	.word	0x20000218

08000adc <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8000af2:	2200      	movs	r2, #0
 8000af4:	2101      	movs	r1, #1
 8000af6:	4813      	ldr	r0, [pc, #76]	; (8000b44 <W25qxx_ReadID+0x68>)
 8000af8:	f000 fd0c 	bl	8001514 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 8000afc:	209f      	movs	r0, #159	; 0x9f
 8000afe:	f7ff ffd7 	bl	8000ab0 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b02:	20a5      	movs	r0, #165	; 0xa5
 8000b04:	f7ff ffd4 	bl	8000ab0 <W25qxx_Spi>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b0c:	20a5      	movs	r0, #165	; 0xa5
 8000b0e:	f7ff ffcf 	bl	8000ab0 <W25qxx_Spi>
 8000b12:	4603      	mov	r3, r0
 8000b14:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b16:	20a5      	movs	r0, #165	; 0xa5
 8000b18:	f7ff ffca 	bl	8000ab0 <W25qxx_Spi>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 8000b20:	2201      	movs	r2, #1
 8000b22:	2101      	movs	r1, #1
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <W25qxx_ReadID+0x68>)
 8000b26:	f000 fcf5 	bl	8001514 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	041a      	lsls	r2, r3, #16
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	4313      	orrs	r3, r2
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]

	return Temp;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40020400 	.word	0x40020400

08000b48 <W25qxx_Init>:
	W25QFLASH_CS_UNSELECT;
}

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8000b4e:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <W25qxx_Init+0x218>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 8000b56:	e002      	b.n	8000b5e <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f000 f9f1 	bl	8000f40 <HAL_Delay>
	while(HAL_GetTick() < 100)
 8000b5e:	f000 f9e3 	bl	8000f28 <HAL_GetTick>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b63      	cmp	r3, #99	; 0x63
 8000b66:	d9f7      	bls.n	8000b58 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	487d      	ldr	r0, [pc, #500]	; (8000d64 <W25qxx_Init+0x21c>)
 8000b6e:	f000 fcd1 	bl	8001514 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8000b72:	2064      	movs	r0, #100	; 0x64
 8000b74:	f000 f9e4 	bl	8000f40 <HAL_Delay>

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
	#endif

	id = W25qxx_ReadID();
 8000b78:	f7ff ffb0 	bl	8000adc <W25qxx_ReadID>
 8000b7c:	6078      	str	r0, [r7, #4]
	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
	#endif

	switch(id & 0x0000FFFF)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f244 0212 	movw	r2, #16402	; 0x4012
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f000 808a 	beq.w	8000ca0 <W25qxx_Init+0x158>
 8000b8c:	f244 0212 	movw	r2, #16402	; 0x4012
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d829      	bhi.n	8000be8 <W25qxx_Init+0xa0>
 8000b94:	f243 0214 	movw	r2, #12308	; 0x3014
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	f000 809b 	beq.w	8000cd4 <W25qxx_Init+0x18c>
 8000b9e:	f243 0214 	movw	r2, #12308	; 0x3014
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d80f      	bhi.n	8000bc6 <W25qxx_Init+0x7e>
 8000ba6:	f243 0212 	movw	r2, #12306	; 0x3012
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f000 809a 	beq.w	8000ce4 <W25qxx_Init+0x19c>
 8000bb0:	f243 0212 	movw	r2, #12306	; 0x3012
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	f200 8091 	bhi.w	8000cdc <W25qxx_Init+0x194>
 8000bba:	f243 0211 	movw	r2, #12305	; 0x3011
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	f000 8094 	beq.w	8000cec <W25qxx_Init+0x1a4>
 8000bc4:	e096      	b.n	8000cf4 <W25qxx_Init+0x1ac>
 8000bc6:	f243 0216 	movw	r2, #12310	; 0x3016
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d07a      	beq.n	8000cc4 <W25qxx_Init+0x17c>
 8000bce:	f243 0216 	movw	r2, #12310	; 0x3016
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d37a      	bcc.n	8000ccc <W25qxx_Init+0x184>
 8000bd6:	f243 0217 	movw	r2, #12311	; 0x3017
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d06e      	beq.n	8000cbc <W25qxx_Init+0x174>
 8000bde:	f244 0211 	movw	r2, #16401	; 0x4011
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d063      	beq.n	8000cae <W25qxx_Init+0x166>
 8000be6:	e085      	b.n	8000cf4 <W25qxx_Init+0x1ac>
 8000be8:	f244 0216 	movw	r2, #16406	; 0x4016
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d03b      	beq.n	8000c68 <W25qxx_Init+0x120>
 8000bf0:	f244 0216 	movw	r2, #16406	; 0x4016
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d808      	bhi.n	8000c0a <W25qxx_Init+0xc2>
 8000bf8:	f244 0214 	movw	r2, #16404	; 0x4014
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d041      	beq.n	8000c84 <W25qxx_Init+0x13c>
 8000c00:	f244 0214 	movw	r2, #16404	; 0x4014
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d836      	bhi.n	8000c76 <W25qxx_Init+0x12e>
 8000c08:	e043      	b.n	8000c92 <W25qxx_Init+0x14a>
 8000c0a:	f244 0218 	movw	r2, #16408	; 0x4018
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01b      	beq.n	8000c4a <W25qxx_Init+0x102>
 8000c12:	f244 0218 	movw	r2, #16408	; 0x4018
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d31f      	bcc.n	8000c5a <W25qxx_Init+0x112>
 8000c1a:	f244 0219 	movw	r2, #16409	; 0x4019
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00b      	beq.n	8000c3a <W25qxx_Init+0xf2>
 8000c22:	f244 021a 	movw	r2, #16410	; 0x401a
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d164      	bne.n	8000cf4 <W25qxx_Init+0x1ac>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 8000c2a:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <W25qxx_Init+0x218>)
 8000c2c:	220a      	movs	r2, #10
 8000c2e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 8000c30:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <W25qxx_Init+0x218>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
			#endif
		break;
 8000c38:	e062      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 8000c3a:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <W25qxx_Init+0x218>)
 8000c3c:	2209      	movs	r2, #9
 8000c3e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 8000c40:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <W25qxx_Init+0x218>)
 8000c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c46:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
			#endif
		break;
 8000c48:	e05a      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <W25qxx_Init+0x218>)
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 8000c50:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <W25qxx_Init+0x218>)
 8000c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c56:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
			#endif
		break;
 8000c58:	e052      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <W25qxx_Init+0x218>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <W25qxx_Init+0x218>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
			#endif
		break;
 8000c66:	e04b      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 8000c68:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <W25qxx_Init+0x218>)
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <W25qxx_Init+0x218>)
 8000c70:	2240      	movs	r2, #64	; 0x40
 8000c72:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
			#endif
		break;
 8000c74:	e044      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <W25qxx_Init+0x218>)
 8000c78:	2205      	movs	r2, #5
 8000c7a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 8000c7c:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <W25qxx_Init+0x218>)
 8000c7e:	2220      	movs	r2, #32
 8000c80:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
			#endif
		break;
 8000c82:	e03d      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <W25qxx_Init+0x218>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 8000c8a:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <W25qxx_Init+0x218>)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
			#endif
		break;
 8000c90:	e036      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <W25qxx_Init+0x218>)
 8000c94:	2203      	movs	r2, #3
 8000c96:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 8000c98:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <W25qxx_Init+0x218>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
			#endif
		break;
 8000c9e:	e02f      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <W25qxx_Init+0x218>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <W25qxx_Init+0x218>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
			#endif
		break;
 8000cac:	e028      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <W25qxx_Init+0x218>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <W25qxx_Init+0x218>)
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
			#endif
		break;
 8000cba:	e021      	b.n	8000d00 <W25qxx_Init+0x1b8>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <W25qxx_Init+0x218>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
			#endif
		break;
 8000cc2:	e01d      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8000cc4:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <W25qxx_Init+0x218>)
 8000cc6:	2240      	movs	r2, #64	; 0x40
 8000cc8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
			#endif
		break;
 8000cca:	e019      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <W25qxx_Init+0x218>)
 8000cce:	2220      	movs	r2, #32
 8000cd0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
			#endif
		break;
 8000cd2:	e015      	b.n	8000d00 <W25qxx_Init+0x1b8>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <W25qxx_Init+0x218>)
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
			#endif
		break;
 8000cda:	e011      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <W25qxx_Init+0x218>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
			#endif
		break;
 8000ce2:	e00d      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <W25qxx_Init+0x218>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
			#endif
		break;
 8000cea:	e009      	b.n	8000d00 <W25qxx_Init+0x1b8>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <W25qxx_Init+0x218>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
			#endif
		break;
 8000cf2:	e005      	b.n	8000d00 <W25qxx_Init+0x1b8>
		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
			#endif

			w25qxx.Lock = 0;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <W25qxx_Init+0x218>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e02b      	b.n	8000d58 <W25qxx_Init+0x210>
	}


	w25qxx.PageSize = 256;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <W25qxx_Init+0x218>)
 8000d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d06:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <W25qxx_Init+0x218>)
 8000d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d0e:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <W25qxx_Init+0x218>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <W25qxx_Init+0x218>)
 8000d18:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <W25qxx_Init+0x218>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <W25qxx_Init+0x218>)
 8000d20:	6912      	ldr	r2, [r2, #16]
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <W25qxx_Init+0x218>)
 8000d28:	8952      	ldrh	r2, [r2, #10]
 8000d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <W25qxx_Init+0x218>)
 8000d30:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <W25qxx_Init+0x218>)
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <W25qxx_Init+0x218>)
 8000d3a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <W25qxx_Init+0x218>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <W25qxx_Init+0x218>)
 8000d42:	6912      	ldr	r2, [r2, #16]
 8000d44:	fb02 f303 	mul.w	r3, r2, r3
 8000d48:	0a9b      	lsrs	r3, r3, #10
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <W25qxx_Init+0x218>)
 8000d4c:	6213      	str	r3, [r2, #32]
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
	#endif

	w25qxx.Lock = 0;
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <W25qxx_Init+0x218>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000270 	.word	0x20000270
 8000d64:	40020400 	.word	0x40020400

08000d68 <W25qxx_ReadByte>:
	while(BytesToWrite > 0);
}

//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	while(w25qxx.Lock==1)
 8000d72:	e002      	b.n	8000d7a <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f000 f8e3 	bl	8000f40 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <W25qxx_ReadByte+0x98>)
 8000d7c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d0f7      	beq.n	8000d74 <W25qxx_ReadByte+0xc>

	w25qxx.Lock=1;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <W25qxx_ReadByte+0x98>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25QFLASH_CS_SELECT;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2101      	movs	r1, #1
 8000d90:	481c      	ldr	r0, [pc, #112]	; (8000e04 <W25qxx_ReadByte+0x9c>)
 8000d92:	f000 fbbf 	bl	8001514 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_FAST_READ);
 8000d96:	200b      	movs	r0, #11
 8000d98:	f7ff fe8a 	bl	8000ab0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <W25qxx_ReadByte+0x98>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d905      	bls.n	8000db0 <W25qxx_ReadByte+0x48>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	0e1b      	lsrs	r3, r3, #24
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fe80 	bl	8000ab0 <W25qxx_Spi>

	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	0c1b      	lsrs	r3, r3, #16
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fe7a 	bl	8000ab0 <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address& 0xFF00) >> 8);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fe74 	bl	8000ab0 <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe6f 	bl	8000ab0 <W25qxx_Spi>
	W25qxx_Spi(0);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff fe6c 	bl	8000ab0 <W25qxx_Spi>

	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000dd8:	20a5      	movs	r0, #165	; 0xa5
 8000dda:	f7ff fe69 	bl	8000ab0 <W25qxx_Spi>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	701a      	strb	r2, [r3, #0]

	W25QFLASH_CS_UNSELECT;
 8000de6:	2201      	movs	r2, #1
 8000de8:	2101      	movs	r1, #1
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <W25qxx_ReadByte+0x9c>)
 8000dec:	f000 fb92 	bl	8001514 <HAL_GPIO_WritePin>

	w25qxx.Lock = 0;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <W25qxx_ReadByte+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000270 	.word	0x20000270
 8000e04:	40020400 	.word	0x40020400

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
  ldr  r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e28:	f842 3b04 	str.w	r3, [r2], #4

08000e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e32:	f7ff fe27 	bl	8000a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f006 f829 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fb4d 	bl	80004d8 <main>
  bx  lr    
 8000e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e44:	0800714c 	.word	0x0800714c
  ldr  r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e4c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000e50:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000e54:	20000c3c 	.word	0x20000c3c

08000e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_Init+0x40>)
 8000e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_Init+0x40>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x40>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f94d 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fd02 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023c00 	.word	0x40023c00

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f965 	bl	800118e <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f92d 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000298 	.word	0x20000298

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000298 	.word	0x20000298

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_Delay+0x40>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000008 	.word	0x20000008

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff29 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff3e 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff8e 	bl	8001078 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff31 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffa2 	bl	80010e0 <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e00e      	b.n	80011d6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fb8d 	bl	80008e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e16b      	b.n	80014d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 815a 	bne.w	80014ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d00b      	beq.n	800123a <HAL_GPIO_Init+0x5a>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122e:	2b11      	cmp	r3, #17
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0xfc>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b12      	cmp	r3, #18
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80b4 	beq.w	80014ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b5f      	ldr	r3, [pc, #380]	; (80014e8 <HAL_GPIO_Init+0x308>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <HAL_GPIO_Init+0x308>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <HAL_GPIO_Init+0x308>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	4a5a      	ldr	r2, [pc, #360]	; (80014ec <HAL_GPIO_Init+0x30c>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <HAL_GPIO_Init+0x310>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d02b      	beq.n	8001406 <HAL_GPIO_Init+0x226>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_GPIO_Init+0x314>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x222>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x318>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x21e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x31c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x21a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x320>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x216>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x324>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x212>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x328>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x20e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x32c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x20a>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e00e      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013ea:	2308      	movs	r3, #8
 80013ec:	e00c      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013ee:	2306      	movs	r3, #6
 80013f0:	e00a      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013f2:	2305      	movs	r3, #5
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x228>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x228>
 8001406:	2300      	movs	r3, #0
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001418:	4934      	ldr	r1, [pc, #208]	; (80014ec <HAL_GPIO_Init+0x30c>)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_GPIO_Init+0x330>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800144a:	4a31      	ldr	r2, [pc, #196]	; (8001510 <HAL_GPIO_Init+0x330>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_GPIO_Init+0x330>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <HAL_GPIO_Init+0x330>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_GPIO_Init+0x330>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <HAL_GPIO_Init+0x330>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_GPIO_Init+0x330>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_GPIO_Init+0x330>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	f67f ae90 	bls.w	80011fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	3724      	adds	r7, #36	; 0x24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40021c00 	.word	0x40021c00
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001530:	e003      	b.n	800153a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	041a      	lsls	r2, r3, #16
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001548:	b08f      	sub	sp, #60	; 0x3c
 800154a:	af0a      	add	r7, sp, #40	; 0x28
 800154c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e10f      	b.n	8001778 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f005 f988 	bl	8006888 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f959 	bl	800384e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	687e      	ldr	r6, [r7, #4]
 80015a4:	466d      	mov	r5, sp
 80015a6:	f106 0410 	add.w	r4, r6, #16
 80015aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ba:	1d33      	adds	r3, r6, #4
 80015bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f002 f830 	bl	8003624 <USB_CoreInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0d0      	b.n	8001778 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f947 	bl	8003870 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	e04a      	b.n	800167e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	333d      	adds	r3, #61	; 0x3d
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	333c      	adds	r3, #60	; 0x3c
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	b298      	uxth	r0, r3
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3342      	adds	r3, #66	; 0x42
 8001624:	4602      	mov	r2, r0
 8001626:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	333f      	adds	r3, #63	; 0x3f
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3344      	adds	r3, #68	; 0x44
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3348      	adds	r3, #72	; 0x48
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3350      	adds	r3, #80	; 0x50
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	3301      	adds	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d3af      	bcc.n	80015e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e044      	b.n	8001718 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	1a9b      	subs	r3, r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	3301      	adds	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3b5      	bcc.n	800168e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	687e      	ldr	r6, [r7, #4]
 800172a:	466d      	mov	r5, sp
 800172c:	f106 0410 	add.w	r4, r6, #16
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	e894 0003 	ldmia.w	r4, {r0, r1}
 800173c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001740:	1d33      	adds	r3, r6, #4
 8001742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f002 f8bd 	bl	80038c4 <USB_DevInit>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e00d      	b.n	8001778 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f8fc 	bl	800496e <USB_DevDisconnect>

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001780 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_PCD_Start+0x1c>
 8001798:	2302      	movs	r3, #2
 800179a:	e020      	b.n	80017de <HAL_PCD_Start+0x5e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d109      	bne.n	80017c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d005      	beq.n	80017c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 f8ba 	bl	800493e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 f82c 	bl	800382c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017e6:	b590      	push	{r4, r7, lr}
 80017e8:	b08d      	sub	sp, #52	; 0x34
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 f961 	bl	8004ac4 <USB_GetMode>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	f040 839d 	bne.w	8001f44 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f003 f8c5 	bl	800499e <USB_ReadInterrupts>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8393 	beq.w	8001f42 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f003 f8bc 	bl	800499e <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b02      	cmp	r3, #2
 800182e:	d107      	bne.n	8001840 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f002 0202 	and.w	r2, r2, #2
 800183e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f003 f8aa 	bl	800499e <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b10      	cmp	r3, #16
 8001852:	d161      	bne.n	8001918 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0210 	bic.w	r2, r2, #16
 8001862:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f003 020f 	and.w	r2, r3, #15
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	3304      	adds	r3, #4
 8001882:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	0c5b      	lsrs	r3, r3, #17
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	2b02      	cmp	r3, #2
 800188e:	d124      	bne.n	80018da <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d035      	beq.n	8001908 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	6a38      	ldr	r0, [r7, #32]
 80018b0:	f002 ff22 	bl	80046f8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c0:	441a      	add	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d2:	441a      	add	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	619a      	str	r2, [r3, #24]
 80018d8:	e016      	b.n	8001908 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	0c5b      	lsrs	r3, r3, #17
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d110      	bne.n	8001908 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018ec:	2208      	movs	r2, #8
 80018ee:	4619      	mov	r1, r3
 80018f0:	6a38      	ldr	r0, [r7, #32]
 80018f2:	f002 ff01 	bl	80046f8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001902:	441a      	add	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0210 	orr.w	r2, r2, #16
 8001916:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 f83e 	bl	800499e <USB_ReadInterrupts>
 8001922:	4603      	mov	r3, r0
 8001924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001928:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800192c:	d16e      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f003 f844 	bl	80049c4 <USB_ReadDevAllOutEpInterrupt>
 800193c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800193e:	e062      	b.n	8001a06 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d057      	beq.n	80019fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f003 f869 	bl	8004a2c <USB_ReadDevOutEPInterrupt>
 800195a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00c      	beq.n	8001980 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001972:	461a      	mov	r2, r3
 8001974:	2301      	movs	r3, #1
 8001976:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fdb0 	bl	80024e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001996:	461a      	mov	r2, r3
 8001998:	2308      	movs	r3, #8
 800199a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800199c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 feaa 	bl	80026f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ba:	461a      	mov	r2, r3
 80019bc:	2310      	movs	r3, #16
 80019be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d6:	461a      	mov	r2, r3
 80019d8:	2320      	movs	r3, #32
 80019da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019f2:	461a      	mov	r2, r3
 80019f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	3301      	adds	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d199      	bne.n	8001940 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 ffc4 	bl	800499e <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a20:	f040 80c0 	bne.w	8001ba4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 ffe5 	bl	80049f8 <USB_ReadDevAllInEpInterrupt>
 8001a2e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a34:	e0b2      	b.n	8001b9c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a7 	beq.w	8001b90 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 f80b 	bl	8004a68 <USB_ReadDevInEPInterrupt>
 8001a52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d057      	beq.n	8001b0e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	2201      	movs	r2, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69f9      	ldr	r1, [r7, #28]
 8001a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a7e:	4013      	ands	r3, r2
 8001a80:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d132      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3348      	adds	r3, #72	; 0x48
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4403      	add	r3, r0
 8001abc:	3344      	adds	r3, #68	; 0x44
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4419      	add	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4403      	add	r3, r0
 8001ad0:	3348      	adds	r3, #72	; 0x48
 8001ad2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d113      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x31c>
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3350      	adds	r3, #80	; 0x50
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d108      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001afa:	461a      	mov	r2, r3
 8001afc:	2101      	movs	r1, #1
 8001afe:	f003 f813 	bl	8004b28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f004 ff3e 	bl	800698a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b24:	461a      	mov	r2, r3
 8001b26:	2308      	movs	r3, #8
 8001b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b40:	461a      	mov	r2, r3
 8001b42:	2310      	movs	r3, #16
 8001b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2340      	movs	r3, #64	; 0x40
 8001b60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	015a      	lsls	r2, r3, #5
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fc1b 	bl	80023c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	3301      	adds	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f47f af49 	bne.w	8001a36 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fef8 	bl	800499e <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb8:	d122      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d108      	bne.n	8001bea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001be0:	2100      	movs	r1, #0
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fe26 	bl	8002834 <HAL_PCDEx_LPM_Callback>
 8001be8:	e002      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f004 ff44 	bl	8006a78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 feca 	bl	800499e <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c14:	d112      	bne.n	8001c3c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f004 ff00 	bl	8006a2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c3a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 feac 	bl	800499e <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c50:	f040 80c7 	bne.w	8001de2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 ff8c 	bl	8003b8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c78:	e056      	b.n	8001d28 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c86:	461a      	mov	r2, r3
 8001c88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9e:	0151      	lsls	r1, r2, #5
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	440a      	add	r2, r1
 8001ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ca8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cbe:	0151      	lsls	r1, r2, #5
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	440a      	add	r2, r1
 8001cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ccc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ce0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	440a      	add	r2, r1
 8001cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d12:	0151      	lsls	r1, r2, #5
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	440a      	add	r2, r1
 8001d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	3301      	adds	r3, #1
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d3a3      	bcc.n	8001c7a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5e:	f043 030b 	orr.w	r3, r3, #11
 8001d62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d74:	f043 030b 	orr.w	r3, r3, #11
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	e015      	b.n	8001da8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da2:	f043 030b 	orr.w	r3, r3, #11
 8001da6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001dba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f002 feab 	bl	8004b28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fdd9 	bl	800499e <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df6:	d124      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fe6f 	bl	8004ae0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 ff21 	bl	8003c4e <USB_GetDevSpeed>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681c      	ldr	r4, [r3, #0]
 8001e18:	f001 f946 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	4620      	mov	r0, r4
 8001e28:	f001 fc5e 	bl	80036e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f004 fdd4 	bl	80069da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 fda9 	bl	800499e <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d10a      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f004 fdb1 	bl	80069be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f002 0208 	and.w	r2, r2, #8
 8001e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fd94 	bl	800499e <USB_ReadInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e80:	d10f      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f004 fe13 	bl	8006ab8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fd79 	bl	800499e <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eb6:	d10f      	bne.n	8001ed8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f004 fde6 	bl	8006a94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fd5e 	bl	800499e <USB_ReadInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d10a      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f004 fdf4 	bl	8006adc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fd48 	bl	800499e <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d115      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f004 fde4 	bl	8006af8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	e000      	b.n	8001f44 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001f42:	bf00      	nop
    }
  }
}
 8001f44:	3734      	adds	r7, #52	; 0x34
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}

08001f4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_PCD_SetAddress+0x1a>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e013      	b.n	8001f8c <HAL_PCD_SetAddress+0x42>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fcb8 	bl	80048f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	70fb      	strb	r3, [r7, #3]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	803b      	strh	r3, [r7, #0]
 8001faa:	4613      	mov	r3, r2
 8001fac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da0f      	bge.n	8001fda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	3338      	adds	r3, #56	; 0x38
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	705a      	strb	r2, [r3, #1]
 8001fd8:	e00f      	b.n	8001ffa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002006:	883a      	ldrh	r2, [r7, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	78ba      	ldrb	r2, [r7, #2]
 8002010:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002024:	78bb      	ldrb	r3, [r7, #2]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d102      	bne.n	8002030 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_PCD_EP_Open+0xaa>
 800203a:	2302      	movs	r3, #2
 800203c:	e00e      	b.n	800205c <HAL_PCD_EP_Open+0xc8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f001 fe23 	bl	8003c98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800205a:	7afb      	ldrb	r3, [r7, #11]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002074:	2b00      	cmp	r3, #0
 8002076:	da0f      	bge.n	8002098 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	3338      	adds	r3, #56	; 0x38
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	705a      	strb	r2, [r3, #1]
 8002096:	e00f      	b.n	80020b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	3304      	adds	r3, #4
 80020b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_PCD_EP_Close+0x6e>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e00e      	b.n	80020f0 <HAL_PCD_EP_Close+0x8c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68f9      	ldr	r1, [r7, #12]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 fe61 	bl	8003da8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	460b      	mov	r3, r1
 8002106:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	b2da      	uxtb	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	f002 f93c 	bl	80043e8 <USB_EP0StartXfer>
 8002170:	e008      	b.n	8002184 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	6979      	ldr	r1, [r7, #20]
 8002180:	f001 feee 	bl	8003f60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021b0:	681b      	ldr	r3, [r3, #0]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	460b      	mov	r3, r1
 80021cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	3338      	adds	r3, #56	; 0x38
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2201      	movs	r2, #1
 80021fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	b2da      	uxtb	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	6979      	ldr	r1, [r7, #20]
 8002230:	f002 f8da 	bl	80043e8 <USB_EP0StartXfer>
 8002234:	e008      	b.n	8002248 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	6979      	ldr	r1, [r7, #20]
 8002244:	f001 fe8c 	bl	8003f60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d901      	bls.n	8002270 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e050      	b.n	8002312 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002274:	2b00      	cmp	r3, #0
 8002276:	da0f      	bge.n	8002298 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3338      	adds	r3, #56	; 0x38
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	705a      	strb	r2, [r3, #1]
 8002296:	e00d      	b.n	80022b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_PCD_EP_SetStall+0x82>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e01e      	b.n	8002312 <HAL_PCD_EP_SetStall+0xc0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fa31 	bl	800474a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	b2d9      	uxtb	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002302:	461a      	mov	r2, r3
 8002304:	f002 fc10 	bl	8004b28 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	d901      	bls.n	8002338 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e042      	b.n	80023be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da0f      	bge.n	8002360 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3338      	adds	r3, #56	; 0x38
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	705a      	strb	r2, [r3, #1]
 800235e:	e00f      	b.n	8002380 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_EP_ClrStall+0x86>
 800239c:	2302      	movs	r3, #2
 800239e:	e00e      	b.n	80023be <HAL_PCD_EP_ClrStall+0xa4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fa39 	bl	8004826 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b08a      	sub	sp, #40	; 0x28
 80023ca:	af02      	add	r7, sp, #8
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3338      	adds	r3, #56	; 0x38
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	3304      	adds	r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d901      	bls.n	80023fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06c      	b.n	80024d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	429a      	cmp	r2, r3
 8002412:	d902      	bls.n	800241a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3303      	adds	r3, #3
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002422:	e02b      	b.n	800247c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	429a      	cmp	r2, r3
 8002438:	d902      	bls.n	8002440 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3303      	adds	r3, #3
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68d9      	ldr	r1, [r3, #12]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002458:	b2db      	uxtb	r3, r3
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4603      	mov	r3, r0
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f002 f915 	bl	800468e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	441a      	add	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	441a      	add	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	b29b      	uxth	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	429a      	cmp	r2, r3
 8002490:	d809      	bhi.n	80024a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800249a:	429a      	cmp	r2, r3
 800249c:	d203      	bcs.n	80024a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1be      	bne.n	8002424 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d811      	bhi.n	80024d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	2201      	movs	r2, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024d2:	4013      	ands	r3, r2
 80024d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	333c      	adds	r3, #60	; 0x3c
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 80a0 	bne.w	8002658 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d015      	beq.n	800254e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a72      	ldr	r2, [pc, #456]	; (80026f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002526:	4293      	cmp	r3, r2
 8002528:	f240 80dd 	bls.w	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80d7 	beq.w	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002544:	461a      	mov	r2, r3
 8002546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	e0cb      	b.n	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002564:	461a      	mov	r2, r3
 8002566:	2320      	movs	r3, #32
 8002568:	6093      	str	r3, [r2, #8]
 800256a:	e0bc      	b.n	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 80b7 	bne.w	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d90f      	bls.n	80025a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	461a      	mov	r2, r3
 8002598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259c:	6093      	str	r3, [r2, #8]
 800259e:	e0a2      	b.n	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	0159      	lsls	r1, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80025c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4403      	add	r3, r0
 80025d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4403      	add	r3, r0
 80025fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4419      	add	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4403      	add	r3, r0
 8002614:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002618:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d114      	bne.n	800264a <PCD_EP_OutXfrComplete_int+0x16a>
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002642:	461a      	mov	r2, r3
 8002644:	2101      	movs	r1, #1
 8002646:	f002 fa6f 	bl	8004b28 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f004 f97f 	bl	8006954 <HAL_PCD_DataOutStageCallback>
 8002656:	e046      	b.n	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d124      	bne.n	80026aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002676:	461a      	mov	r2, r3
 8002678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800267c:	6093      	str	r3, [r2, #8]
 800267e:	e032      	b.n	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	461a      	mov	r2, r3
 8002698:	2320      	movs	r3, #32
 800269a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4619      	mov	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f004 f956 	bl	8006954 <HAL_PCD_DataOutStageCallback>
 80026a8:	e01d      	b.n	80026e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d114      	bne.n	80026da <PCD_EP_OutXfrComplete_int+0x1fa>
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d108      	bne.n	80026da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026d2:	461a      	mov	r2, r3
 80026d4:	2100      	movs	r1, #0
 80026d6:	f002 fa27 	bl	8004b28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f004 f937 	bl	8006954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	4f54300a 	.word	0x4f54300a
 80026f4:	4f54310a 	.word	0x4f54310a

080026f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	333c      	adds	r3, #60	; 0x3c
 8002710:	3304      	adds	r3, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <PCD_EP_OutSetupPacket_int+0x88>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d90e      	bls.n	800274c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	461a      	mov	r2, r3
 8002746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800274a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f004 f8ef 	bl	8006930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <PCD_EP_OutSetupPacket_int+0x88>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d90c      	bls.n	8002774 <PCD_EP_OutSetupPacket_int+0x7c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d108      	bne.n	8002774 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800276c:	461a      	mov	r2, r3
 800276e:	2101      	movs	r1, #1
 8002770:	f002 f9da 	bl	8004b28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	4f54300a 	.word	0x4f54300a

08002784 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
 8002790:	4613      	mov	r3, r2
 8002792:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027a2:	883b      	ldrh	r3, [r7, #0]
 80027a4:	0419      	lsls	r1, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
 80027b0:	e028      	b.n	8002804 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	4413      	add	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e00d      	b.n	80027e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3340      	adds	r3, #64	; 0x40
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	3301      	adds	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d3ec      	bcc.n	80027c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027ec:	883b      	ldrh	r3, [r7, #0]
 80027ee:	0418      	lsls	r0, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	4302      	orrs	r2, r0
 80027fc:	3340      	adds	r3, #64	; 0x40
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e25b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d075      	beq.n	8002956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286a:	4ba3      	ldr	r3, [pc, #652]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d00c      	beq.n	8002890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002876:	4ba0      	ldr	r3, [pc, #640]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287e:	2b08      	cmp	r3, #8
 8002880:	d112      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002882:	4b9d      	ldr	r3, [pc, #628]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288e:	d10b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d05b      	beq.n	8002954 <HAL_RCC_OscConfig+0x108>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d157      	bne.n	8002954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e236      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b0:	d106      	bne.n	80028c0 <HAL_RCC_OscConfig+0x74>
 80028b2:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a90      	ldr	r2, [pc, #576]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xb0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x98>
 80028ca:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a8a      	ldr	r2, [pc, #552]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a87      	ldr	r2, [pc, #540]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xb0>
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a83      	ldr	r2, [pc, #524]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a80      	ldr	r2, [pc, #512]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fb10 	bl	8000f28 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe fb0c 	bl	8000f28 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1fb      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xc0>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fafc 	bl	8000f28 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe faf8 	bl	8000f28 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1e7      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0xe8>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d063      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002962:	4b65      	ldr	r3, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b5c      	ldr	r3, [pc, #368]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x152>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1bb      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4952      	ldr	r1, [pc, #328]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <HAL_RCC_OscConfig+0x2b0>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fe fab1 	bl	8000f28 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ca:	f7fe faad 	bl	8000f28 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e19c      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4940      	ldr	r1, [pc, #256]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x2b0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fa90 	bl	8000f28 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fa8c 	bl	8000f28 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e17b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d030      	beq.n	8002a98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_RCC_OscConfig+0x2b4>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fa70 	bl	8000f28 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fa6c 	bl	8000f28 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e15b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x200>
 8002a6a:	e015      	b.n	8002a98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_OscConfig+0x2b4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fa59 	bl	8000f28 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fa55 	bl	8000f28 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e144      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a0 	beq.w	8002be6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x2b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d121      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_RCC_OscConfig+0x2b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_RCC_OscConfig+0x2b8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fa1b 	bl	8000f28 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e011      	b.n	8002b1a <HAL_RCC_OscConfig+0x2ce>
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470000 	.word	0x42470000
 8002b00:	42470e80 	.word	0x42470e80
 8002b04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7fe fa0e 	bl	8000f28 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0fd      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x4d4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2f0>
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a7c      	ldr	r2, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCC_OscConfig+0x32a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x312>
 8002b44:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a76      	ldr	r2, [pc, #472]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x32a>
 8002b5e:	4b71      	ldr	r3, [pc, #452]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a70      	ldr	r2, [pc, #448]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a6d      	ldr	r2, [pc, #436]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe f9d3 	bl	8000f28 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe f9cf 	bl	8000f28 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0bc      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCC_OscConfig+0x33a>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fe f9bd 	bl	8000f28 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe f9b9 	bl	8000f28 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0a6      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a51      	ldr	r2, [pc, #324]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8092 	beq.w	8002d14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d05c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d141      	bne.n	8002c88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b48      	ldr	r3, [pc, #288]	; (8002d28 <HAL_RCC_OscConfig+0x4dc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe f98d 	bl	8000f28 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe f989 	bl	8000f28 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e078      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c24:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	019b      	lsls	r3, r3, #6
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	4933      	ldr	r1, [pc, #204]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCC_OscConfig+0x4dc>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe f962 	bl	8000f28 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe f95e 	bl	8000f28 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e04d      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x41c>
 8002c86:	e045      	b.n	8002d14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c88:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x4dc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe f94b 	bl	8000f28 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe f947 	bl	8000f28 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e036      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x44a>
 8002cb4:	e02e      	b.n	8002d14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e029      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCC_OscConfig+0x4d8>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d115      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40007000 	.word	0x40007000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470060 	.word	0x42470060

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe f884 	bl	8000f28 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe f880 	bl	8000f28 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd ffe4 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	0800712c 	.word	0x0800712c
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	2300      	movs	r3, #0
 8002f08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f0e:	4b63      	ldr	r3, [pc, #396]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d007      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x32>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x38>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 80b4 	bne.w	800308c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f26:	60bb      	str	r3, [r7, #8]
       break;
 8002f28:	e0b3      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f2c:	60bb      	str	r3, [r7, #8]
      break;
 8002f2e:	e0b0      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f30:	4b5a      	ldr	r3, [pc, #360]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f3a:	4b58      	ldr	r3, [pc, #352]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04a      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f46:	4b55      	ldr	r3, [pc, #340]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	ea03 0501 	and.w	r5, r3, r1
 8002f5c:	ea04 0602 	and.w	r6, r4, r2
 8002f60:	4629      	mov	r1, r5
 8002f62:	4632      	mov	r2, r6
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	0154      	lsls	r4, r2, #5
 8002f6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f72:	014b      	lsls	r3, r1, #5
 8002f74:	4619      	mov	r1, r3
 8002f76:	4622      	mov	r2, r4
 8002f78:	1b49      	subs	r1, r1, r5
 8002f7a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	0194      	lsls	r4, r2, #6
 8002f88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f8c:	018b      	lsls	r3, r1, #6
 8002f8e:	1a5b      	subs	r3, r3, r1
 8002f90:	eb64 0402 	sbc.w	r4, r4, r2
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	00e2      	lsls	r2, r4, #3
 8002f9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fa2:	00d9      	lsls	r1, r3, #3
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	195b      	adds	r3, r3, r5
 8002faa:	eb44 0406 	adc.w	r4, r4, r6
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	0262      	lsls	r2, r4, #9
 8002fb8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002fbc:	0259      	lsls	r1, r3, #9
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f04f 0400 	mov.w	r4, #0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4623      	mov	r3, r4
 8002fd0:	f7fd f902 	bl	80001d8 <__aeabi_uldivmod>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e049      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	ea03 0501 	and.w	r5, r3, r1
 8002ff2:	ea04 0602 	and.w	r6, r4, r2
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	4632      	mov	r2, r6
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	0154      	lsls	r4, r2, #5
 8003004:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003008:	014b      	lsls	r3, r1, #5
 800300a:	4619      	mov	r1, r3
 800300c:	4622      	mov	r2, r4
 800300e:	1b49      	subs	r1, r1, r5
 8003010:	eb62 0206 	sbc.w	r2, r2, r6
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f04f 0400 	mov.w	r4, #0
 800301c:	0194      	lsls	r4, r2, #6
 800301e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	1a5b      	subs	r3, r3, r1
 8003026:	eb64 0402 	sbc.w	r4, r4, r2
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003038:	00d9      	lsls	r1, r3, #3
 800303a:	460b      	mov	r3, r1
 800303c:	4614      	mov	r4, r2
 800303e:	195b      	adds	r3, r3, r5
 8003040:	eb44 0406 	adc.w	r4, r4, r6
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	02a2      	lsls	r2, r4, #10
 800304e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003052:	0299      	lsls	r1, r3, #10
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	4618      	mov	r0, r3
 800305a:	4621      	mov	r1, r4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f04f 0400 	mov.w	r4, #0
 8003062:	461a      	mov	r2, r3
 8003064:	4623      	mov	r3, r4
 8003066:	f7fd f8b7 	bl	80001d8 <__aeabi_uldivmod>
 800306a:	4603      	mov	r3, r0
 800306c:	460c      	mov	r4, r1
 800306e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	3301      	adds	r3, #1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	60bb      	str	r3, [r7, #8]
      break;
 800308a:	e002      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800308e:	60bb      	str	r3, [r7, #8]
      break;
 8003090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003092:	68bb      	ldr	r3, [r7, #8]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	007a1200 	.word	0x007a1200

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e056      	b.n	8003180 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7fd fc1d 	bl	800092c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003108:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	ea42 0103 	orr.w	r1, r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	f003 0104 	and.w	r1, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003196:	2301      	movs	r3, #1
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_SPI_TransmitReceive+0x26>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e18a      	b.n	80034c4 <HAL_SPI_TransmitReceive+0x33c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b6:	f7fd feb7 	bl	8000f28 <HAL_GetTick>
 80031ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d00f      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x70>
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031de:	d107      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x68>
 80031e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d003      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031f6:	e15b      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_SPI_TransmitReceive+0x82>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_SPI_TransmitReceive+0x82>
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003210:	e14e      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d007      	beq.n	800327a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003282:	d178      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_TransmitReceive+0x10a>
 800328c:	8b7b      	ldrh	r3, [r7, #26]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d166      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	1c9a      	adds	r2, r3, #2
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b6:	e053      	b.n	8003360 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d11b      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x176>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d016      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x176>
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d113      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d119      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x1b8>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d014      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	b292      	uxth	r2, r2
 8003322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333c:	2301      	movs	r3, #1
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003340:	f7fd fdf2 	bl	8000f28 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800334c:	429a      	cmp	r2, r3
 800334e:	d807      	bhi.n	8003360 <HAL_SPI_TransmitReceive+0x1d8>
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d003      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800335e:	e0a7      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1a6      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x130>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1a1      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x130>
 8003374:	e07c      	b.n	8003470 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x1fc>
 800337e:	8b7b      	ldrh	r3, [r7, #26]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d16b      	bne.n	800345c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033aa:	e057      	b.n	800345c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d11c      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x26c>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d017      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x26c>
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d114      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d119      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x2ae>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d014      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003432:	2301      	movs	r3, #1
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003436:	f7fd fd77 	bl	8000f28 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003442:	429a      	cmp	r2, r3
 8003444:	d803      	bhi.n	800344e <HAL_SPI_TransmitReceive+0x2c6>
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d102      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x2cc>
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800345a:	e029      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1a2      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x224>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d19d      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f893 	bl	80035a0 <SPI_EndRxTxTransaction>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d006      	beq.n	800348e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800348c:	e010      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	e000      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3730      	adds	r7, #48	; 0x30
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034dc:	e04c      	b.n	8003578 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d048      	beq.n	8003578 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034e6:	f7fd fd1f 	bl	8000f28 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d902      	bls.n	80034fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d13d      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800350a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003514:	d111      	bne.n	800353a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351e:	d004      	beq.n	800352a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003528:	d107      	bne.n	800353a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003538:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003542:	d10f      	bne.n	8003564 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003562:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e00f      	b.n	8003598 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d1a3      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <SPI_EndRxTxTransaction+0x7c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <SPI_EndRxTxTransaction+0x80>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0d5b      	lsrs	r3, r3, #21
 80035b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ca:	d112      	bne.n	80035f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff ff78 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e00f      	b.n	8003612 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d0f2      	beq.n	80035f2 <SPI_EndRxTxTransaction+0x52>
 800360c:	e000      	b.n	8003610 <SPI_EndRxTxTransaction+0x70>
        break;
 800360e:	bf00      	nop
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000000 	.word	0x20000000
 8003620:	165e9f81 	.word	0x165e9f81

08003624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003624:	b084      	sub	sp, #16
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	f107 001c 	add.w	r0, r7, #28
 8003632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	2b01      	cmp	r3, #1
 800363a:	d122      	bne.n	8003682 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f001 fab4 	bl	8004be4 <USB_CoreReset>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e01a      	b.n	80036b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f001 faa8 	bl	8004be4 <USB_CoreReset>
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
 80036aa:	e005      	b.n	80036b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10b      	bne.n	80036d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f043 0206 	orr.w	r2, r3, #6
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036e2:	b004      	add	sp, #16
 80036e4:	4770      	bx	lr
	...

080036e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d165      	bne.n	80037c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4a41      	ldr	r2, [pc, #260]	; (8003804 <USB_SetTurnaroundTime+0x11c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d906      	bls.n	8003712 <USB_SetTurnaroundTime+0x2a>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4a40      	ldr	r2, [pc, #256]	; (8003808 <USB_SetTurnaroundTime+0x120>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d802      	bhi.n	8003712 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800370c:	230f      	movs	r3, #15
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e062      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <USB_SetTurnaroundTime+0x120>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d906      	bls.n	8003728 <USB_SetTurnaroundTime+0x40>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4a3b      	ldr	r2, [pc, #236]	; (800380c <USB_SetTurnaroundTime+0x124>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d802      	bhi.n	8003728 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003722:	230e      	movs	r3, #14
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e057      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4a38      	ldr	r2, [pc, #224]	; (800380c <USB_SetTurnaroundTime+0x124>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d906      	bls.n	800373e <USB_SetTurnaroundTime+0x56>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a37      	ldr	r2, [pc, #220]	; (8003810 <USB_SetTurnaroundTime+0x128>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d802      	bhi.n	800373e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003738:	230d      	movs	r3, #13
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e04c      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a33      	ldr	r2, [pc, #204]	; (8003810 <USB_SetTurnaroundTime+0x128>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d906      	bls.n	8003754 <USB_SetTurnaroundTime+0x6c>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4a32      	ldr	r2, [pc, #200]	; (8003814 <USB_SetTurnaroundTime+0x12c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d802      	bhi.n	8003754 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800374e:	230c      	movs	r3, #12
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e041      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <USB_SetTurnaroundTime+0x12c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d906      	bls.n	800376a <USB_SetTurnaroundTime+0x82>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <USB_SetTurnaroundTime+0x130>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d802      	bhi.n	800376a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003764:	230b      	movs	r3, #11
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e036      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <USB_SetTurnaroundTime+0x130>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d906      	bls.n	8003780 <USB_SetTurnaroundTime+0x98>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <USB_SetTurnaroundTime+0x134>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d802      	bhi.n	8003780 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800377a:	230a      	movs	r3, #10
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e02b      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a26      	ldr	r2, [pc, #152]	; (800381c <USB_SetTurnaroundTime+0x134>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d906      	bls.n	8003796 <USB_SetTurnaroundTime+0xae>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <USB_SetTurnaroundTime+0x138>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d802      	bhi.n	8003796 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003790:	2309      	movs	r3, #9
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e020      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a21      	ldr	r2, [pc, #132]	; (8003820 <USB_SetTurnaroundTime+0x138>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d906      	bls.n	80037ac <USB_SetTurnaroundTime+0xc4>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a20      	ldr	r2, [pc, #128]	; (8003824 <USB_SetTurnaroundTime+0x13c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d802      	bhi.n	80037ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037a6:	2308      	movs	r3, #8
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e015      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <USB_SetTurnaroundTime+0x13c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d906      	bls.n	80037c2 <USB_SetTurnaroundTime+0xda>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <USB_SetTurnaroundTime+0x140>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d802      	bhi.n	80037c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037bc:	2307      	movs	r3, #7
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e00a      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037c2:	2306      	movs	r3, #6
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e007      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037ce:	2309      	movs	r3, #9
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e001      	b.n	80037d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037d4:	2309      	movs	r3, #9
 80037d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	00d8acbf 	.word	0x00d8acbf
 8003808:	00e4e1bf 	.word	0x00e4e1bf
 800380c:	00f423ff 	.word	0x00f423ff
 8003810:	0106737f 	.word	0x0106737f
 8003814:	011a499f 	.word	0x011a499f
 8003818:	01312cff 	.word	0x01312cff
 800381c:	014ca43f 	.word	0x014ca43f
 8003820:	016e35ff 	.word	0x016e35ff
 8003824:	01a6ab1f 	.word	0x01a6ab1f
 8003828:	01e847ff 	.word	0x01e847ff

0800382c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d106      	bne.n	800389c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	e00b      	b.n	80038b4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	e001      	b.n	80038b4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e003      	b.n	80038bc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038b4:	2032      	movs	r0, #50	; 0x32
 80038b6:	f7fd fb43 	bl	8000f40 <HAL_Delay>

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c4:	b084      	sub	sp, #16
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e009      	b.n	80038f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	3340      	adds	r3, #64	; 0x40
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	3301      	adds	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0e      	cmp	r3, #14
 80038fc:	d9f2      	bls.n	80038e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11c      	bne.n	800393e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f043 0302 	orr.w	r3, r3, #2
 8003916:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
 800393c:	e00b      	b.n	8003956 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800395c:	461a      	mov	r2, r3
 800395e:	2300      	movs	r3, #0
 8003960:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	4619      	mov	r1, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003970:	461a      	mov	r2, r3
 8003972:	680b      	ldr	r3, [r1, #0]
 8003974:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10c      	bne.n	8003996 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003982:	2100      	movs	r1, #0
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f949 	bl	8003c1c <USB_SetDevSpeed>
 800398a:	e008      	b.n	800399e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800398c:	2101      	movs	r1, #1
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f944 	bl	8003c1c <USB_SetDevSpeed>
 8003994:	e003      	b.n	800399e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003996:	2103      	movs	r1, #3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f93f 	bl	8003c1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800399e:	2110      	movs	r1, #16
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8f3 	bl	8003b8c <USB_FlushTxFifo>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f911 	bl	8003bd8 <USB_FlushRxFifo>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c6:	461a      	mov	r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d2:	461a      	mov	r2, r3
 80039d4:	2300      	movs	r3, #0
 80039d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039de:	461a      	mov	r2, r3
 80039e0:	2300      	movs	r3, #0
 80039e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e043      	b.n	8003a72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a00:	d118      	bne.n	8003a34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	461a      	mov	r2, r3
 8003a16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e013      	b.n	8003a46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e008      	b.n	8003a46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a40:	461a      	mov	r2, r3
 8003a42:	2300      	movs	r3, #0
 8003a44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	461a      	mov	r2, r3
 8003a54:	2300      	movs	r3, #0
 8003a56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a64:	461a      	mov	r2, r3
 8003a66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3b7      	bcc.n	80039ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e043      	b.n	8003b08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a96:	d118      	bne.n	8003aca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e013      	b.n	8003adc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e008      	b.n	8003adc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2300      	movs	r3, #0
 8003aec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afa:	461a      	mov	r2, r3
 8003afc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3301      	adds	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d3b7      	bcc.n	8003a80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f043 0210 	orr.w	r2, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <USB_DevInit+0x2c4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f043 0208 	orr.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b84:	b004      	add	sp, #16
 8003b86:	4770      	bx	lr
 8003b88:	803c3800 	.word	0x803c3800

08003b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <USB_FlushTxFifo+0x48>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e006      	b.n	8003bc6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d0f0      	beq.n	8003ba6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	00030d40 	.word	0x00030d40

08003bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2210      	movs	r2, #16
 8003be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <USB_FlushRxFifo+0x40>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e006      	b.n	8003c0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d0f0      	beq.n	8003bea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	00030d40 	.word	0x00030d40

08003c1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	68f9      	ldr	r1, [r7, #12]
 8003c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
 8003c72:	e00a      	b.n	8003c8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d002      	beq.n	8003c80 <USB_GetDevSpeed+0x32>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d102      	bne.n	8003c86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c80:	2302      	movs	r3, #2
 8003c82:	75fb      	strb	r3, [r7, #23]
 8003c84:	e001      	b.n	8003c8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c86:	230f      	movs	r3, #15
 8003c88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d13a      	bne.n	8003d2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d155      	bne.n	8003d98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	78db      	ldrb	r3, [r3, #3]
 8003d06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	059b      	lsls	r3, r3, #22
 8003d0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d10:	4313      	orrs	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e036      	b.n	8003d98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11a      	bne.n	8003d98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	78db      	ldrb	r3, [r3, #3]
 8003d7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d161      	bne.n	8003e88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dda:	d11f      	bne.n	8003e1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dfa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e60:	4013      	ands	r3, r2
 8003e62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	0159      	lsls	r1, r3, #5
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	440b      	add	r3, r1
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4b35      	ldr	r3, [pc, #212]	; (8003f58 <USB_DeactivateEndpoint+0x1b0>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
 8003e86:	e060      	b.n	8003f4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e9e:	d11f      	bne.n	8003ee0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f00:	4013      	ands	r3, r2
 8003f02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f24:	4013      	ands	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0159      	lsls	r1, r3, #5
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	4619      	mov	r1, r3
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <USB_DeactivateEndpoint+0x1b4>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	ec337800 	.word	0xec337800
 8003f5c:	eff37800 	.word	0xeff37800

08003f60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 815c 	bne.w	800423a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d132      	bne.n	8003ff0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe8:	0cdb      	lsrs	r3, r3, #19
 8003fea:	04db      	lsls	r3, r3, #19
 8003fec:	6113      	str	r3, [r2, #16]
 8003fee:	e074      	b.n	80040da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400a:	0cdb      	lsrs	r3, r3, #19
 800400c:	04db      	lsls	r3, r3, #19
 800400e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800402e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	440b      	add	r3, r1
 800404c:	1e59      	subs	r1, r3, #1
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	fbb1 f3f3 	udiv	r3, r1, r3
 8004056:	04d9      	lsls	r1, r3, #19
 8004058:	4b9d      	ldr	r3, [pc, #628]	; (80042d0 <USB_EPStartXfer+0x370>)
 800405a:	400b      	ands	r3, r1
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	0148      	lsls	r0, r1, #5
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	4401      	add	r1, r0
 8004064:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004068:	4313      	orrs	r3, r2
 800406a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	69b9      	ldr	r1, [r7, #24]
 8004084:	0148      	lsls	r0, r1, #5
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	4401      	add	r1, r0
 800408a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800408e:	4313      	orrs	r3, r2
 8004090:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11f      	bne.n	80040da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d14b      	bne.n	8004178 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	78db      	ldrb	r3, [r3, #3]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d128      	bne.n	8004156 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d110      	bne.n	8004136 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e00f      	b.n	8004156 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	440a      	add	r2, r1
 800414c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004170:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e12f      	b.n	80043d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004192:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004196:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	78db      	ldrb	r3, [r3, #3]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d015      	beq.n	80041cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8117 	beq.w	80043d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	69f9      	ldr	r1, [r7, #28]
 80041c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c6:	4313      	orrs	r3, r2
 80041c8:	634b      	str	r3, [r1, #52]	; 0x34
 80041ca:	e105      	b.n	80043d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d110      	bne.n	80041fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e00f      	b.n	800421e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	b298      	uxth	r0, r3
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4603      	mov	r3, r0
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fa2b 	bl	800468e <USB_WritePacket>
 8004238:	e0ce      	b.n	80043d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004254:	0cdb      	lsrs	r3, r3, #19
 8004256:	04db      	lsls	r3, r3, #19
 8004258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800427c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d126      	bne.n	80042d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	0148      	lsls	r0, r1, #5
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	4401      	add	r1, r0
 80042a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ca:	6113      	str	r3, [r2, #16]
 80042cc:	e036      	b.n	800433c <USB_EPStartXfer+0x3dc>
 80042ce:	bf00      	nop
 80042d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4413      	add	r3, r2
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	8afb      	ldrh	r3, [r7, #22]
 80042fa:	04d9      	lsls	r1, r3, #19
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <USB_EPStartXfer+0x484>)
 80042fe:	400b      	ands	r3, r1
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	0148      	lsls	r0, r1, #5
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	4401      	add	r1, r0
 8004308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	8af9      	ldrh	r1, [r7, #22]
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	0148      	lsls	r0, r1, #5
 8004330:	69f9      	ldr	r1, [r7, #28]
 8004332:	4401      	add	r1, r0
 8004334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004338:	4313      	orrs	r3, r2
 800433a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10d      	bne.n	800435e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	460a      	mov	r2, r1
 800435c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	78db      	ldrb	r3, [r3, #3]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d128      	bne.n	80043b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d110      	bne.n	8004398 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00f      	b.n	80043b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	1ff80000 	.word	0x1ff80000

080043e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 80cd 	bne.w	80045a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d132      	bne.n	8004478 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	0151      	lsls	r1, r2, #5
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	440a      	add	r2, r1
 800446c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004470:	0cdb      	lsrs	r3, r3, #19
 8004472:	04db      	lsls	r3, r3, #19
 8004474:	6113      	str	r3, [r2, #16]
 8004476:	e04e      	b.n	8004516 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004492:	0cdb      	lsrs	r3, r3, #19
 8004494:	04db      	lsls	r3, r3, #19
 8004496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d903      	bls.n	80044d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	0148      	lsls	r0, r1, #5
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	4401      	add	r1, r0
 800450e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004512:	4313      	orrs	r3, r2
 8004514:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d11e      	bne.n	800455a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e092      	b.n	8004680 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004578:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d07e      	beq.n	8004680 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	6979      	ldr	r1, [r7, #20]
 800459a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800459e:	4313      	orrs	r3, r2
 80045a0:	634b      	str	r3, [r1, #52]	; 0x34
 80045a2:	e06d      	b.n	8004680 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045be:	0cdb      	lsrs	r3, r3, #19
 80045c0:	04db      	lsls	r3, r3, #19
 80045c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004616:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	0148      	lsls	r0, r1, #5
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	4401      	add	r1, r0
 8004636:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800463a:	4313      	orrs	r3, r2
 800463c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10d      	bne.n	8004660 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68d9      	ldr	r1, [r3, #12]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	460a      	mov	r2, r1
 800465e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800467e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800468e:	b480      	push	{r7}
 8004690:	b089      	sub	sp, #36	; 0x24
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	4611      	mov	r1, r2
 800469a:	461a      	mov	r2, r3
 800469c:	460b      	mov	r3, r1
 800469e:	71fb      	strb	r3, [r7, #7]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11a      	bne.n	80046ea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046b4:	88bb      	ldrh	r3, [r7, #4]
 80046b6:	3303      	adds	r3, #3
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e00f      	b.n	80046e2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	031a      	lsls	r2, r3, #12
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ce:	461a      	mov	r2, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3304      	adds	r3, #4
 80046da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	3301      	adds	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3eb      	bcc.n	80046c2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3724      	adds	r7, #36	; 0x24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	3303      	adds	r3, #3
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	e00b      	b.n	8004734 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	601a      	str	r2, [r3, #0]
    pDest++;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	3304      	adds	r3, #4
 800472c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3301      	adds	r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	429a      	cmp	r2, r3
 800473a:	d3ef      	bcc.n	800471c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800473c:	69fb      	ldr	r3, [r7, #28]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d12c      	bne.n	80047c0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	db12      	blt.n	800479e <USB_EPSetStall+0x54>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00f      	beq.n	800479e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800479c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e02b      	b.n	8004818 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	db12      	blt.n	80047f8 <USB_EPSetStall+0xae>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00f      	beq.n	80047f8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004816:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	785b      	ldrb	r3, [r3, #1]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d128      	bne.n	8004894 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004860:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	78db      	ldrb	r3, [r3, #3]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d003      	beq.n	8004872 <USB_EPClearStall+0x4c>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d138      	bne.n	80048e4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e027      	b.n	80048e4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	78db      	ldrb	r3, [r3, #3]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d003      	beq.n	80048c4 <USB_EPClearStall+0x9e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	78db      	ldrb	r3, [r3, #3]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d10f      	bne.n	80048e4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004910:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004914:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004958:	f023 0302 	bic.w	r3, r3, #2
 800495c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800495e:	2003      	movs	r0, #3
 8004960:	f7fc faee 	bl	8000f40 <HAL_Delay>

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800498e:	2003      	movs	r0, #3
 8004990:	f7fc fad6 	bl	8000f40 <HAL_Delay>

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4013      	ands	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	0c1b      	lsrs	r3, r3, #16
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	b29b      	uxth	r3, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	4013      	ands	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
 8004a98:	01db      	lsls	r3, r3, #7
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	460b      	mov	r3, r1
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	333c      	adds	r3, #60	; 0x3c
 8004b3e:	3304      	adds	r3, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <USB_EP0_OutStart+0xb8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d90a      	bls.n	8004b62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b5c:	d101      	bne.n	8004b62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e037      	b.n	8004bd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b90:	f043 0318 	orr.w	r3, r3, #24
 8004b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ba8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004baa:	7afb      	ldrb	r3, [r7, #11]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10f      	bne.n	8004bd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004bce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	4f54300a 	.word	0x4f54300a

08004be4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <USB_CoreReset+0x64>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e01b      	b.n	8004c3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	daf2      	bge.n	8004bf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <USB_CoreReset+0x64>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e006      	b.n	8004c3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d0f0      	beq.n	8004c1a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	00030d40 	.word	0x00030d40

08004c4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c5c:	f002 f93a 	bl	8006ed4 <malloc>
 8004c60:	4603      	mov	r3, r0
 8004c62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004c72:	2302      	movs	r3, #2
 8004c74:	e066      	b.n	8004d44 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7c1b      	ldrb	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d119      	bne.n	8004cba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	2181      	movs	r1, #129	; 0x81
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 ffa7 	bl	8006be2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f001 ff9d 	bl	8006be2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004cb8:	e016      	b.n	8004ce8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	2181      	movs	r1, #129	; 0x81
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 ff8e 	bl	8006be2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	2202      	movs	r2, #2
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 ff85 	bl	8006be2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ce8:	2308      	movs	r3, #8
 8004cea:	2203      	movs	r2, #3
 8004cec:	2182      	movs	r1, #130	; 0x82
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 ff77 	bl	8006be2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	7c1b      	ldrb	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d28:	2101      	movs	r1, #1
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f002 f848 	bl	8006dc0 <USBD_LL_PrepareReceive>
 8004d30:	e007      	b.n	8004d42 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d38:	2340      	movs	r3, #64	; 0x40
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f002 f83f 	bl	8006dc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004d5c:	2181      	movs	r1, #129	; 0x81
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 ff65 	bl	8006c2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 ff5e 	bl	8006c2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004d7a:	2182      	movs	r1, #130	; 0x82
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f001 ff56 	bl	8006c2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00e      	beq.n	8004dba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 f899 	bl	8006ee4 <free>
    pdev->pClassData = NULL;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dd4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d03a      	beq.n	8004e64 <USBD_CDC_Setup+0xa0>
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	f040 8097 	bne.w	8004f22 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	88db      	ldrh	r3, [r3, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d029      	beq.n	8004e50 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da11      	bge.n	8004e2a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004e12:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	88d2      	ldrh	r2, [r2, #6]
 8004e18:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e1a:	6939      	ldr	r1, [r7, #16]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	88db      	ldrh	r3, [r3, #6]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fa9d 	bl	8006362 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004e28:	e082      	b.n	8004f30 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	785a      	ldrb	r2, [r3, #1]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	88db      	ldrh	r3, [r3, #6]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e40:	6939      	ldr	r1, [r7, #16]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	88db      	ldrh	r3, [r3, #6]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 fab6 	bl	80063ba <USBD_CtlPrepareRx>
    break;
 8004e4e:	e06f      	b.n	8004f30 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	7850      	ldrb	r0, [r2, #1]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	4798      	blx	r3
    break;
 8004e62:	e065      	b.n	8004f30 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b0b      	cmp	r3, #11
 8004e6a:	d84f      	bhi.n	8004f0c <USBD_CDC_Setup+0x148>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <USBD_CDC_Setup+0xb0>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ea5 	.word	0x08004ea5
 8004e78:	08004f1b 	.word	0x08004f1b
 8004e7c:	08004f0d 	.word	0x08004f0d
 8004e80:	08004f0d 	.word	0x08004f0d
 8004e84:	08004f0d 	.word	0x08004f0d
 8004e88:	08004f0d 	.word	0x08004f0d
 8004e8c:	08004f0d 	.word	0x08004f0d
 8004e90:	08004f0d 	.word	0x08004f0d
 8004e94:	08004f0d 	.word	0x08004f0d
 8004e98:	08004f0d 	.word	0x08004f0d
 8004e9c:	08004ecd 	.word	0x08004ecd
 8004ea0:	08004ef5 	.word	0x08004ef5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d107      	bne.n	8004ebe <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004eae:	f107 030c 	add.w	r3, r7, #12
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 fa53 	bl	8006362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ebc:	e030      	b.n	8004f20 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 f9dd 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eca:	e029      	b.n	8004f20 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d107      	bne.n	8004ee6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ed6:	f107 030f 	add.w	r3, r7, #15
 8004eda:	2201      	movs	r2, #1
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 fa3f 	bl	8006362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ee4:	e01c      	b.n	8004f20 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 f9c9 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef2:	e015      	b.n	8004f20 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d00f      	beq.n	8004f1e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f9bd 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f06:	2303      	movs	r3, #3
 8004f08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f0a:	e008      	b.n	8004f1e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 f9b6 	bl	8006280 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f14:	2303      	movs	r3, #3
 8004f16:	75fb      	strb	r3, [r7, #23]
      break;
 8004f18:	e002      	b.n	8004f20 <USBD_CDC_Setup+0x15c>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e008      	b.n	8004f30 <USBD_CDC_Setup+0x16c>
      break;
 8004f1e:	bf00      	nop
    }
    break;
 8004f20:	e006      	b.n	8004f30 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 f9ab 	bl	8006280 <USBD_CtlError>
    ret = USBD_FAIL;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	75fb      	strb	r3, [r7, #23]
    break;
 8004f2e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop

08004f3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e049      	b.n	8004ff2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3318      	adds	r3, #24
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d029      	beq.n	8004fd0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f7c:	78fa      	ldrb	r2, [r7, #3]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	3318      	adds	r3, #24
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	78f9      	ldrb	r1, [r7, #3]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	460b      	mov	r3, r1
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	1a5b      	subs	r3, r3, r1
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4403      	add	r3, r0
 8004f9c:	3344      	adds	r3, #68	; 0x44
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fa4:	fb03 f301 	mul.w	r3, r3, r1
 8004fa8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d110      	bne.n	8004fd0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fc2:	78f9      	ldrb	r1, [r7, #3]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 fed8 	bl	8006d7e <USBD_LL_Transmit>
 8004fce:	e00f      	b.n	8004ff0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800500c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005018:	2303      	movs	r3, #3
 800501a:	e015      	b.n	8005048 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f001 feee 	bl	8006e02 <USBD_LL_GetRxDataSize>
 8005026:	4602      	mov	r2, r0
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005042:	4611      	mov	r1, r2
 8005044:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d015      	beq.n	8005096 <USBD_CDC_EP0_RxReady+0x46>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005070:	2bff      	cmp	r3, #255	; 0xff
 8005072:	d010      	beq.n	8005096 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005082:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800508a:	b292      	uxth	r2, r2
 800508c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2243      	movs	r2, #67	; 0x43
 80050ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80050ae:	4b03      	ldr	r3, [pc, #12]	; (80050bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000094 	.word	0x20000094

080050c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2243      	movs	r2, #67	; 0x43
 80050cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80050ce:	4b03      	ldr	r3, [pc, #12]	; (80050dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000050 	.word	0x20000050

080050e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2243      	movs	r2, #67	; 0x43
 80050ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80050ee:	4b03      	ldr	r3, [pc, #12]	; (80050fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	200000d8 	.word	0x200000d8

08005100 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	220a      	movs	r2, #10
 800510c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800510e:	4b03      	ldr	r3, [pc, #12]	; (800511c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	2000000c 	.word	0x2000000c

08005120 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005130:	2303      	movs	r3, #3
 8005132:	e004      	b.n	800513e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800514a:	b480      	push	{r7}
 800514c:	b087      	sub	sp, #28
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800515c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800518c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e01a      	b.n	80051fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d114      	bne.n	80051fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051ee:	2181      	movs	r1, #129	; 0x81
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 fdc4 	bl	8006d7e <USBD_LL_Transmit>

    ret = USBD_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800521e:	2303      	movs	r3, #3
 8005220:	e016      	b.n	8005250 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7c1b      	ldrb	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005234:	2101      	movs	r1, #1
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fdc2 	bl	8006dc0 <USBD_LL_PrepareReceive>
 800523c:	e007      	b.n	800524e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 fdb9 	bl	8006dc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800526c:	2303      	movs	r3, #3
 800526e:	e025      	b.n	80052bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	79fa      	ldrb	r2, [r7, #7]
 80052ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f001 fc2f 	bl	8006b14 <USBD_LL_Init>
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	e010      	b.n	80052fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f107 020e 	add.w	r2, r7, #14
 80052f0:	4610      	mov	r0, r2
 80052f2:	4798      	blx	r3
 80052f4:	4602      	mov	r2, r0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 fc4c 	bl	8006bac <USBD_LL_Start>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4611      	mov	r1, r2
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	4611      	mov	r1, r2
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
  }

  return USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 ff2c 	bl	800620c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053c2:	461a      	mov	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d00e      	beq.n	80053f6 <USBD_LL_SetupStage+0x5a>
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d302      	bcc.n	80053e2 <USBD_LL_SetupStage+0x46>
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d014      	beq.n	800540a <USBD_LL_SetupStage+0x6e>
 80053e0:	e01d      	b.n	800541e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa18 	bl	8005820 <USBD_StdDevReq>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	e020      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa7c 	bl	80058fc <USBD_StdItfReq>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e016      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fab8 	bl	8005988 <USBD_StdEPReq>
 8005418:	4603      	mov	r3, r0
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e00c      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fc1d 	bl	8006c6c <USBD_LL_StallEP>
 8005432:	4603      	mov	r3, r0
 8005434:	73fb      	strb	r3, [r7, #15]
      break;
 8005436:	bf00      	nop
  }

  return ret;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b086      	sub	sp, #24
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	460b      	mov	r3, r1
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005450:	7afb      	ldrb	r3, [r7, #11]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d137      	bne.n	80054c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800545c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005464:	2b03      	cmp	r3, #3
 8005466:	d14a      	bne.n	80054fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d913      	bls.n	800549c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4293      	cmp	r3, r2
 800548c:	bf28      	it	cs
 800548e:	4613      	movcs	r3, r2
 8005490:	461a      	mov	r2, r3
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 ffad 	bl	80063f4 <USBD_CtlContinueRx>
 800549a:	e030      	b.n	80054fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d105      	bne.n	80054be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 ffa9 	bl	8006416 <USBD_CtlSendStatus>
 80054c4:	e01b      	b.n	80054fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d013      	beq.n	80054fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d10e      	bne.n	80054fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	7afa      	ldrb	r2, [r7, #11]
 80054e6:	4611      	mov	r1, r2
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	4798      	blx	r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	e002      	b.n	8005500 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e000      	b.n	8005500 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	460b      	mov	r3, r1
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d16a      	bne.n	80055f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3314      	adds	r3, #20
 8005520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005528:	2b02      	cmp	r3, #2
 800552a:	d155      	bne.n	80055d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d914      	bls.n	8005562 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	1ad2      	subs	r2, r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	461a      	mov	r2, r3
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 ff22 	bl	8006398 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005554:	2300      	movs	r3, #0
 8005556:	2200      	movs	r2, #0
 8005558:	2100      	movs	r1, #0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 fc30 	bl	8006dc0 <USBD_LL_PrepareReceive>
 8005560:	e03a      	b.n	80055d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d11c      	bne.n	80055a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005576:	429a      	cmp	r2, r3
 8005578:	d316      	bcc.n	80055a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005584:	429a      	cmp	r2, r3
 8005586:	d20f      	bcs.n	80055a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005588:	2200      	movs	r2, #0
 800558a:	2100      	movs	r1, #0
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 ff03 	bl	8006398 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800559a:	2300      	movs	r3, #0
 800559c:	2200      	movs	r2, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f001 fc0d 	bl	8006dc0 <USBD_LL_PrepareReceive>
 80055a6:	e017      	b.n	80055d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d105      	bne.n	80055ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055ca:	2180      	movs	r1, #128	; 0x80
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f001 fb4d 	bl	8006c6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 ff32 	bl	800643c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d123      	bne.n	800562a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fe9b 	bl	800531e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80055f0:	e01b      	b.n	800562a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d013      	beq.n	8005626 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005604:	2b03      	cmp	r3, #3
 8005606:	d10e      	bne.n	8005626 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	7afa      	ldrb	r2, [r7, #11]
 8005612:	4611      	mov	r1, r2
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	4798      	blx	r3
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	e002      	b.n	800562c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005626:	2303      	movs	r3, #3
 8005628:	e000      	b.n	800562c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6852      	ldr	r2, [r2, #4]
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	4611      	mov	r1, r2
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	2200      	movs	r2, #0
 800567c:	2100      	movs	r1, #0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 faaf 	bl	8006be2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	2200      	movs	r2, #0
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 faa1 	bl	8006be2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2240      	movs	r2, #64	; 0x40
 80056aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2204      	movs	r2, #4
 80056ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570e:	2b04      	cmp	r3, #4
 8005710:	d105      	bne.n	800571e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573a:	2b03      	cmp	r3, #3
 800573c:	d10b      	bne.n	8005756 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6852      	ldr	r2, [r2, #4]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	4611      	mov	r1, r2
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
  }

  return USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b087      	sub	sp, #28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3301      	adds	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005800:	8a3b      	ldrh	r3, [r7, #16]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	b21a      	sxth	r2, r3
 8005806:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800580a:	4313      	orrs	r3, r2
 800580c:	b21b      	sxth	r3, r3
 800580e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005810:	89fb      	ldrh	r3, [r7, #14]
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005836:	2b20      	cmp	r3, #32
 8005838:	d004      	beq.n	8005844 <USBD_StdDevReq+0x24>
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d002      	beq.n	8005844 <USBD_StdDevReq+0x24>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <USBD_StdDevReq+0x38>
 8005842:	e050      	b.n	80058e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
    break;
 8005856:	e04b      	b.n	80058f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b09      	cmp	r3, #9
 800585e:	d83c      	bhi.n	80058da <USBD_StdDevReq+0xba>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <USBD_StdDevReq+0x48>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	080058bd 	.word	0x080058bd
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058db 	.word	0x080058db
 8005874:	080058c7 	.word	0x080058c7
 8005878:	080058db 	.word	0x080058db
 800587c:	0800589b 	.word	0x0800589b
 8005880:	08005891 	.word	0x08005891
 8005884:	080058db 	.word	0x080058db
 8005888:	080058b3 	.word	0x080058b3
 800588c:	080058a5 	.word	0x080058a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9ce 	bl	8005c34 <USBD_GetDescriptor>
      break;
 8005898:	e024      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb33 	bl	8005f08 <USBD_SetAddress>
      break;
 80058a2:	e01f      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb70 	bl	8005f8c <USBD_SetConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	e018      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fc0d 	bl	80060d4 <USBD_GetConfig>
      break;
 80058ba:	e013      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fc3c 	bl	800613c <USBD_GetStatus>
      break;
 80058c4:	e00e      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fc6a 	bl	80061a2 <USBD_SetFeature>
      break;
 80058ce:	e009      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc79 	bl	80061ca <USBD_ClrFeature>
      break;
 80058d8:	e004      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fccf 	bl	8006280 <USBD_CtlError>
      break;
 80058e2:	bf00      	nop
    }
    break;
 80058e4:	e004      	b.n	80058f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fcc9 	bl	8006280 <USBD_CtlError>
    break;
 80058ee:	bf00      	nop
  }

  return ret;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005912:	2b20      	cmp	r3, #32
 8005914:	d003      	beq.n	800591e <USBD_StdItfReq+0x22>
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d001      	beq.n	800591e <USBD_StdItfReq+0x22>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12a      	bne.n	8005974 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	3b01      	subs	r3, #1
 8005926:	2b02      	cmp	r3, #2
 8005928:	d81d      	bhi.n	8005966 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	889b      	ldrh	r3, [r3, #4]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d813      	bhi.n	800595c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	88db      	ldrh	r3, [r3, #6]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d110      	bne.n	8005970 <USBD_StdItfReq+0x74>
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10d      	bne.n	8005970 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fd5e 	bl	8006416 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800595a:	e009      	b.n	8005970 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fc8e 	bl	8006280 <USBD_CtlError>
      break;
 8005964:	e004      	b.n	8005970 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fc89 	bl	8006280 <USBD_CtlError>
      break;
 800596e:	e000      	b.n	8005972 <USBD_StdItfReq+0x76>
      break;
 8005970:	bf00      	nop
    }
    break;
 8005972:	e004      	b.n	800597e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc82 	bl	8006280 <USBD_CtlError>
    break;
 800597c:	bf00      	nop
  }

  return ret;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	889b      	ldrh	r3, [r3, #4]
 800599a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d004      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d002      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <USBD_StdEPReq+0x3e>
 80059b0:	e135      	b.n	8005c1e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]
    break;
 80059c4:	e130      	b.n	8005c28 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d03e      	beq.n	8005a4c <USBD_StdEPReq+0xc4>
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d002      	beq.n	80059d8 <USBD_StdEPReq+0x50>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d077      	beq.n	8005ac6 <USBD_StdEPReq+0x13e>
 80059d6:	e11c      	b.n	8005c12 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <USBD_StdEPReq+0x60>
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d015      	beq.n	8005a12 <USBD_StdEPReq+0x8a>
 80059e6:	e02b      	b.n	8005a40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <USBD_StdEPReq+0x80>
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d009      	beq.n	8005a08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f937 	bl	8006c6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f933 	bl	8006c6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a06:	e020      	b.n	8005a4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fc38 	bl	8006280 <USBD_CtlError>
        break;
 8005a10:	e01b      	b.n	8005a4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	885b      	ldrh	r3, [r3, #2]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10e      	bne.n	8005a38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <USBD_StdEPReq+0xb0>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d008      	beq.n	8005a38 <USBD_StdEPReq+0xb0>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	88db      	ldrh	r3, [r3, #6]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 f91a 	bl	8006c6c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fcec 	bl	8006416 <USBD_CtlSendStatus>

        break;
 8005a3e:	e004      	b.n	8005a4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fc1c 	bl	8006280 <USBD_CtlError>
        break;
 8005a48:	bf00      	nop
      }
      break;
 8005a4a:	e0e7      	b.n	8005c1c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d002      	beq.n	8005a5c <USBD_StdEPReq+0xd4>
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d015      	beq.n	8005a86 <USBD_StdEPReq+0xfe>
 8005a5a:	e02d      	b.n	8005ab8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <USBD_StdEPReq+0xf4>
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d009      	beq.n	8005a7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 f8fd 	bl	8006c6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a72:	2180      	movs	r1, #128	; 0x80
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f8f9 	bl	8006c6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a7a:	e023      	b.n	8005ac4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fbfe 	bl	8006280 <USBD_CtlError>
        break;
 8005a84:	e01e      	b.n	8005ac4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d119      	bne.n	8005ac2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 f904 	bl	8006caa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fcb7 	bl	8006416 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
        }
        break;
 8005ab6:	e004      	b.n	8005ac2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fbe0 	bl	8006280 <USBD_CtlError>
        break;
 8005ac0:	e000      	b.n	8005ac4 <USBD_StdEPReq+0x13c>
        break;
 8005ac2:	bf00      	nop
      }
      break;
 8005ac4:	e0aa      	b.n	8005c1c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d002      	beq.n	8005ad6 <USBD_StdEPReq+0x14e>
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d032      	beq.n	8005b3a <USBD_StdEPReq+0x1b2>
 8005ad4:	e097      	b.n	8005c06 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <USBD_StdEPReq+0x164>
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d004      	beq.n	8005aec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbcb 	bl	8006280 <USBD_CtlError>
          break;
 8005aea:	e091      	b.n	8005c10 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da0b      	bge.n	8005b0c <USBD_StdEPReq+0x184>
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	3310      	adds	r3, #16
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	3304      	adds	r3, #4
 8005b0a:	e00b      	b.n	8005b24 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	3304      	adds	r3, #4
 8005b24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fc15 	bl	8006362 <USBD_CtlSendData>
        break;
 8005b38:	e06a      	b.n	8005c10 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da11      	bge.n	8005b66 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d117      	bne.n	8005b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fb8e 	bl	8006280 <USBD_CtlError>
            break;
 8005b64:	e054      	b.n	8005c10 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb7b 	bl	8006280 <USBD_CtlError>
            break;
 8005b8a:	e041      	b.n	8005c10 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da0b      	bge.n	8005bac <USBD_StdEPReq+0x224>
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3304      	adds	r3, #4
 8005baa:	e00b      	b.n	8005bc4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <USBD_StdEPReq+0x24a>
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d103      	bne.n	8005bda <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e00e      	b.n	8005bf8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 f882 	bl	8006ce8 <USBD_LL_IsStallEP>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fbaf 	bl	8006362 <USBD_CtlSendData>
          break;
 8005c04:	e004      	b.n	8005c10 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fb39 	bl	8006280 <USBD_CtlError>
        break;
 8005c0e:	bf00      	nop
      }
      break;
 8005c10:	e004      	b.n	8005c1c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb33 	bl	8006280 <USBD_CtlError>
      break;
 8005c1a:	bf00      	nop
    }
    break;
 8005c1c:	e004      	b.n	8005c28 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb2d 	bl	8006280 <USBD_CtlError>
    break;
 8005c26:	bf00      	nop
  }

  return ret;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	885b      	ldrh	r3, [r3, #2]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	f200 8128 	bhi.w	8005eaa <USBD_GetDescriptor+0x276>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <USBD_GetDescriptor+0x2c>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c95 	.word	0x08005c95
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005eab 	.word	0x08005eab
 8005c70:	08005eab 	.word	0x08005eab
 8005c74:	08005e4b 	.word	0x08005e4b
 8005c78:	08005e77 	.word	0x08005e77
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	7c12      	ldrb	r2, [r2, #16]
 8005c88:	f107 0108 	add.w	r1, r7, #8
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	60f8      	str	r0, [r7, #12]
    break;
 8005c92:	e112      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	f107 0208 	add.w	r2, r7, #8
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005cb6:	e100      	b.n	8005eba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f107 0208 	add.w	r2, r7, #8
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2202      	movs	r2, #2
 8005cd0:	701a      	strb	r2, [r3, #0]
    break;
 8005cd2:	e0f2      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	f200 80ac 	bhi.w	8005e38 <USBD_GetDescriptor+0x204>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USBD_GetDescriptor+0xb4>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d9d 	.word	0x08005d9d
 8005cf8:	08005dd1 	.word	0x08005dd1
 8005cfc:	08005e05 	.word	0x08005e05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d22:	e091      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 faaa 	bl	8006280 <USBD_CtlError>
        err++;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	72fb      	strb	r3, [r7, #11]
      break;
 8005d32:	e089      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d56:	e077      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa90 	bl	8006280 <USBD_CtlError>
        err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
      break;
 8005d66:	e06f      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d8a:	e05d      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa76 	bl	8006280 <USBD_CtlError>
        err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
      break;
 8005d9a:	e055      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dbe:	e043      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa5c 	bl	8006280 <USBD_CtlError>
        err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8005dce:	e03b      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7c12      	ldrb	r2, [r2, #16]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005df2:	e029      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa42 	bl	8006280 <USBD_CtlError>
        err++;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	72fb      	strb	r3, [r7, #11]
      break;
 8005e02:	e021      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7c12      	ldrb	r2, [r2, #16]
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e26:	e00f      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa28 	bl	8006280 <USBD_CtlError>
        err++;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	72fb      	strb	r3, [r7, #11]
      break;
 8005e36:	e007      	b.n	8005e48 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa20 	bl	8006280 <USBD_CtlError>
      err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005e46:	bf00      	nop
    }
    break;
 8005e48:	e037      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7c1b      	ldrb	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	f107 0208 	add.w	r2, r7, #8
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4798      	blx	r3
 8005e62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e64:	e029      	b.n	8005eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa09 	bl	8006280 <USBD_CtlError>
      err++;
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	3301      	adds	r3, #1
 8005e72:	72fb      	strb	r3, [r7, #11]
    break;
 8005e74:	e021      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7c1b      	ldrb	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f107 0208 	add.w	r2, r7, #8
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4798      	blx	r3
 8005e8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	2207      	movs	r2, #7
 8005e96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e98:	e00f      	b.n	8005eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f9ef 	bl	8006280 <USBD_CtlError>
      err++;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	72fb      	strb	r3, [r7, #11]
    break;
 8005ea8:	e007      	b.n	8005eba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9e7 	bl	8006280 <USBD_CtlError>
    err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
    break;
 8005eb8:	bf00      	nop
  }

  if (err != 0U)
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11e      	bne.n	8005efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	88db      	ldrh	r3, [r3, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d016      	beq.n	8005ef6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005ec8:	893b      	ldrh	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88da      	ldrh	r2, [r3, #6]
 8005ed2:	893b      	ldrh	r3, [r7, #8]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bf28      	it	cs
 8005ed8:	4613      	movcs	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ede:	893b      	ldrh	r3, [r7, #8]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fa3c 	bl	8006362 <USBD_CtlSendData>
 8005eea:	e009      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9c6 	bl	8006280 <USBD_CtlError>
 8005ef4:	e004      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa8d 	bl	8006416 <USBD_CtlSendStatus>
 8005efc:	e000      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
    return;
 8005efe:	bf00      	nop
    }
  }
}
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d130      	bne.n	8005f7c <USBD_SetAddress+0x74>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12c      	bne.n	8005f7c <USBD_SetAddress+0x74>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	2b7f      	cmp	r3, #127	; 0x7f
 8005f28:	d828      	bhi.n	8005f7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d104      	bne.n	8005f4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f99c 	bl	8006280 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f48:	e01c      	b.n	8005f84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7bfa      	ldrb	r2, [r7, #15]
 8005f4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fef2 	bl	8006d40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa5a 	bl	8006416 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f70:	e008      	b.n	8005f84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7a:	e003      	b.n	8005f84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f97e 	bl	8006280 <USBD_CtlError>
  }
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	885b      	ldrh	r3, [r3, #2]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b4b      	ldr	r3, [pc, #300]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fa4:	4b4a      	ldr	r3, [pc, #296]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d905      	bls.n	8005fb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f966 	bl	8006280 <USBD_CtlError>
    return USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e087      	b.n	80060c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USBD_SetConfig+0x3c>
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d025      	beq.n	8006012 <USBD_SetConfig+0x86>
 8005fc6:	e071      	b.n	80060ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005fc8:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01c      	beq.n	800600a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005fd0:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fda:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff f9a7 	bl	8005334 <USBD_SetClassConfig>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f944 	bl	8006280 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005ff8:	e065      	b.n	80060c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa0b 	bl	8006416 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2203      	movs	r2, #3
 8006004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006008:	e05d      	b.n	80060c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa03 	bl	8006416 <USBD_CtlSendStatus>
    break;
 8006010:	e059      	b.n	80060c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006012:	4b2f      	ldr	r3, [pc, #188]	; (80060d0 <USBD_SetConfig+0x144>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d112      	bne.n	8006040 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006022:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <USBD_SetConfig+0x144>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800602c:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <USBD_SetConfig+0x144>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff f99a 	bl	800536c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f9ec 	bl	8006416 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800603e:	e042      	b.n	80060c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006040:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <USBD_SetConfig+0x144>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d02a      	beq.n	80060a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff f988 	bl	800536c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800605c:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <USBD_SetConfig+0x144>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <USBD_SetConfig+0x144>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff f961 	bl	8005334 <USBD_SetClassConfig>
 8006072:	4603      	mov	r3, r0
 8006074:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00f      	beq.n	800609c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8fe 	bl	8006280 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f96d 	bl	800536c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800609a:	e014      	b.n	80060c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9ba 	bl	8006416 <USBD_CtlSendStatus>
    break;
 80060a2:	e010      	b.n	80060c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9b6 	bl	8006416 <USBD_CtlSendStatus>
    break;
 80060aa:	e00c      	b.n	80060c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8e6 	bl	8006280 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <USBD_SetConfig+0x144>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff f956 	bl	800536c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	73fb      	strb	r3, [r7, #15]
    break;
 80060c4:	bf00      	nop
  }

  return ret;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000204 	.word	0x20000204

080060d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d004      	beq.n	80060f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8c9 	bl	8006280 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80060ee:	e021      	b.n	8006134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	db17      	blt.n	800612a <USBD_GetConfig+0x56>
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	dd02      	ble.n	8006104 <USBD_GetConfig+0x30>
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d00b      	beq.n	800611a <USBD_GetConfig+0x46>
 8006102:	e012      	b.n	800612a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3308      	adds	r3, #8
 800610e:	2201      	movs	r2, #1
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f925 	bl	8006362 <USBD_CtlSendData>
      break;
 8006118:	e00c      	b.n	8006134 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2201      	movs	r2, #1
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f91d 	bl	8006362 <USBD_CtlSendData>
      break;
 8006128:	e004      	b.n	8006134 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8a7 	bl	8006280 <USBD_CtlError>
      break;
 8006132:	bf00      	nop
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614c:	3b01      	subs	r3, #1
 800614e:	2b02      	cmp	r3, #2
 8006150:	d81e      	bhi.n	8006190 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	88db      	ldrh	r3, [r3, #6]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d004      	beq.n	8006164 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f88f 	bl	8006280 <USBD_CtlError>
      break;
 8006162:	e01a      	b.n	800619a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f043 0202 	orr.w	r2, r3, #2
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	330c      	adds	r3, #12
 8006184:	2202      	movs	r2, #2
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8ea 	bl	8006362 <USBD_CtlSendData>
    break;
 800618e:	e004      	b.n	800619a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f874 	bl	8006280 <USBD_CtlError>
    break;
 8006198:	bf00      	nop
  }
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d106      	bne.n	80061c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f92a 	bl	8006416 <USBD_CtlSendStatus>
  }
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061da:	3b01      	subs	r3, #1
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d80b      	bhi.n	80061f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	885b      	ldrh	r3, [r3, #2]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10c      	bne.n	8006202 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f910 	bl	8006416 <USBD_CtlSendStatus>
      }
      break;
 80061f6:	e004      	b.n	8006202 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f840 	bl	8006280 <USBD_CtlError>
      break;
 8006200:	e000      	b.n	8006204 <USBD_ClrFeature+0x3a>
      break;
 8006202:	bf00      	nop
  }
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fad3 	bl	80057e2 <SWAPBYTE>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fac6 	bl	80057e2 <SWAPBYTE>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fab9 	bl	80057e2 <SWAPBYTE>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	80da      	strh	r2, [r3, #6]
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fced 	bl	8006c6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fce9 	bl	8006c6c <USBD_LL_StallEP>
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d036      	beq.n	8006326 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062bc:	6938      	ldr	r0, [r7, #16]
 80062be:	f000 f836 	bl	800632e <USBD_GetLen>
 80062c2:	4603      	mov	r3, r0
 80062c4:	3301      	adds	r3, #1
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
  idx++;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	3301      	adds	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4413      	add	r3, r2
 80062e8:	2203      	movs	r2, #3
 80062ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	3301      	adds	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80062f2:	e013      	b.n	800631c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4413      	add	r3, r2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3301      	adds	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
    idx++;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	3301      	adds	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
    idx++;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	3301      	adds	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e7      	bne.n	80062f4 <USBD_GetString+0x52>
 8006324:	e000      	b.n	8006328 <USBD_GetString+0x86>
    return;
 8006326:	bf00      	nop
  }
}
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800633e:	e005      	b.n	800634c <USBD_GetLen+0x1e>
  {
    len++;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	3301      	adds	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f5      	bne.n	8006340 <USBD_GetLen+0x12>
  }

  return len;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	2100      	movs	r1, #0
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fcf8 	bl	8006d7e <USBD_LL_Transmit>

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	2100      	movs	r1, #0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fce7 	bl	8006d7e <USBD_LL_Transmit>

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2203      	movs	r2, #3
 80063ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	2100      	movs	r1, #0
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fceb 	bl	8006dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	2100      	movs	r1, #0
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fcda 	bl	8006dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2204      	movs	r2, #4
 8006422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006426:	2300      	movs	r3, #0
 8006428:	2200      	movs	r2, #0
 800642a:	2100      	movs	r1, #0
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fca6 	bl	8006d7e <USBD_LL_Transmit>

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2205      	movs	r2, #5
 8006448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800644c:	2300      	movs	r3, #0
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fcb4 	bl	8006dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006468:	2200      	movs	r2, #0
 800646a:	4912      	ldr	r1, [pc, #72]	; (80064b4 <MX_USB_DEVICE_Init+0x50>)
 800646c:	4812      	ldr	r0, [pc, #72]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 800646e:	f7fe fef3 	bl	8005258 <USBD_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006478:	f7fa fa06 	bl	8000888 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800647c:	490f      	ldr	r1, [pc, #60]	; (80064bc <MX_USB_DEVICE_Init+0x58>)
 800647e:	480e      	ldr	r0, [pc, #56]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 8006480:	f7fe ff20 	bl	80052c4 <USBD_RegisterClass>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800648a:	f7fa f9fd 	bl	8000888 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800648e:	490c      	ldr	r1, [pc, #48]	; (80064c0 <MX_USB_DEVICE_Init+0x5c>)
 8006490:	4809      	ldr	r0, [pc, #36]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 8006492:	f7fe fe45 	bl	8005120 <USBD_CDC_RegisterInterface>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800649c:	f7fa f9f4 	bl	8000888 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064a0:	4805      	ldr	r0, [pc, #20]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 80064a2:	f7fe ff30 	bl	8005306 <USBD_Start>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064ac:	f7fa f9ec 	bl	8000888 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000130 	.word	0x20000130
 80064b8:	2000029c 	.word	0x2000029c
 80064bc:	20000018 	.word	0x20000018
 80064c0:	2000011c 	.word	0x2000011c

080064c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064c8:	2200      	movs	r2, #0
 80064ca:	4905      	ldr	r1, [pc, #20]	; (80064e0 <CDC_Init_FS+0x1c>)
 80064cc:	4805      	ldr	r0, [pc, #20]	; (80064e4 <CDC_Init_FS+0x20>)
 80064ce:	f7fe fe3c 	bl	800514a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064d2:	4905      	ldr	r1, [pc, #20]	; (80064e8 <CDC_Init_FS+0x24>)
 80064d4:	4803      	ldr	r0, [pc, #12]	; (80064e4 <CDC_Init_FS+0x20>)
 80064d6:	f7fe fe51 	bl	800517c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80064da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80064dc:	4618      	mov	r0, r3
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	200005f0 	.word	0x200005f0
 80064e4:	2000029c 	.word	0x2000029c
 80064e8:	200005b0 	.word	0x200005b0

080064ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80064f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	6039      	str	r1, [r7, #0]
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	4613      	mov	r3, r2
 800650a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b23      	cmp	r3, #35	; 0x23
 8006510:	d84a      	bhi.n	80065a8 <CDC_Control_FS+0xac>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <CDC_Control_FS+0x1c>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065a9 	.word	0x080065a9
 8006520:	080065a9 	.word	0x080065a9
 8006524:	080065a9 	.word	0x080065a9
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065a9 	.word	0x080065a9
 8006530:	080065a9 	.word	0x080065a9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	080065a9 	.word	0x080065a9
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080065a9 	.word	0x080065a9
 800654c:	080065a9 	.word	0x080065a9
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080065a9 	.word	0x080065a9
 800655c:	080065a9 	.word	0x080065a9
 8006560:	080065a9 	.word	0x080065a9
 8006564:	080065a9 	.word	0x080065a9
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065a9 	.word	0x080065a9
 8006570:	080065a9 	.word	0x080065a9
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065a9 	.word	0x080065a9
 800657c:	080065a9 	.word	0x080065a9
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065a9 	.word	0x080065a9
 800658c:	080065a9 	.word	0x080065a9
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065a9 	.word	0x080065a9
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065a9 	.word	0x080065a9
 80065a0:	080065a9 	.word	0x080065a9
 80065a4:	080065a9 	.word	0x080065a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065a8:	bf00      	nop
  }

  return (USBD_OK);
 80065aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	480a      	ldr	r0, [pc, #40]	; (80065f0 <CDC_Receive_FS+0x38>)
 80065c6:	f7fe fdd9 	bl	800517c <USBD_CDC_SetRxBuffer>

  strncpy(str_rx_BUF,(char*)Buf,*Len);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4808      	ldr	r0, [pc, #32]	; (80065f4 <CDC_Receive_FS+0x3c>)
 80065d4:	f000 fd4e 	bl	8007074 <strncpy>
  str_rx_LEN=*Len;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a06      	ldr	r2, [pc, #24]	; (80065f8 <CDC_Receive_FS+0x40>)
 80065de:	6013      	str	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065e0:	4803      	ldr	r0, [pc, #12]	; (80065f0 <CDC_Receive_FS+0x38>)
 80065e2:	f7fe fe0f 	bl	8005204 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065e6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	2000029c 	.word	0x2000029c
 80065f4:	2000056c 	.word	0x2000056c
 80065f8:	200005ac 	.word	0x200005ac

080065fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <CDC_Transmit_FS+0x48>)
 800660e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006612:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800661e:	2301      	movs	r3, #1
 8006620:	e00b      	b.n	800663a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006622:	887b      	ldrh	r3, [r7, #2]
 8006624:	461a      	mov	r2, r3
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4806      	ldr	r0, [pc, #24]	; (8006644 <CDC_Transmit_FS+0x48>)
 800662a:	f7fe fd8e 	bl	800514a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800662e:	4805      	ldr	r0, [pc, #20]	; (8006644 <CDC_Transmit_FS+0x48>)
 8006630:	f7fe fdb8 	bl	80051a4 <USBD_CDC_TransmitPacket>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	2000029c 	.word	0x2000029c

08006648 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800665a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800665e:	4618      	mov	r0, r3
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2212      	movs	r2, #18
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	2000014c 	.word	0x2000014c

08006690 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	6039      	str	r1, [r7, #0]
 800669a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2204      	movs	r2, #4
 80066a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066a2:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20000160 	.word	0x20000160

080066b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4907      	ldr	r1, [pc, #28]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066ca:	4808      	ldr	r0, [pc, #32]	; (80066ec <USBD_FS_ProductStrDescriptor+0x38>)
 80066cc:	f7ff fde9 	bl	80062a2 <USBD_GetString>
 80066d0:	e004      	b.n	80066dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4904      	ldr	r1, [pc, #16]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066d6:	4805      	ldr	r0, [pc, #20]	; (80066ec <USBD_FS_ProductStrDescriptor+0x38>)
 80066d8:	f7ff fde3 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000630 	.word	0x20000630
 80066ec:	080070e4 	.word	0x080070e4

080066f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	4904      	ldr	r1, [pc, #16]	; (8006710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006700:	4804      	ldr	r0, [pc, #16]	; (8006714 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006702:	f7ff fdce 	bl	80062a2 <USBD_GetString>
  return USBD_StrDesc;
 8006706:	4b02      	ldr	r3, [pc, #8]	; (8006710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000630 	.word	0x20000630
 8006714:	080070fc 	.word	0x080070fc

08006718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	221a      	movs	r2, #26
 8006728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800672a:	f000 f843 	bl	80067b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800672e:	4b02      	ldr	r3, [pc, #8]	; (8006738 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000164 	.word	0x20000164

0800673c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	6039      	str	r1, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d105      	bne.n	800675a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4907      	ldr	r1, [pc, #28]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006752:	4808      	ldr	r0, [pc, #32]	; (8006774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006754:	f7ff fda5 	bl	80062a2 <USBD_GetString>
 8006758:	e004      	b.n	8006764 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	4904      	ldr	r1, [pc, #16]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800675e:	4805      	ldr	r0, [pc, #20]	; (8006774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006760:	f7ff fd9f 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006764:	4b02      	ldr	r3, [pc, #8]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000630 	.word	0x20000630
 8006774:	08007110 	.word	0x08007110

08006778 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4907      	ldr	r1, [pc, #28]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800678e:	4808      	ldr	r0, [pc, #32]	; (80067b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006790:	f7ff fd87 	bl	80062a2 <USBD_GetString>
 8006794:	e004      	b.n	80067a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4904      	ldr	r1, [pc, #16]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800679a:	4805      	ldr	r0, [pc, #20]	; (80067b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800679c:	f7ff fd81 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000630 	.word	0x20000630
 80067b0:	0800711c 	.word	0x0800711c

080067b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <Get_SerialNum+0x44>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067c0:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <Get_SerialNum+0x48>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <Get_SerialNum+0x4c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067da:	2208      	movs	r2, #8
 80067dc:	4909      	ldr	r1, [pc, #36]	; (8006804 <Get_SerialNum+0x50>)
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f814 	bl	800680c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067e4:	2204      	movs	r2, #4
 80067e6:	4908      	ldr	r1, [pc, #32]	; (8006808 <Get_SerialNum+0x54>)
 80067e8:	68b8      	ldr	r0, [r7, #8]
 80067ea:	f000 f80f 	bl	800680c <IntToUnicode>
  }
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	1fff7a10 	.word	0x1fff7a10
 80067fc:	1fff7a14 	.word	0x1fff7a14
 8006800:	1fff7a18 	.word	0x1fff7a18
 8006804:	20000166 	.word	0x20000166
 8006808:	20000176 	.word	0x20000176

0800680c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]
 8006822:	e027      	b.n	8006874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	0f1b      	lsrs	r3, r3, #28
 8006828:	2b09      	cmp	r3, #9
 800682a:	d80b      	bhi.n	8006844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0f1b      	lsrs	r3, r3, #28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4619      	mov	r1, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	440b      	add	r3, r1
 800683c:	3230      	adds	r2, #48	; 0x30
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e00a      	b.n	800685a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	0f1b      	lsrs	r3, r3, #28
 8006848:	b2da      	uxtb	r2, r3
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4619      	mov	r1, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	440b      	add	r3, r1
 8006854:	3237      	adds	r2, #55	; 0x37
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	3301      	adds	r3, #1
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	3301      	adds	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
 8006874:	7dfa      	ldrb	r2, [r7, #23]
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3d3      	bcc.n	8006824 <IntToUnicode+0x18>
  }
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006890:	f107 0314 	add.w	r3, r7, #20
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	605a      	str	r2, [r3, #4]
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	60da      	str	r2, [r3, #12]
 800689e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068a8:	d13a      	bne.n	8006920 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6313      	str	r3, [r2, #48]	; 0x30
 80068ba:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80068ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068cc:	2302      	movs	r3, #2
 80068ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d4:	2303      	movs	r3, #3
 80068d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068d8:	230a      	movs	r3, #10
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068dc:	f107 0314 	add.w	r3, r7, #20
 80068e0:	4619      	mov	r1, r3
 80068e2:	4812      	ldr	r0, [pc, #72]	; (800692c <HAL_PCD_MspInit+0xa4>)
 80068e4:	f7fa fc7c 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ec:	4a0e      	ldr	r2, [pc, #56]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	6353      	str	r3, [r2, #52]	; 0x34
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006902:	6453      	str	r3, [r2, #68]	; 0x44
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	2043      	movs	r0, #67	; 0x43
 8006916:	f7fa fc10 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800691a:	2043      	movs	r0, #67	; 0x43
 800691c:	f7fa fc29 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006920:	bf00      	nop
 8006922:	3728      	adds	r7, #40	; 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	40020000 	.word	0x40020000

08006930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f7fe fd28 	bl	800539c <USBD_LL_SetupStage>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	4619      	mov	r1, r3
 800697e:	f7fe fd60 	bl	8005442 <USBD_LL_DataOutStage>
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	3348      	adds	r3, #72	; 0x48
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	4619      	mov	r1, r3
 80069b2:	f7fe fda9 	bl	8005508 <USBD_LL_DataInStage>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fead 	bl	800572c <USBD_LL_SOF>
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069e2:	2301      	movs	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
 80069f2:	e008      	b.n	8006a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d102      	bne.n	8006a02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
 8006a00:	e001      	b.n	8006a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006a02:	f7f9 ff41 	bl	8000888 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a0c:	7bfa      	ldrb	r2, [r7, #15]
 8006a0e:	4611      	mov	r1, r2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fe50 	bl	80056b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe fe09 	bl	8005634 <USBD_LL_Reset>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe fe4b 	bl	80056d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <HAL_PCD_SuspendCallback+0x48>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	4a03      	ldr	r2, [pc, #12]	; (8006a74 <HAL_PCD_SuspendCallback+0x48>)
 8006a66:	f043 0306 	orr.w	r3, r3, #6
 8006a6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fe3a 	bl	8005700 <USBD_LL_Resume>
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fe65 	bl	800577a <USBD_LL_IsoOUTIncomplete>
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006aca:	78fa      	ldrb	r2, [r7, #3]
 8006acc:	4611      	mov	r1, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fe46 	bl	8005760 <USBD_LL_IsoINIncomplete>
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fe52 	bl	8005794 <USBD_LL_DevConnected>
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fe4f 	bl	80057aa <USBD_LL_DevDisconnected>
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d13c      	bne.n	8006b9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b24:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b34:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b3e:	2204      	movs	r2, #4
 8006b40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b42:	4b19      	ldr	r3, [pc, #100]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b44:	2202      	movs	r2, #2
 8006b46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b48:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b4e:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b50:	2202      	movs	r2, #2
 8006b52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b54:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b60:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b66:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b72:	480d      	ldr	r0, [pc, #52]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b74:	f7fa fce7 	bl	8001546 <HAL_PCD_Init>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b7e:	f7f9 fe83 	bl	8000888 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	4808      	ldr	r0, [pc, #32]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b86:	f7fb fe44 	bl	8002812 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b8a:	2240      	movs	r2, #64	; 0x40
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4806      	ldr	r0, [pc, #24]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b90:	f7fb fdf8 	bl	8002784 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	2101      	movs	r1, #1
 8006b98:	4803      	ldr	r0, [pc, #12]	; (8006ba8 <USBD_LL_Init+0x94>)
 8006b9a:	f7fb fdf3 	bl	8002784 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000830 	.word	0x20000830

08006bac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fa fddc 	bl	8001780 <HAL_PCD_Start>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f92a 	bl	8006e28 <USBD_Get_USB_Status>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	70fb      	strb	r3, [r7, #3]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70bb      	strb	r3, [r7, #2]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c0a:	78bb      	ldrb	r3, [r7, #2]
 8006c0c:	883a      	ldrh	r2, [r7, #0]
 8006c0e:	78f9      	ldrb	r1, [r7, #3]
 8006c10:	f7fb f9c0 	bl	8001f94 <HAL_PCD_EP_Open>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f904 	bl	8006e28 <USBD_Get_USB_Status>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fb fa09 	bl	8002064 <HAL_PCD_EP_Close>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f8e5 	bl	8006e28 <USBD_Get_USB_Status>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fb fae1 	bl	8002252 <HAL_PCD_EP_SetStall>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f8c6 	bl	8006e28 <USBD_Get_USB_Status>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cc4:	78fa      	ldrb	r2, [r7, #3]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fb fb26 	bl	800231a <HAL_PCD_EP_ClrStall>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f8a7 	bl	8006e28 <USBD_Get_USB_Status>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cfa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da0b      	bge.n	8006d1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	333e      	adds	r3, #62	; 0x3e
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	e00b      	b.n	8006d34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	4613      	mov	r3, r2
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fb f8f3 	bl	8001f4a <HAL_PCD_SetAddress>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 f85c 	bl	8006e28 <USBD_Get_USB_Status>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d9c:	7af9      	ldrb	r1, [r7, #11]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	f7fb fa0c 	bl	80021be <HAL_PCD_EP_Transmit>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 f83b 	bl	8006e28 <USBD_Get_USB_Status>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006db6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006dde:	7af9      	ldrb	r1, [r7, #11]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	f7fb f988 	bl	80020f8 <HAL_PCD_EP_Receive>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f81a 	bl	8006e28 <USBD_Get_USB_Status>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006df8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	4611      	mov	r1, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fb f9b8 	bl	800218e <HAL_PCD_EP_GetRxCount>
 8006e1e:	4603      	mov	r3, r0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d817      	bhi.n	8006e6c <USBD_Get_USB_Status+0x44>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <USBD_Get_USB_Status+0x1c>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e5b 	.word	0x08006e5b
 8006e4c:	08006e61 	.word	0x08006e61
 8006e50:	08006e67 	.word	0x08006e67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
    break;
 8006e58:	e00b      	b.n	8006e72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e5e:	e008      	b.n	8006e72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e60:	2301      	movs	r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]
    break;
 8006e64:	e005      	b.n	8006e72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e66:	2303      	movs	r3, #3
 8006e68:	73fb      	strb	r3, [r7, #15]
    break;
 8006e6a:	e002      	b.n	8006e72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e70:	bf00      	nop
  }
  return usb_status;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <__errno>:
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <__errno+0x8>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000180 	.word	0x20000180

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4e0d      	ldr	r6, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1ba4      	subs	r4, r4, r6
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2500      	movs	r5, #0
 8006e98:	42a5      	cmp	r5, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4e0b      	ldr	r6, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 f900 	bl	80070a4 <_init>
 8006ea4:	1ba4      	subs	r4, r4, r6
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	42a5      	cmp	r5, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eb4:	4798      	blx	r3
 8006eb6:	3501      	adds	r5, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ebe:	4798      	blx	r3
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08007144 	.word	0x08007144
 8006ec8:	08007144 	.word	0x08007144
 8006ecc:	08007144 	.word	0x08007144
 8006ed0:	08007148 	.word	0x08007148

08006ed4 <malloc>:
 8006ed4:	4b02      	ldr	r3, [pc, #8]	; (8006ee0 <malloc+0xc>)
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	f000 b861 	b.w	8006fa0 <_malloc_r>
 8006ede:	bf00      	nop
 8006ee0:	20000180 	.word	0x20000180

08006ee4 <free>:
 8006ee4:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <free+0xc>)
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f000 b80b 	b.w	8006f04 <_free_r>
 8006eee:	bf00      	nop
 8006ef0:	20000180 	.word	0x20000180

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <_free_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4605      	mov	r5, r0
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	d045      	beq.n	8006f98 <_free_r+0x94>
 8006f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f10:	1f0c      	subs	r4, r1, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfb8      	it	lt
 8006f16:	18e4      	addlt	r4, r4, r3
 8006f18:	f000 f8c1 	bl	800709e <__malloc_lock>
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <_free_r+0x98>)
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	4610      	mov	r0, r2
 8006f22:	b933      	cbnz	r3, 8006f32 <_free_r+0x2e>
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	6014      	str	r4, [r2, #0]
 8006f28:	4628      	mov	r0, r5
 8006f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2e:	f000 b8b7 	b.w	80070a0 <__malloc_unlock>
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	d90c      	bls.n	8006f50 <_free_r+0x4c>
 8006f36:	6821      	ldr	r1, [r4, #0]
 8006f38:	1862      	adds	r2, r4, r1
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	bf04      	itt	eq
 8006f3e:	681a      	ldreq	r2, [r3, #0]
 8006f40:	685b      	ldreq	r3, [r3, #4]
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	bf04      	itt	eq
 8006f46:	1852      	addeq	r2, r2, r1
 8006f48:	6022      	streq	r2, [r4, #0]
 8006f4a:	6004      	str	r4, [r0, #0]
 8006f4c:	e7ec      	b.n	8006f28 <_free_r+0x24>
 8006f4e:	4613      	mov	r3, r2
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	b10a      	cbz	r2, 8006f58 <_free_r+0x54>
 8006f54:	42a2      	cmp	r2, r4
 8006f56:	d9fa      	bls.n	8006f4e <_free_r+0x4a>
 8006f58:	6819      	ldr	r1, [r3, #0]
 8006f5a:	1858      	adds	r0, r3, r1
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d10b      	bne.n	8006f78 <_free_r+0x74>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	4401      	add	r1, r0
 8006f64:	1858      	adds	r0, r3, r1
 8006f66:	4282      	cmp	r2, r0
 8006f68:	6019      	str	r1, [r3, #0]
 8006f6a:	d1dd      	bne.n	8006f28 <_free_r+0x24>
 8006f6c:	6810      	ldr	r0, [r2, #0]
 8006f6e:	6852      	ldr	r2, [r2, #4]
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	4401      	add	r1, r0
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	e7d7      	b.n	8006f28 <_free_r+0x24>
 8006f78:	d902      	bls.n	8006f80 <_free_r+0x7c>
 8006f7a:	230c      	movs	r3, #12
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	e7d3      	b.n	8006f28 <_free_r+0x24>
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	1821      	adds	r1, r4, r0
 8006f84:	428a      	cmp	r2, r1
 8006f86:	bf04      	itt	eq
 8006f88:	6811      	ldreq	r1, [r2, #0]
 8006f8a:	6852      	ldreq	r2, [r2, #4]
 8006f8c:	6062      	str	r2, [r4, #4]
 8006f8e:	bf04      	itt	eq
 8006f90:	1809      	addeq	r1, r1, r0
 8006f92:	6021      	streq	r1, [r4, #0]
 8006f94:	605c      	str	r4, [r3, #4]
 8006f96:	e7c7      	b.n	8006f28 <_free_r+0x24>
 8006f98:	bd38      	pop	{r3, r4, r5, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000208 	.word	0x20000208

08006fa0 <_malloc_r>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	1ccd      	adds	r5, r1, #3
 8006fa4:	f025 0503 	bic.w	r5, r5, #3
 8006fa8:	3508      	adds	r5, #8
 8006faa:	2d0c      	cmp	r5, #12
 8006fac:	bf38      	it	cc
 8006fae:	250c      	movcc	r5, #12
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	db01      	blt.n	8006fba <_malloc_r+0x1a>
 8006fb6:	42a9      	cmp	r1, r5
 8006fb8:	d903      	bls.n	8006fc2 <_malloc_r+0x22>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	bd70      	pop	{r4, r5, r6, pc}
 8006fc2:	f000 f86c 	bl	800709e <__malloc_lock>
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <_malloc_r+0xac>)
 8006fc8:	6814      	ldr	r4, [r2, #0]
 8006fca:	4621      	mov	r1, r4
 8006fcc:	b991      	cbnz	r1, 8006ff4 <_malloc_r+0x54>
 8006fce:	4c20      	ldr	r4, [pc, #128]	; (8007050 <_malloc_r+0xb0>)
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	b91b      	cbnz	r3, 8006fdc <_malloc_r+0x3c>
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f83d 	bl	8007054 <_sbrk_r>
 8006fda:	6020      	str	r0, [r4, #0]
 8006fdc:	4629      	mov	r1, r5
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f000 f838 	bl	8007054 <_sbrk_r>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d124      	bne.n	8007032 <_malloc_r+0x92>
 8006fe8:	230c      	movs	r3, #12
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	4630      	mov	r0, r6
 8006fee:	f000 f857 	bl	80070a0 <__malloc_unlock>
 8006ff2:	e7e4      	b.n	8006fbe <_malloc_r+0x1e>
 8006ff4:	680b      	ldr	r3, [r1, #0]
 8006ff6:	1b5b      	subs	r3, r3, r5
 8006ff8:	d418      	bmi.n	800702c <_malloc_r+0x8c>
 8006ffa:	2b0b      	cmp	r3, #11
 8006ffc:	d90f      	bls.n	800701e <_malloc_r+0x7e>
 8006ffe:	600b      	str	r3, [r1, #0]
 8007000:	50cd      	str	r5, [r1, r3]
 8007002:	18cc      	adds	r4, r1, r3
 8007004:	4630      	mov	r0, r6
 8007006:	f000 f84b 	bl	80070a0 <__malloc_unlock>
 800700a:	f104 000b 	add.w	r0, r4, #11
 800700e:	1d23      	adds	r3, r4, #4
 8007010:	f020 0007 	bic.w	r0, r0, #7
 8007014:	1ac3      	subs	r3, r0, r3
 8007016:	d0d3      	beq.n	8006fc0 <_malloc_r+0x20>
 8007018:	425a      	negs	r2, r3
 800701a:	50e2      	str	r2, [r4, r3]
 800701c:	e7d0      	b.n	8006fc0 <_malloc_r+0x20>
 800701e:	428c      	cmp	r4, r1
 8007020:	684b      	ldr	r3, [r1, #4]
 8007022:	bf16      	itet	ne
 8007024:	6063      	strne	r3, [r4, #4]
 8007026:	6013      	streq	r3, [r2, #0]
 8007028:	460c      	movne	r4, r1
 800702a:	e7eb      	b.n	8007004 <_malloc_r+0x64>
 800702c:	460c      	mov	r4, r1
 800702e:	6849      	ldr	r1, [r1, #4]
 8007030:	e7cc      	b.n	8006fcc <_malloc_r+0x2c>
 8007032:	1cc4      	adds	r4, r0, #3
 8007034:	f024 0403 	bic.w	r4, r4, #3
 8007038:	42a0      	cmp	r0, r4
 800703a:	d005      	beq.n	8007048 <_malloc_r+0xa8>
 800703c:	1a21      	subs	r1, r4, r0
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f808 	bl	8007054 <_sbrk_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d0cf      	beq.n	8006fe8 <_malloc_r+0x48>
 8007048:	6025      	str	r5, [r4, #0]
 800704a:	e7db      	b.n	8007004 <_malloc_r+0x64>
 800704c:	20000208 	.word	0x20000208
 8007050:	2000020c 	.word	0x2000020c

08007054 <_sbrk_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4c06      	ldr	r4, [pc, #24]	; (8007070 <_sbrk_r+0x1c>)
 8007058:	2300      	movs	r3, #0
 800705a:	4605      	mov	r5, r0
 800705c:	4608      	mov	r0, r1
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	f7f9 fce4 	bl	8000a2c <_sbrk>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_sbrk_r+0x1a>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	b103      	cbz	r3, 800706e <_sbrk_r+0x1a>
 800706c:	602b      	str	r3, [r5, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20000c38 	.word	0x20000c38

08007074 <strncpy>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	3901      	subs	r1, #1
 8007078:	4604      	mov	r4, r0
 800707a:	b902      	cbnz	r2, 800707e <strncpy+0xa>
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	4623      	mov	r3, r4
 8007080:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007084:	f803 5b01 	strb.w	r5, [r3], #1
 8007088:	1e56      	subs	r6, r2, #1
 800708a:	b92d      	cbnz	r5, 8007098 <strncpy+0x24>
 800708c:	4414      	add	r4, r2
 800708e:	42a3      	cmp	r3, r4
 8007090:	d0f4      	beq.n	800707c <strncpy+0x8>
 8007092:	f803 5b01 	strb.w	r5, [r3], #1
 8007096:	e7fa      	b.n	800708e <strncpy+0x1a>
 8007098:	461c      	mov	r4, r3
 800709a:	4632      	mov	r2, r6
 800709c:	e7ed      	b.n	800707a <strncpy+0x6>

0800709e <__malloc_lock>:
 800709e:	4770      	bx	lr

080070a0 <__malloc_unlock>:
 80070a0:	4770      	bx	lr
	...

080070a4 <_init>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr

080070b0 <_fini>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr
